{"version":3,"sources":["utils/FormatTime.js","utils/TemperatureConvert.js","utils/WeatherIcon.js","components/weather/WeatherIconComponent.js","utils/CarouselSettings.js","utils/ImageDetails.js","utils/FetchWeatherData.js","utils/MiscTrackEvents.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherBackground.js","components/weather/InfoDetailComponent.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js"],"names":["FormatTime","timestamp","timezone","formatType","moment","tz","format","fToC","temp","Math","round","getWeatherIcon","data","icon","hour","type","WeatherIconComponent","up","right","down","left","sunrise","sunset","CarouselSettings","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","imageExist","urbanArea","isUndefined","photos","isEmpty","length","getImageDetails","image","mobile","web","attribution","photographer","site","source","axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","process","FetchWeatherData","a","async","weatherCurrent","weatherForecast","get","then","response","weatherData","currently","daily","sunriseTime","sunsetTime","timeFrames","hourly","forEach","date","time","Object","keys","includes","push","days","day","catch","err","Sentry","emitGA","value","Event","category","action","label","InfoComponent","address","updateFavorites","useContext","AddressContext","useState","setDate","setTime","colorTheme","ThemeContext","emitFavoriteCityGA","favoriteCity","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","datetimeSetter","dateObj","current","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","src","alt","style","background","borderTopLeftRadius","borderTopRightRadius","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","fontSize","href","target","rel","getWindDirection","deg","getHour","getWeatherBackground","sunriseHour","sunsetHour","dusk","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","computedTempValue","startsWith","summary","humidity","windSpeed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","theme","selectedDay","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","today","updateSelectedDay","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler"],"mappings":"sHAAA,qBAUeA,IAJI,SAACC,EAAWC,EAAUC,GACvC,OAAOC,IAAOC,GAAe,IAAZJ,EAAkBC,GAAUI,OAAOH,K,iCCPtD,sCAAMI,EAAO,SAAAC,GACX,OAAOC,KAAKC,MAAqB,GAAbF,EAAO,IAAW,K,iCCDxC,qBAgDeG,IAzCQ,SAAAC,GAAS,IACvBC,EAAkBD,EAAlBC,KAAMX,EAAYU,EAAZV,SACPY,EAAOV,MACVC,GAAGH,GACHI,OAAO,KACJS,EAAOD,GAAQ,GAAKA,EAAO,GAAK,MAAQ,QAC9C,GAAID,EACF,OAAQA,GACN,IAAK,YACH,MAAO,MACT,IAAK,cACH,MAAO,QACT,IAAK,OACH,MAAM,GAAN,OAAUE,EAAV,SACF,IAAK,OACH,MAAM,GAAN,OAAUA,EAAV,SACF,IAAK,QACH,MAAO,QACT,IAAK,OACH,MAAM,MAAN,OAAaA,EAAb,UACF,IAAK,MACH,MAAM,MAAN,OAAaA,EAAb,QACF,IAAK,SACH,MAAO,SACT,IAAK,oBACH,MAAO,aACT,IAAK,sBACH,MAAO,eACT,IAAK,OACH,MAAO,OACT,IAAK,eACH,MAAO,UACT,IAAK,UACH,MAAO,aACT,QACE,MAAO,QAGb,MAAO,U,iCC7CT,6BA2CeC,IAvBc,SAAC,GAAY,IAAXD,EAAU,EAAVA,KAoB7B,MAnBmB,CACjB,aAAc,kBAAC,IAAD,MACd,eAAgB,kBAAC,IAAD,MAChB,eAAgB,kBAAC,IAAD,MAChB,iBAAkB,kBAAC,IAAD,MAClB,aAAc,kBAAC,IAAD,MACd,QAAS,kBAAC,IAAD,MACTE,GAAI,kBAAC,IAAD,MACJ,WAAY,kBAAC,IAAD,MACZC,MAAO,kBAAC,IAAD,MACP,aAAc,kBAAC,IAAD,MACdC,KAAM,kBAAC,IAAD,MACN,YAAa,kBAAC,IAAD,MACbC,KAAM,kBAAC,IAAD,MACN,UAAW,kBAAC,IAAD,MACXC,QAAS,kBAAC,IAAD,MACTC,OAAQ,kBAAC,IAAD,OAGQP,IAAS,kBAAC,IAAD,Q,iCCRdQ,IAzBU,SAACR,GAAD,IAAOS,EAAP,uDAAoB,SAApB,MAAkC,CACzDC,MAAO,OACPC,aAAuB,SAATX,EAAkC,WAAfS,EAA0B,EAAI,EAAK,EACpEG,eAAyB,SAATZ,EAAkC,WAAfS,EAA0B,EAAI,EAAK,EACtEI,mBAA6B,SAATb,EAAkB,IAAM,IAC5Cc,WAAqB,SAATd,EAAkC,WAAfS,EAA0B,EAAM,IAAQ,EACvEM,MAAO,IACPC,OAAQ,eACRC,sBAAuB,CACrBC,gBAAiB,CACfC,QAAS,QAEXC,gBAAiB,CACfD,QAAS,QAEXE,gBAAiB,CACfC,KAAM,UACNH,QAAS,OACTI,SAAU,WACVC,IAAc,QAATxB,EAAiB,OAAS,OAC/ByB,OAAQ,gB,iCC3Bd,yFAGMC,EAAa,SAAAC,GACjB,QAAOC,YAAYD,EAAUE,UAAWC,YAAQH,EAAUE,UAEtDF,EAAUE,OAAOE,OAAS,GAyB1BC,EAAkB,SAAAL,GAAc,IAC7BM,GAASP,EAAWC,GACvBA,EAAUE,OAAO,GACjB,CAACK,OAAQ,GAAIC,IAAK,KAFfF,MAD4B,EAIEP,EAAWC,GAC5CA,EAAUE,OAAO,GAAGO,YACpB,CACEC,aAAc,GACdC,KAAM,GACNC,OAAQ,IAGd,MAAO,CACLN,QACAI,aAdiC,EAI5BA,aAWLC,KAfiC,EAIdA,KAYnBC,OAhBiC,EAIRA,U,kICzB7BC,IAAWC,IAAO,CAACC,WAAYF,IAAWG,mBAE1C,IAAMC,EAAS,SAAAC,GACb,MAAM,GAAN,OANe,sCAMf,6CAPcC,mCAOd,YAAkED,EAAlE,0CAgEaE,IA1DU,+BAAAC,EAAAC,OAAA,mDAAQJ,EAAR,EAAQA,QAC3BK,EAAiB,GACjBC,EAAkB,GAGjBvB,YAAYiB,IAAaf,YAAQe,GALf,kCAAAG,EAAA,MAMfP,IACHW,IAAIR,EAAOC,IACXQ,MAAK,SAAAC,GACJ,IAAMC,EAAcD,EAASzD,KAC7B,IAAKiC,YAAQyB,KAAiB3B,YAAY2B,GAAc,CAItD,IAAMpE,EAAWoE,EAAYpE,SAE7B+D,EAAc,aACZ/D,YACGoE,EAAYC,UAFH,CAGZlD,QAASiD,EAAYE,MAAM5D,KAAK,GAAG6D,YACnCnD,OAAQgD,EAAYE,MAAM5D,KAAK,GAAG8D,aAKpC,IAAMC,EAAa,GAGnBL,EAAYM,OAAOhE,KAAKiE,SAAQ,SAAA/D,GAC9B,IAAMgE,EAAO9E,YAAWc,EAAKiE,KAAM7E,EAAU,cACzC8E,OAAOC,KAAKN,GAAYO,SAASJ,GACnCH,EAAWG,GAAMK,KAAjB,aAAuBjF,YAAaY,IAEpC6D,EAAWG,GAAQ,CAAC,aAAC5E,YAAaY,OAGtC,IAAMsE,EAAO,GAGbd,EAAYE,MAAM5D,KAAKiE,SAAQ,SAAAQ,GAC7B,IAAMP,EAAO9E,YAAWqF,EAAIN,KAAM7E,EAAU,cAG5CkF,EAAKN,GAAL,aAAc5E,YAAamF,MAG7BnB,EAAkB,CAACS,aAAYS,YAGlCE,OAAM,SAAAC,GAAG,OAAIC,IAAwBD,OAjDnB,gCAoDhB,CACLtB,iBACAC,oBAtDqB,uC,iCCnBzB,YAqCeuB,IA/BA,SAAC1E,EAAM2E,GACpB,OAAQ3E,GACN,IAAK,YAEH4E,YAAM,CACJC,SAAU,YACVC,OAAQ,kBACRC,MAAOJ,IAET,MACF,IAAK,eAEHC,YAAM,CACJC,SAAU,eACVC,OAAQ,wBACRC,MAAOJ,IAET,MACF,IAAK,aAEHC,YAAM,CACJC,SAAU,aACVC,OAAQ,sBACRC,MAAOJ,O,iJC2LAK,EA9MO,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,QAASpC,EAAwC,EAAxCA,QAASlB,EAA+B,EAA/BA,UAAWuB,EAAoB,EAApBA,eAC5CgC,EAAmBC,qBAAWC,KAA9BF,gBADgE,EAE/CG,mBAAS,IAFsC,mBAEhEtB,EAFgE,KAE1DuB,EAF0D,OAG/CD,mBAAS,IAHsC,mBAGhErB,EAHgE,KAG1DuB,EAH0D,KAKhEC,EAAcL,qBAAWM,KAAzBD,WALgE,EAQ3BxD,YAAgBL,GAArDM,EARgE,EAQhEA,MAAOI,EARyD,EAQzDA,aAAcC,EAR2C,EAQ3CA,KAAMC,EARqC,EAQrCA,OAsB5BmD,EAAqB,SAAC1F,EAAM2F,GAChCf,YAAM,CACJC,SAAU,gBACVC,OAAO,GAAD,OAAK9E,EAAL,SACN+E,MAAOY,KAMLC,EAAuBC,mBAEvBC,EAAe,WACnB,QAAIC,aAAaC,QAAQ,cACLC,KAAKC,MAAMH,aAAaC,QAAQ,cACxBG,QACxB,SAAAC,GAAQ,OAAIA,EAASnB,QAAQoB,WAAapB,EAAQoB,YAErCtE,OAAS,GAkDtBuE,EAAiB,SAAAC,GACrBjB,EAAS1D,YAAY2E,GAA6C,GAAlCA,EAAQhH,OAAO,kBAC/CgG,EAAS3D,YAAY2E,GAA2C,GAAhCA,EAAQhH,OAAO,gBAC/CqG,EAAqBY,QAAUD,GAAoB,MAwBrD,OArBAE,qBAAU,WAERH,EACEjH,IAA6B,IAAtB6D,EAAec,MAAa1E,GAAG4D,EAAe/D,WAGvD,IAAMuH,EAAYC,aAAY,WAC5B,GAAIzD,EAAec,KAAM,CAEvB,IAAM4C,EAAuBvH,IAC1BC,GAAGsG,EAAqBY,QAAStD,EAAe/D,UAChD0H,IAAI,EAAG,KACVP,EAAeM,MAEhB,KACH,OAAO,WACLE,cAAcJ,MAGf,CAACxD,IAGF,yBAAK6D,UAAU,YACb,6BACGrF,YAAWC,GACV,kBAAC,WAAD,KACE,yBACEqF,IAAK/E,EAAMC,OACX+E,IAAI,OACJF,UAAU,yEAEZ,yBACEC,IAAK/E,EAAME,IACX8E,IAAI,OACJF,UAAU,6FAGZ,MAEN,yBACEA,UAAS,UACPrF,YAAWC,GACP,oDADJ,eAEY6D,IAEd0B,MAAOxF,YAAWC,GA3IH,CACnBwF,WAAY,mBACZC,oBAAqB,OACrBC,qBAAsB,QAwI4B,MAC9C,yBAAKN,UAAU,oCACb,yBAAKA,UAAU,aACb,uBACEA,UAAS,oBACPrF,YAAWC,GAAa,cAAgB,KAEzCsD,EAAQoB,UAEX,yBACEU,UAAS,0CACPrF,YAAWC,GAAa,cAAgB,eAExCG,YAAQiC,IAAUjC,YAAQkC,GAQxB,KAPF,kBAAC,WAAD,KACE,2BACGD,EACD,0BAAMgD,UAAU,wBAAhB,cAEF,2BAAI/C,MAKZ,yBACE+C,UAAU,mCACVO,MACExB,IACI,kCACA,qBAENyB,QA/He,WAEvB,GAAKxB,aAAaC,QAAQ,aASnB,CACL,IAAMwB,EAAYvB,KAAKC,MAAMH,aAAaC,QAAQ,cAC5CyB,EAAaD,EAAUrB,QAC3B,SAAAC,GAAQ,OAAIA,EAASnB,QAAQoB,WAAapB,EAAQoB,YAEpD,GAAKoB,EAAW1F,OAQT,CAGL,IAAM2F,EAAcF,EAAUG,WAC5B,SAAAvB,GAAQ,OACNA,EAASnB,QAAQoB,WAAaoB,EAAW,GAAGxC,QAAQoB,YAExD,IAAqB,IAAjBqB,EAAoB,CACtB,IAAME,EAAY,YAAOJ,GACzBI,EAAaC,OAAOH,EAAa,GACjC3B,aAAa+B,QAAQ,YAAa7B,KAAK8B,UAAUH,IACjDlC,EAAmB,SAAUT,EAAQoB,UACrCnB,EAAgB,CACdsC,UAAWI,SArBO,CAEtB,IAAMI,EAAgB,sBAAOR,GAAP,CAAkB,CAACvC,UAASpC,UAASlB,eAC3DoE,aAAa+B,QAAQ,YAAa7B,KAAK8B,UAAUC,IACjDtC,EAAmB,MAAOT,EAAQoB,UAClCnB,EAAgB,CACdsC,UAAWQ,UAnBfjC,aAAa+B,QACX,YACA7B,KAAK8B,UAAU,CAAC,CAAC9C,UAASpC,UAASlB,gBAErC+D,EAAmB,MAAOT,EAAQoB,UAClCnB,EAAgB,CACdsC,UAAW,CAAC,CAACvC,UAASpC,UAASlB,kBAuH1BmE,IAAiB,kBAAC,IAAD,MAAc,kBAAC,IAAD,QAGpC,yBAAKiB,UAAU,4DACZ1E,GAAgBC,EACf,uBAAGyE,UAAU,aAAaG,MAAO,CAACe,SAAU,WAA5C,eAEE,0BAAMlB,UAAU,eAAe1E,GAFjC,aAIE,uBACE0E,UAAU,6EACVmB,KAAM3F,EACN4F,OAAO,SACPC,IAAI,sBACJb,QAlLY,WACxB3C,YAAM,CACJC,SAAU,aACVC,OAAQ,wBACRC,MAAO,mBA+KIzC,IAGH,S,SC1LC+F,EApBU,SAAAC,GACvB,OAAIA,GAAO,GAAKA,GAAO,GACd,KACEA,GAAO,IAAMA,GAAO,GACtB,WACEA,GAAO,IAAMA,GAAO,IACtB,QACEA,GAAO,KAAOA,GAAO,IACvB,aACEA,GAAO,KAAOA,GAAO,IACvB,OACEA,GAAO,KAAOA,GAAO,IACvB,YACEA,GAAO,KAAOA,GAAO,IACvB,OAEA,W,oCCXLC,EAAU,SAACvI,EAAMgE,EAAM7E,GAC3B,GAAa,YAATa,GAA+B,WAATA,EACxB,OAAOX,IAAc,IAAP2E,GACX1E,GAAGH,GACHI,OAAO,KAEZF,MACGC,GAAGH,GACHI,OAAO,MAqDGiJ,EA7Cc,SAAA3I,GAAS,IAC7BC,EAAmCD,EAAnCC,KAAMX,EAA6BU,EAA7BV,SAAUmB,EAAmBT,EAAnBS,QAASC,EAAUV,EAAVU,OAE1BkI,EAAcF,EAAQ,UAAWjI,EAASnB,GAC1CuJ,EAAaH,EAAQ,SAAUhI,EAAQpB,GACvCY,EAAOwI,EAAQ,OAAQ,EAAGpJ,GAC1Ba,EAAOD,GAAQ0I,GAAe1I,GAAQ2I,EAAa,MAAQ,QAE3DC,EAAO5I,GAAQ2I,EAAa,GAAK3I,GAAQ2I,EAE/C,GAAI5I,EACF,OAAQA,GACN,IAAK,YACH,OAAO6I,EAAO,OAAS,YACzB,IAAK,cACH,MAAO,cACT,IAAK,OAEL,IAAK,OAEL,IAAK,QACH,MAAM,YAAN,OAAmB3I,GACrB,IAAK,OACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,MACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,SACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,oBACH,MAAO,aACT,IAAK,sBACH,MAAO,eACT,IAAK,OACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,eACH,MAAO,eACT,IAAK,UACH,MAAO,UACT,QACE,MAAM,SAAN,OAAgBA,GAGtB,MAAM,SAAN,OAAgBA,IC4GH4I,EAlKa,SAAC,GAAsB,IAArB1F,EAAoB,EAApBA,eAAoB,EACPiC,qBAAW0D,KAA7CC,EADyC,EACzCA,YAAaC,EAD4B,EAC5BA,kBAEdC,EAAY,SAAAC,GAEhBrE,YAAM,CACJC,SAAU,eACVC,OAAQ,WACRC,MAAOkE,IAETF,EAAkBE,IAOdC,EAAoB,SAAAlJ,GACxB,MAAuB,MAAhB8I,EACHpJ,KAAKC,MAAMuD,EAAe,GAAD,OAAIlD,KAC7BR,YAAK0D,EAAe,GAAD,OAAIlD,MAmB7B,OACE,kBAAC,WAAD,KACE,yBAAK+G,UAAU,YACb,yBACEC,IAAG,gCAA2BwB,EAC5BtF,GADC,QAGH+D,IAAI,YACJF,UAAU,mDAGZ,6BArBY,CAAC,OAAQ,OAAQ,QAAS,QAsBzB5C,SAASjB,EAAepD,OACjC,yBACEkH,IAAG,gCApBe,SAAxB9D,EAAepD,KACV,OAEF,OAiBM,QACHmH,IAAI,YACJF,UAAU,2FAIhB,yBACEA,UAAU,yDACVG,MAAO,CAACC,WAAY,oBACpB,yBAAKJ,UAAU,qFACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,6CACb,6BACGnH,YAAesD,GAAgBiG,WAAW,MACzC,uBACEpC,UAAU,wBACVO,MAAOpE,EAAekG,SAEpB,kBAACnJ,EAAA,EAAD,CACED,KAAMJ,YAAesD,MAK3B,yBACE8D,IAAG,oBAAepH,YAAesD,GAA9B,QACH+D,IAAI,OACJK,MAAOpE,EAAekG,QACtBrC,UAAU,kDAIhB,uBAAGA,UAAU,+CACV7D,EAAekG,UAGpB,yBAAKrC,UAAU,2CACb,6BACE,0BAAMA,UAAU,sBACbmC,EAAkB,iBAGvB,yBAAKnC,UAAU,sBACb,kCACA,0BACEA,UAAS,yBACS,MAAhB+B,EACI,sBACA,cAENvB,QAAS,kBAAMyB,EAAU,OAN3B,KASA,0BAAMjC,UAAU,QAAhB,KACA,kCACA,0BACEA,UAAS,yBACS,MAAhB+B,EACI,sBACA,cAENvB,QAAS,kBAAMyB,EAAU,OAN3B,SAcR,yBAAKjC,UAAU,wEACb,uBAAGA,UAAU,wDACV7D,EAAekG,SAElB,yBAAKrC,UAAU,2BACb,yBAAKA,UAAU,yBACb,uBAAGA,UAAU,cAAb,aADF,OAEE,uBAAGA,UAAU,QAAQrH,KAAKC,MAAMuD,EAAemG,WAC/C,uBAAGtC,UAAU,gBACX,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,6BACb,2BACE,0BAAMA,UAAU,cAAhB,SADF,OAjHW,WACzB,MAAuB,MAAhB+B,EAAA,UACApJ,KAAKC,MAAMuD,EAAeoG,WAD1B,mBCpCEvI,EDsCGmC,EAAeoG,UCrCtB5J,KAAKC,MAAc,IAARoB,IDmCT,SCpCE,IAAAA,EDsJQwI,GAAsB,KAEzB,uBAAGxC,UAAU,YAET,kBAAC9G,EAAA,EAAD,CACED,KAAMqI,EAAiBnF,EAAesG,iBAK9C,2BACE,0BAAMzC,UAAU,sBAAhB,eADF,OAEGmC,EAAkB,uBACnB,0C,iBEjIHO,IA3BiB,SAAC,GAK1B,IAJLvG,EAII,EAJJA,eACA+B,EAGI,EAHJA,QACApC,EAEI,EAFJA,QACAlB,EACI,EADJA,UAEA,OACE,kBAAC+H,EAAA,EAAD,KACE,kBAAC,WAAD,KACGzE,GAAW/B,EACV,6BACE,kBAAC,EAAD,CACE+B,QAASA,EACTpC,QAASA,EACTlB,UAAWA,EACXuB,eAAgBA,IAElB,kBAAC,EAAD,CAAqBA,eAAgBA,KAGvC,kBAACyG,EAAA,EAAD,U,6JC8DKC,EAhFM,SAAAC,GAAU,IACtBvF,EAA6BuF,EAA7BvF,IAAKwF,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,cACZjB,EAAe3D,qBAAW0D,KAA1BC,YAFqB,EAGA3D,qBAAWM,KAAhCuE,EAHqB,EAGrBA,MAAOxE,EAHc,EAGdA,WAMR0D,EAAoB,SAAAlJ,GACxB,MAAuB,MAAhB8I,EACHpJ,KAAKC,MAAM2E,EAAI,cAAD,OAAetE,KAC7BR,YAAK8E,EAAI,cAAD,OAAetE,MAO7B,OACE,yBACE+G,UAAS,wEAAmEvB,EAAnE,wBAA6FA,EAA7F,0BAAyHwE,EAAzH,8EACPF,IAAUC,EAAV,aAAgCvE,EAAhC,iBAAmDwE,GAAU,GADtD,6CAGTzC,QATgB,WAClBsC,EAAMI,YAAY,CAAC3F,UASjB,yBAAKyC,UAAU,wFACb,uBAAGA,UAAU,8EACV9H,YAAWqF,EAAIN,KAAMM,EAAInF,SAAU,QAGtC,yBAAK4H,UAAU,wBACZnH,YAAe0E,GAAK6E,WAAW,MAC9B,uBACEpC,UAAU,wCACVO,MAAOhD,EAAI8E,SACX,kBAACnJ,EAAA,EAAD,CAAsBD,KAAMJ,YAAe0E,MAG7C,yBACE0C,IAAG,oBAAepH,YAAe0E,GAA9B,QACH2C,IAAI,OACJK,MAAOhD,EAAI8E,QACXrC,UAAU,wEAKhB,yBAAKA,UAAU,qFACb,uBAAGA,UAAU,2BACVmC,EAAkB,QACnB,mCAEF,uBAAGnC,UAAU,gBACVmC,EAAkB,OACnB,oCAIJ,yBACEnC,UAAS,UACmB,OADnB,oGAGT,yBAAKA,UAAU,6EACb,uBAAGA,UAAU,wBAAwBO,MAAM,WACzC,kBAACrH,EAAA,EAAD,CAAsBD,KAAK,aAE7B,2BAAIf,YAAWqF,EAAIZ,YAAaY,EAAInF,SAAU,UAEhD,yBAAK4H,UAAU,6EACb,uBAAGA,UAAU,wBAAwBO,MAAM,UACzC,kBAACrH,EAAA,EAAD,CAAsBD,KAAK,YAE7B,2BAAIf,YAAWqF,EAAIX,WAAYW,EAAInF,SAAU,eCxB1C+K,EAhDY,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpBrB,EAAe3D,qBAAW0D,KAA1BC,YACAkB,EAAS7E,qBAAWM,KAApBuE,MAMDd,EAAoB,SAAAlJ,GACxB,MAAuB,MAAhB8I,EACHpJ,KAAKC,MAAMwK,EAAU,GAAD,OAAInK,KACxBR,YAAK2K,EAAU,GAAD,OAAInK,MAGxB,OACE,yBACE+G,UAAS,qGACG,UAAViD,EAAoB,OAAS,UAE/B,6BACGpK,YAAeuK,GAAWhB,WAAW,MACpC,uBAAGpC,UAAU,gBAAgBO,MAAO6C,EAAUf,SAC5C,kBAACnJ,EAAA,EAAD,CAAsBD,KAAMJ,YAAeuK,MAG7C,yBACEnD,IAAG,oBAAepH,YAAeuK,GAA9B,QACHlD,IAAI,OACJK,MAAO6C,EAAUf,QACjBrC,UAAU,8BAIhB,uBAAGA,UAAU,WACVmC,EAAkB,eACnB,mCAEF,uBAAGnC,UAAU,WACVmC,EAAkB,uBACnB,mCAEF,uBAAGnC,UAAU,uBACV9H,YAAWkL,EAAUnG,KAAMmG,EAAUhL,SAAU,a,kCCsEzCiL,IA7GW,SAAC,GAAiD,IAAhD/D,EAA+C,EAA/CA,SAAUnD,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,gBAAqB,EACnCkC,mBAAS,IAD0B,mBAClE4E,EADkE,KACrDI,EADqD,KAElErG,EAAkBd,EAAlBc,KAAM7E,EAAY+D,EAAZ/D,SA2Bb,OALAsH,qBAAU,YAnBgB,mBAAAzD,EAAAC,OAAA,gDAEnBrB,YAAYsB,EAAec,QACxBsG,EAAQrL,YAAW+E,EAAM7E,EAAU,cAEpC2C,YAAQqB,IAAqBvB,YAAYuB,IAC5CkH,EAAelH,EAAgBkB,KAAKiG,GAASA,EAAQ,KANjC,qCAoBxBC,KAEC,CAACpH,IAGF,kBAACuG,EAAA,EAAD,KACE,kBAAC,WAAD,KACI5H,YAAQqB,EAAgBkB,OAAUvC,YAAQmI,GA2D1C,yBAAKlD,UAAU,QACZjF,YAAQqB,EAAgBkB,MACvB,kBAACmG,EAAA,EAAD,CACEC,aAAc,4CACdC,cAAc,IAGhB,kBAACf,EAAA,EAAD,CACEgB,WAAU,+CAA0CtE,MAlE1D,kBAAC,WAAD,KAEE,yBAAKU,UAAU,kBACZ5D,EAAgBS,WAAWqG,GAC1B,kBAAC,IAAazJ,YAAiB,QAC5B2C,EAAgBS,WAAWqG,GAAaW,KACvC,SAACT,EAAWL,GACV,OACE,kBAAC,EAAD,CAAoBK,UAAWA,EAAWU,IAAKf,QAMvD,kBAACU,EAAA,EAAD,CACEC,aAAY,2CAAsCR,MAMxD,yBAAKlD,UAAU,+BACZ5D,EAAgBS,WAAWqG,GAC1B,kBAAC,IAAazJ,YAAiB,OAAQ,UACpC2C,EAAgBS,WAAWqG,GAAaW,KACvC,SAACT,EAAWL,GACV,OACE,kBAAC,EAAD,CAAoBK,UAAWA,EAAWU,IAAKf,QAMvD,kBAACU,EAAA,EAAD,CACEC,aAAY,2CAAsCR,MAMxD,yBACElD,UAAS,yDACR9C,OAAOC,KAAKf,EAAgBkB,MAAMuG,KAAI,SAACtG,EAAKwF,GAG3C,OACE,kBAAC,EAAD,CACExF,IAAKnB,EAAgBkB,KAAKC,GAC1BuG,IAAKf,EACLA,MAAOxF,EACPyF,cAAeE,EACfA,YAAa,kBAhEN,SAAA3F,GACvB+F,EAAe/F,GA+DoBwG,CAAiBxG","file":"static/js/0.7f05a5bb.chunk.js","sourcesContent":["import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n */\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n\r\nexport default FormatTime\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherIcon = data => {\r\n  const {icon, timezone} = data\r\n  const hour = moment()\r\n    .tz(timezone)\r\n    .format('H')\r\n  const type = hour >= 6 && hour < 18 ? 'day' : 'night'\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return 'day'\r\n      case 'clear-night':\r\n        return 'night'\r\n      case 'rain':\r\n        return `${type}-rain`\r\n      case 'snow':\r\n        return `${type}-snow`\r\n      case 'sleet':\r\n        return 'sleet'\r\n      case 'wind':\r\n        return `wi-${type}-windy`\r\n      case 'fog':\r\n        return `wi-${type}-fog`\r\n      case 'cloudy':\r\n        return 'cloudy'\r\n      case 'partly-cloudy-day':\r\n        return 'day-cloudy'\r\n      case 'partly-cloudy-night':\r\n        return 'night-cloudy'\r\n      case 'hail':\r\n        return 'hail'\r\n      case 'thunderstorm':\r\n        return 'thunder'\r\n      case 'tornado':\r\n        return 'wi-tornado'\r\n      default:\r\n        return 'wi-na'\r\n    }\r\n  }\r\n  return 'wi-na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nconst WeatherIconComponent = ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n\r\nexport default WeatherIconComponent\r\n","// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#A1A6B4',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px'\r\n    }\r\n  }\r\n})\r\n\r\nexport default CarouselSettings\r\n","import {isUndefined, isEmpty} from 'lodash-es'\r\n\r\n// check if there any image exist for an urban area\r\nconst imageExist = urbanArea => {\r\n  return isUndefined(urbanArea.photos) && isEmpty(urbanArea.photos)\r\n    ? false\r\n    : urbanArea.photos.length > 0\r\n}\r\n\r\n/* sample urbanArea\r\n\"urbanArea\": {\r\n  \"name\": \"Christchurch\",\r\n  \"slug\": \"christchurch\",\r\n  \"photos\": [\r\n    {\r\n      \"attribution\": {\r\n        \"license\": \"Creative Commons Attribution-Share Alike 3.0 Unported\",\r\n        \"photographer\": \"P. Stalder\",\r\n        \"site\": \"Wikimedia Commons\",\r\n        \"source\": \"https://commons.wikimedia.org/wiki/File:Christchurch_City.jpg\"\r\n      },\r\n      \"image\": {\r\n        \"mobile\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch-0cf7c854fe.jpg\",\r\n        \"web\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch_web-23e4656c2c.jpg\"\r\n      }\r\n    }\r\n  ]\r\n} */\r\n/**\r\n * @param {Object} urbanArea\r\n */\r\nconst getImageDetails = urbanArea => {\r\n  const {image} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0]\r\n    : {mobile: '', web: ''}\r\n  const {photographer, site, source} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0].attribution\r\n    : {\r\n        photographer: '',\r\n        site: '',\r\n        source: ''\r\n      }\r\n\r\n  return {\r\n    image,\r\n    photographer,\r\n    site,\r\n    source\r\n  }\r\n}\r\n\r\nexport {imageExist, getImageDetails}\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport FormatTime from './FormatTime'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nconst API_KEY = process.env.REACT_APP_DARKSKY_API_KEY\r\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nconst getURL = latlong => {\r\n  return `${CORS_URL}/https://api.darksky.net/forecast/${API_KEY}/${latlong}?extend=hourly&exclude=minutely,flags`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong)) {\r\n    await axios\r\n      .get(getURL(latlong))\r\n      .then(response => {\r\n        const weatherData = response.data\r\n        if (!isEmpty(weatherData) && !isUndefined(weatherData)) {\r\n          // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n          // displaying weatherIcon with day or night variants specific to location timezone\r\n          // parsing sunriseTime & sunsetTime according to the timezone\r\n          const timezone = weatherData.timezone\r\n\r\n          weatherCurrent = {\r\n            timezone,\r\n            ...weatherData.currently,\r\n            sunrise: weatherData.daily.data[0].sunriseTime,\r\n            sunset: weatherData.daily.data[0].sunsetTime\r\n          }\r\n\r\n          // group 168 hours into days as keys in timeFrames\r\n          // group days and timeFrames into weatherForecast\r\n          const timeFrames = {}\r\n          // create date as the keys for timeFrame in timeFrames\r\n          // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n          weatherData.hourly.data.forEach(hour => {\r\n            const date = FormatTime(hour.time, timezone, 'MM/DD/YYYY')\r\n            if (Object.keys(timeFrames).includes(date)) {\r\n              timeFrames[date].push({timezone, ...hour})\r\n            } else {\r\n              timeFrames[date] = [{timezone, ...hour}]\r\n            }\r\n          })\r\n          const days = {}\r\n          // create date as the keys for the day in days\r\n          // i.e days: {'02/28/2020': {...day}, ...}\r\n          weatherData.daily.data.forEach(day => {\r\n            const date = FormatTime(day.time, timezone, 'MM/DD/YYYY')\r\n            // since there will be unique day objects in days\r\n            // just create a 'date' key with day object as value for as many days\r\n            days[date] = {timezone, ...day}\r\n          })\r\n\r\n          weatherForecast = {timeFrames, days}\r\n        }\r\n      })\r\n      .catch(err => Sentry.captureException(err))\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","import {Event} from './ReactAnalytics'\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String} value\r\n */\r\nconst emitGA = (type, value) => {\r\n  switch (type) {\r\n    case 'favorites':\r\n      // track selectedFavorite to GA\r\n      Event({\r\n        category: 'Favorites',\r\n        action: 'Select Favorite',\r\n        label: value\r\n      })\r\n      break\r\n    case 'explore-life':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Explore Life',\r\n        action: 'Click on Explore Life',\r\n        label: value\r\n      })\r\n      break\r\n    case 'powered-by':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Powered By',\r\n        action: 'Click on Powered By',\r\n        label: value\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default emitGA\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\r\n\r\nconst InfoComponent = ({address, latlong, urbanArea, weatherCurrent}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  // get image details\r\n  const {image, photographer, site, source} = getImageDetails(urbanArea)\r\n\r\n  const imageOverlay = {\r\n    background: 'rgba(0,0,0,0.55)',\r\n    borderTopLeftRadius: '1rem',\r\n    borderTopRightRadius: '1rem'\r\n  }\r\n\r\n  // track image source click event to GA\r\n  const emitImageSourceGA = () => {\r\n    Event({\r\n      category: 'City Image',\r\n      action: 'Click on Image Source',\r\n      label: 'Image source'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * track select favorite click event to GA\r\n   * @param {String} type (add or remove)\r\n   * @param {String} favoriteCity (name)\r\n   */\r\n  const emitFavoriteCityGA = (type, favoriteCity) => {\r\n    Event({\r\n      category: 'Favorite City',\r\n      action: `${type} city`,\r\n      label: favoriteCity\r\n    })\r\n  }\r\n\r\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem(\r\n        'favorites',\r\n        JSON.stringify([{address, latlong, urbanArea}])\r\n      )\r\n      emitFavoriteCityGA('add', address.cityName)\r\n      updateFavorites({\r\n        favorites: [{address, latlong, urbanArea}]\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const duplicates = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        // add newly added favorite to old favorites\r\n        const updatedFavorites = [...favorites, {address, latlong, urbanArea}]\r\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n        emitFavoriteCityGA('add', address.cityName)\r\n        updateFavorites({\r\n          favorites: updatedFavorites\r\n        })\r\n      } else {\r\n        // if already favorite is selected\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          favorite =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          const newFavorites = [...favorites]\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          emitFavoriteCityGA('remove', address.cityName)\r\n          updateFavorites({\r\n            favorites: newFavorites\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = dateObj => {\r\n    setDate(!isUndefined(dateObj) ? dateObj.format('MMMM Do, YYYY') : '')\r\n    setTime(!isUndefined(dateObj) ? dateObj.format('dddd h:mm A') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever weatherCurrent change\r\n    datetimeSetter(\r\n      moment(weatherCurrent.time * 1000).tz(weatherCurrent.timezone)\r\n    )\r\n\r\n    const dateTimer = setInterval(() => {\r\n      if (weatherCurrent.time) {\r\n        // update date and time every second only when there is a valid timestamp\r\n        const formattedDateTimeObj = moment\r\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n          .add(1, 's')\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [weatherCurrent])\r\n\r\n  return (\r\n    <div className='relative'>\r\n      <div>\r\n        {imageExist(urbanArea) ? (\r\n          <Fragment>\r\n            <img\r\n              src={image.mobile}\r\n              alt='city'\r\n              className='block sm:hidden h-40 w-full object-cover object-center rounded-t-2xl'\r\n            />\r\n            <img\r\n              src={image.web}\r\n              alt='city'\r\n              className='hidden sm:block sm:h-32 md:h-24 xl:h-32 w-full object-cover object-center rounded-t-2xl'\r\n            />\r\n          </Fragment>\r\n        ) : null}\r\n      </div>\r\n      <div\r\n        className={`${\r\n          imageExist(urbanArea)\r\n            ? 'absolute top-0 left-0 right-0 bottom-0 text-light'\r\n            : `text-${colorTheme}`\r\n        }`}\r\n        style={imageExist(urbanArea) ? imageOverlay : null}>\r\n        <div className='flex justify-between items-start'>\r\n          <div className='pt-4 px-4'>\r\n            <p\r\n              className={`font-bold ${\r\n                imageExist(urbanArea) ? 'sm:text-2xl' : ''\r\n              }`}>\r\n              {address.cityName}\r\n            </p>\r\n            <div\r\n              className={`sm:flex-col md:flex md:flex-row ${\r\n                imageExist(urbanArea) ? 'font-medium' : 'font-light'\r\n              }`}>\r\n              {!isEmpty(date) && !isEmpty(time) ? (\r\n                <Fragment>\r\n                  <p>\r\n                    {date}\r\n                    <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n                  </p>\r\n                  <p>{time}</p>\r\n                </Fragment>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className='mt-6 mr-4 cursor-pointer text-xl'\r\n            title={\r\n              isBookmarked()\r\n                ? 'Remove this city from favorites'\r\n                : 'Favorite this city'\r\n            }\r\n            onClick={favoritesHandler}>\r\n            {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\r\n          </div>\r\n        </div>\r\n        <div className='hidden md:block text-right bottom-0 right-0 xl:mt-8 px-2'>\r\n          {photographer && site ? (\r\n            <p className='font-light' style={{fontSize: '0.5rem'}}>\r\n              Photo by&nbsp;\r\n              <span className='font-medium'>{photographer}</span>\r\n              &nbsp;on&nbsp;\r\n              <a\r\n                className='link z-0 font-medium hover:no-underline hover:font-medium hover:text-light'\r\n                href={source}\r\n                target='_blank'\r\n                rel='noreferrer noopener'\r\n                onClick={emitImageSourceGA}>\r\n                {site}\r\n              </a>\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n\r\nInfoComponent.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * format time into an hour\r\n * @param {String} type (sunrise | sunset | hour)\r\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getHour = (type, time, timezone) => {\r\n  if (type === 'sunrise' || type === 'sunset') {\r\n    return moment(time * 1000)\r\n      .tz(timezone)\r\n      .format('H')\r\n  }\r\n  moment()\r\n    .tz(timezone)\r\n    .format('H')\r\n}\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherBackground = data => {\r\n  const {icon, timezone, sunrise, sunset} = data\r\n  // format sunrise and sunset in weatherCurrent of data into an hour\r\n  const sunriseHour = getHour('sunrise', sunrise, timezone)\r\n  const sunsetHour = getHour('sunset', sunset, timezone)\r\n  const hour = getHour('hour', 0, timezone)\r\n  const type = hour >= sunriseHour && hour <= sunsetHour ? 'day' : 'night'\r\n  // to show sunset weather background 1hr before the sunset\r\n  const dusk = hour >= sunsetHour - 1 && hour <= sunsetHour\r\n\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return dusk ? 'dusk' : 'clear-day'\r\n      case 'clear-night':\r\n        return 'clear-night'\r\n      case 'rain':\r\n        return `overcast-${type}`\r\n      case 'snow':\r\n        return `overcast-${type}`\r\n      case 'sleet':\r\n        return `overcast-${type}`\r\n      case 'wind':\r\n        return `cloudy-${type}`\r\n      case 'fog':\r\n        return `overcast-${type}`\r\n      case 'cloudy':\r\n        return `cloudy-${type}`\r\n      case 'partly-cloudy-day':\r\n        return 'cloudy-day'\r\n      case 'partly-cloudy-night':\r\n        return 'cloudy-night'\r\n      case 'hail':\r\n        return `overcast-${type}`\r\n      case 'thunderstorm':\r\n        return 'thunderstorm'\r\n      case 'tornado':\r\n        return 'tornado'\r\n      default:\r\n        return `clear-${type}`\r\n    }\r\n  }\r\n  return `clear-${type}`\r\n}\r\n\r\nexport default getWeatherBackground\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport {mToK} from '../../utils/SpeedConvert'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport getWeatherBackground from './../../utils/WeatherBackground'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n\r\n  const unitClick = unit => {\r\n    // track event to GA\r\n    Event({\r\n      category: 'Weather Unit',\r\n      action: 'Set Unit',\r\n      label: unit\r\n    })\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(weatherCurrent[`${type}`])\r\n      : fToC(weatherCurrent[`${type}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.windSpeed)} mph`\r\n      : `${mToK(weatherCurrent.windSpeed)} kmph`\r\n  }\r\n\r\n  const WET_TYPES = ['rain', 'snow', 'sleet', 'hail']\r\n\r\n  // return rain or snow svg image for the above wet types\r\n  const weatherSVG = () => {\r\n    if (weatherCurrent.icon === 'snow') {\r\n      return 'snow'\r\n    }\r\n    return 'rain'\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='relative'>\r\n        <img\r\n          src={`./weather-backgrounds/${getWeatherBackground(\r\n            weatherCurrent\r\n          )}.jpg`}\r\n          alt='clear day'\r\n          className='w-full h-64 sm:h-48 object-cover object-center'\r\n        />\r\n        {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\r\n        <div>\r\n          {WET_TYPES.includes(weatherCurrent.icon) && (\r\n            <img\r\n              src={`./weather-backgrounds/${weatherSVG()}.svg`}\r\n              alt='clear day'\r\n              className='w-full h-64 sm:h-48 object-cover object-center absolute top-0 right-0 bottom-0 left-0'\r\n            />\r\n          )}\r\n        </div>\r\n        <div\r\n          className='absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto'\r\n          style={{background: 'rgba(0,0,0,0.2)'}}>\r\n          <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\r\n            <div className='flex-col sm:w-full lg:w-1/2'>\r\n              <div className='flex flex-row justify-between sm:justify-start'>\r\n                <div className='flex flex-col justify-center items-center'>\r\n                  <div>\r\n                    {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\r\n                      <p\r\n                        className='text-6xl sm:mx-2 mt-2'\r\n                        title={weatherCurrent.summary}>\r\n                        {\r\n                          <WeatherIconComponent\r\n                            type={getWeatherIcon(weatherCurrent)}\r\n                          />\r\n                        }\r\n                      </p>\r\n                    ) : (\r\n                      <img\r\n                        src={`./weather/${getWeatherIcon(weatherCurrent)}.svg`}\r\n                        alt='icon'\r\n                        title={weatherCurrent.summary}\r\n                        className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                      />\r\n                    )}\r\n                  </div>\r\n                  <p className='hidden sm:flex font-medium -mt-2 capitalize'>\r\n                    {weatherCurrent.summary}\r\n                  </p>\r\n                </div>\r\n                <div className='flex justify-start items-center sm:ml-3'>\r\n                  <div>\r\n                    <span className='text-6xl font-bold'>\r\n                      {computedTempValue('temperature')}\r\n                    </span>\r\n                  </div>\r\n                  <div className='-mt-8 mx-2 text-sm'>\r\n                    <sup>o</sup>\r\n                    <span\r\n                      className={`cursor-pointer ${\r\n                        weatherUnit === 'F'\r\n                          ? 'font-bold underline'\r\n                          : 'font-light'\r\n                      }`}\r\n                      onClick={() => unitClick('F')}>\r\n                      F\r\n                    </span>\r\n                    <span className='mx-1'>|</span>\r\n                    <sup>o</sup>\r\n                    <span\r\n                      className={`cursor-pointer ${\r\n                        weatherUnit === 'C'\r\n                          ? 'font-bold underline'\r\n                          : 'font-light'\r\n                      }`}\r\n                      onClick={() => unitClick('C')}>\r\n                      C\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* weather info */}\r\n            <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n              <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n                {weatherCurrent.summary}\r\n              </p>\r\n              <div className='text-sm sm:text-lg ml-8'>\r\n                <div className='flex flex-row sm:my-2'>\r\n                  <p className='font-light'>Humidity:</p>&nbsp;\r\n                  <p className='mx-1'>{Math.round(weatherCurrent.humidity)}</p>\r\n                  <p className='text-sm mt-1'>\r\n                    <FiPercent />\r\n                  </p>\r\n                </div>\r\n                <div className='flex items-center sm:my-2'>\r\n                  <p>\r\n                    <span className='font-light'>Wind:</span>&nbsp;\r\n                    {computedSpeedValue()}{' '}\r\n                  </p>\r\n                  <p className='text-3xl'>\r\n                    {\r\n                      <WeatherIconComponent\r\n                        type={getWindDirection(weatherCurrent.windBearing)}\r\n                      />\r\n                    }\r\n                  </p>\r\n                </div>\r\n                <p>\r\n                  <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\r\n                  {computedTempValue('apparentTemperature')}\r\n                  <sup>o</sup>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n\r\nInfoDetailComponent.propTypes = {\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst CurrentWeatherContainer = ({\r\n  weatherCurrent,\r\n  address,\r\n  latlong,\r\n  urbanArea\r\n}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              urbanArea={urbanArea}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n\r\nCurrentWeatherContainer.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\n\r\nconst DayComponent = props => {\r\n  const {day, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be 'High' or 'Low'\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(day[`temperature${type}`])\r\n      : fToC(day[`temperature${type}`])\r\n  }\r\n\r\n  const selectedDay = () => {\r\n    props.selectedDay({day})\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`sm:border-t sm:border-r sm:border-b-0 sm:border-l-0 sm:border-${colorTheme} sm:hover:bg-${colorTheme} sm:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer ${\r\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\r\n      } transition-all duration-1000 ease-in-out`}\r\n      onClick={selectedDay}>\r\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\r\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-light sm:font-medium'>\r\n          {FormatTime(day.time, day.timezone, 'ddd')}\r\n        </p>\r\n        {/* icon */}\r\n        <div className='flex w-1/6 sm:w-full'>\r\n          {getWeatherIcon(day).startsWith('wi') ? (\r\n            <p\r\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n              title={day.summary}>\r\n              <WeatherIconComponent type={getWeatherIcon(day)} />\r\n            </p>\r\n          ) : (\r\n            <img\r\n              src={`./weather/${getWeatherIcon(day)}.svg`}\r\n              alt='icon'\r\n              title={day.summary}\r\n              className='sm:-mt-3 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n            />\r\n          )}\r\n        </div>\r\n        {/* high & low */}\r\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n          <p className='mx-2 text-xs sm:text-sm'>\r\n            {computedTempValue('High')}\r\n            <sup>o</sup>\r\n          </p>\r\n          <p className='mx-2 text-xs'>\r\n            {computedTempValue('Low')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n        {/* sunrise & sunset */}\r\n        <div\r\n          className={`${\r\n            index === selectedIndex ? 'flex' : 'flex'\r\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p className='text-xl text-sun mr-2' title='sunrise'>\r\n              <WeatherIconComponent type='sunrise' />\r\n            </p>\r\n            <p>{FormatTime(day.sunriseTime, day.timezone, 'h:mm')}</p>\r\n          </div>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p className='text-xl text-sun mr-1' title='sunset'>\r\n              <WeatherIconComponent type='sunset' />\r\n            </p>\r\n            <p>{FormatTime(day.sunsetTime, day.timezone, 'HH:mm')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n\r\nDayComponent.propTypes = {\r\n  day: PropTypes.object,\r\n  selectedDay: PropTypes.func,\r\n  index: PropTypes.string,\r\n  selectedIndex: PropTypes.string\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(Timeframe[`${type}`])\r\n      : fToC(Timeframe[`${type}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 pt-2 w-full font-light text-${\r\n        theme === 'light' ? 'dark' : 'light'\r\n      }`}>\r\n      <div>\r\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\r\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\r\n          </p>\r\n        ) : (\r\n          <img\r\n            src={`./weather/${getWeatherIcon(Timeframe)}.svg`}\r\n            alt='icon'\r\n            title={Timeframe.summary}\r\n            className='w-16 h-16 object-contain'\r\n          />\r\n        )}\r\n      </div>\r\n      <p className='text-lg'>\r\n        {computedTempValue('temperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm'>\r\n        {computedTempValue('apparentTemperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>\r\n        {FormatTime(Timeframe.time, Timeframe.timezone, 'h:mm A')}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n\r\nTimeframeComponent.propTypes = {\r\n  Timeframe: PropTypes.object\r\n}\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\r\n  const [selectedDay, setSelectedDay] = useState('')\r\n  const {time, timezone} = weatherCurrent\r\n\r\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (!isUndefined(weatherCurrent.time)) {\r\n      const today = FormatTime(time, timezone, 'MM/DD/YYYY')\r\n      // check if today key exist in days\r\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n        setSelectedDay(weatherForecast.days[today] ? today : '')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * day is a date '02/28/2020'\r\n   * @param {String} day\r\n   */\r\n  const daySelectHandler = day => {\r\n    setSelectedDay(day)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    // eslint-disable-next-line\r\n  }, [weatherForecast])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden pb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex py-3 sm:mb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* day */}\r\n            <div\r\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n              {Object.keys(weatherForecast.days).map((day, index) => {\r\n                // day is key in weatherForecast.days -> '02/28/2020'\r\n                // index is the position of key -> 0\r\n                return (\r\n                  <DayComponent\r\n                    day={weatherForecast.days[day]}\r\n                    key={index}\r\n                    index={day}\r\n                    selectedIndex={selectedDay}\r\n                    selectedDay={() => daySelectHandler(day)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.days) ? (\r\n              <ErrorComponent\r\n                errorMessage={'No forecast data available for this city!'}\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n\r\nForecastContainer.propTypes = {\r\n  cityName: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n  weatherForecast: PropTypes.object\r\n}\r\n"],"sourceRoot":""}