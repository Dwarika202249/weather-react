{"version":3,"sources":["utils/FormatTime.js","utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/MiscTrackEvents.js","utils/WeatherBackground.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/TemperatureConvert.js","components/weather/WeatherIconComponent.js","components/weather/InfoDetailComponent.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","containers/weather-forecast/WeatherForecastContainer.js"],"names":["FormatTime","timestamp","timezone","formatType","moment","tz","format","axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","process","FetchWeatherData","a","async","weatherCurrent","weatherForecast","isUndefined","isEmpty","isNull","get","data","weatherData","currently","sunrise","daily","sunriseTime","sunset","sunsetTime","timeFrames","hourly","forEach","hour","date","time","Object","keys","includes","push","days","day","Sentry","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","emitGA","value","Event","category","action","label","getHour","getWeatherBackground","icon","sunriseHour","sunsetHour","dawn","dusk","InfoComponent","address","urbanArea","updateFavorites","useContext","AddressContext","useState","setDate","setTime","emitFavoriteCityGA","favoriteCity","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","current","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","getWeatherIcon","fToC","temp","Math","round","WeatherIconComponent","up","right","down","left","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","weatherUnitTitle","unselectedWeatherUnit","unitClick","unit","computedTempValue","startsWith","summary","src","alt","humidity","windSpeed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","selectedDayIndex","setSelectedDayIndex","selectedDayIndexHandler","indexOf","today","updateSelectedDay","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","WeatherForecastContainer","imageBorder","borderTopLeftRadius","borderTopRightRadius","style","background","href","target","rel","slug","name"],"mappings":"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","file":"static/js/1.5e2bca67.chunk.js","sourcesContent":["import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n */\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n\r\nexport default FormatTime\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport {isUndefined, isEmpty, isNull} from 'lodash-es'\r\nimport FormatTime from './FormatTime'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nconst API_KEY = process.env.REACT_APP_DARKSKY_API_KEY\r\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nconst getURL = latlong => {\r\n  return `${CORS_URL}/https://api.darksky.net/forecast/${API_KEY}/${latlong}?extend=hourly&exclude=minutely,flags`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong) && !isNull(latlong)) {\r\n    try {\r\n      const {data} = await axios.get(getURL(latlong))\r\n      const weatherData = data\r\n      if (!isEmpty(weatherData) && !isUndefined(weatherData)) {\r\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n        // displaying weatherIcon with day or night variants specific to location timezone\r\n        // parsing sunriseTime & sunsetTime according to the timezone\r\n        const timezone = weatherData.timezone\r\n\r\n        weatherCurrent = {\r\n          timezone,\r\n          ...weatherData.currently,\r\n          sunrise: weatherData.daily.data[0].sunriseTime,\r\n          sunset: weatherData.daily.data[0].sunsetTime\r\n        }\r\n\r\n        // group 168 hours into days as keys in timeFrames\r\n        // group days and timeFrames into weatherForecast\r\n        const timeFrames = {}\r\n        // create date as the keys for timeFrame in timeFrames\r\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n        weatherData.hourly.data.forEach(hour => {\r\n          const date = FormatTime(hour.time, timezone, 'MM/DD/YYYY')\r\n          if (Object.keys(timeFrames).includes(date)) {\r\n            timeFrames[date].push({timezone, ...hour})\r\n          } else {\r\n            timeFrames[date] = [{timezone, ...hour}]\r\n          }\r\n        })\r\n        const days = {}\r\n        // create date as the keys for the day in days\r\n        // i.e days: {'02/28/2020': {...day}, ...}\r\n        weatherData.daily.data.forEach(day => {\r\n          const date = FormatTime(day.time, timezone, 'MM/DD/YYYY')\r\n          // since there will be unique day objects in days\r\n          // just create a 'date' key with day object as value for as many days\r\n          days[date] = {timezone, ...day}\r\n        })\r\n\r\n        weatherForecast = {timeFrames, days}\r\n      }\r\n    } catch (err) {\r\n      Sentry.captureException(err)\r\n    }\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#A1A6B4',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px'\r\n    }\r\n  }\r\n})\r\n\r\nexport default CarouselSettings\r\n","import {Event} from './ReactAnalytics'\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String} value\r\n */\r\nconst emitGA = (type, value) => {\r\n  switch (type) {\r\n    case 'favorites':\r\n      // track selectedFavorite to GA\r\n      Event({\r\n        category: 'Favorites',\r\n        action: 'Select Favorite',\r\n        label: value\r\n      })\r\n      break\r\n    case 'explore-life':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Explore Life',\r\n        action: 'Click on Explore Life',\r\n        label: value\r\n      })\r\n      break\r\n    case 'powered-by':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Powered By',\r\n        action: 'Click on Powered By',\r\n        label: value\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default emitGA\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * format time into an hour\r\n * @param {String} type (sunrise | sunset | hour)\r\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getHour = (type, time, timezone) => {\r\n  if (type === 'sunrise' || type === 'sunset') {\r\n    return moment(time * 1000)\r\n      .tz(timezone)\r\n      .format('H')\r\n  }\r\n  return moment()\r\n    .tz(timezone)\r\n    .format('H')\r\n}\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherBackground = data => {\r\n  const {icon, timezone, sunrise, sunset} = data\r\n  // format sunrise and sunset in weatherCurrent of data into an hour\r\n  const sunriseHour = getHour('sunrise', sunrise, timezone)\r\n  const sunsetHour = getHour('sunset', sunset, timezone)\r\n  const hour = getHour('hour', 0, timezone)\r\n  // subtract 1hr from sunriseHour and add 1hr to sunsetHour to compensate for minutes\r\n  // since moment will format 7:23 as 7 and 17:27 as 17\r\n  const type = hour >= sunriseHour - 1 && hour <= sunsetHour ? 'day' : 'night'\r\n  // to show sunrise weather background 1hr before and during the sunrise hour\r\n  const dawn = hour === sunriseHour - 1 || hour === sunriseHour\r\n  // to show sunset weather background 1hr before and during the sunset hour\r\n  const dusk = hour === sunsetHour - 1 || hour === sunsetHour\r\n\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\r\n      case 'clear-night':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\r\n      case 'rain':\r\n        return `overcast-${type}`\r\n      case 'snow':\r\n        return `overcast-${type}`\r\n      case 'sleet':\r\n        return `overcast-${type}`\r\n      case 'wind':\r\n        return `cloudy-${type}`\r\n      case 'fog':\r\n        return `overcast-${type}`\r\n      case 'cloudy':\r\n        return `cloudy-${type}`\r\n      case 'partly-cloudy-day':\r\n        return 'cloudy-day'\r\n      case 'partly-cloudy-night':\r\n        return 'cloudy-night'\r\n      case 'hail':\r\n        return `overcast-${type}`\r\n      case 'thunderstorm':\r\n        return 'thunderstorm'\r\n      case 'tornado':\r\n        return 'tornado'\r\n      default:\r\n        return 'clear-day'\r\n    }\r\n  }\r\n  return 'clear-day'\r\n}\r\n\r\nexport default getWeatherBackground\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\r\n\r\nconst InfoComponent = ({address, latlong, urbanArea, weatherCurrent}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  /**\r\n   * track select favorite click event to GA\r\n   * @param {String} type (add or remove)\r\n   * @param {String} favoriteCity (name)\r\n   */\r\n  const emitFavoriteCityGA = (type, favoriteCity) => {\r\n    Event({\r\n      category: 'Favorite City',\r\n      action: `${type} city`,\r\n      label: favoriteCity\r\n    })\r\n  }\r\n\r\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem(\r\n        'favorites',\r\n        JSON.stringify([{address, latlong, urbanArea}])\r\n      )\r\n      emitFavoriteCityGA('add', address.cityName)\r\n      updateFavorites({\r\n        favorites: [{address, latlong, urbanArea}]\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const duplicates = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        // add newly added favorite to old favorites\r\n        const updatedFavorites = [...favorites, {address, latlong, urbanArea}]\r\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n        emitFavoriteCityGA('add', address.cityName)\r\n        updateFavorites({\r\n          favorites: updatedFavorites\r\n        })\r\n      } else {\r\n        // if already favorite is selected\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          favorite =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          const newFavorites = [...favorites]\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          emitFavoriteCityGA('remove', address.cityName)\r\n          updateFavorites({\r\n            favorites: newFavorites\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = dateObj => {\r\n    setDate(!isUndefined(dateObj) ? dateObj.format('MMMM Do, YYYY') : '')\r\n    setTime(!isUndefined(dateObj) ? dateObj.format('dddd h:mm A') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever weatherCurrent change\r\n    datetimeSetter(\r\n      moment(weatherCurrent.time * 1000).tz(weatherCurrent.timezone)\r\n    )\r\n\r\n    const dateTimer = setInterval(() => {\r\n      if (weatherCurrent.time) {\r\n        // update date and time every second only when there is a valid timestamp\r\n        const formattedDateTimeObj = moment\r\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n          .add(1, 's')\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [weatherCurrent])\r\n\r\n  return (\r\n    <div className='flex justify-between items-start'>\r\n      <div className='pt-4 px-4'>\r\n        <p className='font-bold'>{address.cityName}</p>\r\n        <div className='sm:flex-col md:flex md:flex-row font-light'>\r\n          {!isEmpty(date) && !isEmpty(time) ? (\r\n            <Fragment>\r\n              <p>\r\n                {date}\r\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n              </p>\r\n              <p>{time}</p>\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        className='mt-6 mr-4 cursor-pointer text-xl'\r\n        title={\r\n          isBookmarked()\r\n            ? 'Remove this city from favorites'\r\n            : 'Favorite this city'\r\n        }\r\n        onClick={favoritesHandler}>\r\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n\r\nInfoComponent.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n */\r\nconst getWeatherIcon = data => {\r\n  const {icon, time, timezone} = data\r\n  const hour = moment(time * 1000)\r\n    .tz(timezone)\r\n    .format('H')\r\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return 'day'\r\n      case 'clear-night':\r\n        return 'night'\r\n      case 'rain':\r\n        return `${type}-rain`\r\n      case 'snow':\r\n        return `${type}-snow`\r\n      case 'sleet':\r\n        return 'sleet'\r\n      case 'wind':\r\n        return `${type}-cloudy`\r\n      case 'fog':\r\n        return `${type}-cloudy`\r\n      case 'cloudy':\r\n        return 'cloudy'\r\n      case 'partly-cloudy-day':\r\n        return 'day-cloudy'\r\n      case 'partly-cloudy-night':\r\n        return 'night-cloudy'\r\n      case 'hail':\r\n        return 'hail'\r\n      case 'thunderstorm':\r\n        return 'thunder'\r\n      case 'tornado':\r\n        return 'wi-tornado'\r\n      default:\r\n        return 'wi-na'\r\n    }\r\n  }\r\n  return 'wi-na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nconst WeatherIconComponent = ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n\r\nexport default WeatherIconComponent\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport {mToK} from '../../utils/SpeedConvert'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n  const weatherUnitTitle = weatherUnit === 'C' ? 'Celsius' : 'Fahrenheit'\r\n  const unselectedWeatherUnit = weatherUnit === 'C' ? 'F' : 'C'\r\n  const unitClick = unit => {\r\n    // track event to GA\r\n    Event({\r\n      category: 'Weather Unit',\r\n      action: 'Set Unit',\r\n      label: unit\r\n    })\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(weatherCurrent[`${type}`])\r\n      : fToC(weatherCurrent[`${type}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.windSpeed)} mph`\r\n      : `${mToK(weatherCurrent.windSpeed)} kmph`\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\r\n        <div className='flex-col sm:w-full lg:w-1/2'>\r\n          <div className='flex flex-row justify-between sm:justify-start'>\r\n            <div className='flex flex-col justify-center items-center'>\r\n              <div>\r\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\r\n                  <p\r\n                    className='text-6xl sm:mx-2 mt-2'\r\n                    title={weatherCurrent.summary}>\r\n                    {\r\n                      <WeatherIconComponent\r\n                        type={getWeatherIcon(weatherCurrent)}\r\n                      />\r\n                    }\r\n                  </p>\r\n                ) : (\r\n                  <img\r\n                    src={`./weather/${getWeatherIcon(weatherCurrent)}.svg`}\r\n                    alt='icon'\r\n                    title={weatherCurrent.summary}\r\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                  />\r\n                )}\r\n              </div>\r\n              <p className='hidden sm:flex font-medium -mt-2 ml-3 capitalize'>\r\n                {weatherCurrent.summary}\r\n              </p>\r\n            </div>\r\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\r\n              <div>\r\n                <span className='text-6xl font-bold'>\r\n                  {computedTempValue('temperature')}\r\n                </span>\r\n              </div>\r\n              <p className='-mt-8 text-3xl'>\r\n                <sup>o</sup>\r\n              </p>\r\n              <div className='-mt-10 mx-2 text-xl'>\r\n                {/* selected weatherUnit */}\r\n                <span\r\n                  className='cursor-pointer font-bold'\r\n                  title={weatherUnitTitle}\r\n                  onClick={() => unitClick(weatherUnit)}>\r\n                  {weatherUnit}\r\n                </span>\r\n                <span className='mx-1 opacity-25'>|</span>\r\n                {/* unselected weatherUnit */}\r\n                <span\r\n                  className='cursor-pointer font-light opacity-75'\r\n                  title={weatherUnitTitle}\r\n                  onClick={() => unitClick(unselectedWeatherUnit)}>\r\n                  {unselectedWeatherUnit}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* weather info */}\r\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n            {weatherCurrent.summary}\r\n          </p>\r\n          <div className='text-sm sm:text-lg ml-8'>\r\n            <div className='flex flex-row sm:my-2'>\r\n              <p className='font-light'>Humidity:</p>&nbsp;\r\n              <p className='mx-1 font-bold'>\r\n                {Math.round(weatherCurrent.humidity)}\r\n              </p>\r\n              <p className='text-sm mt-1'>\r\n                <FiPercent />\r\n              </p>\r\n            </div>\r\n            <div className='flex items-center sm:my-2'>\r\n              <p>\r\n                <span className='font-light'>Wind:</span>&nbsp;\r\n                <span className='font-bold'>{computedSpeedValue()} </span>\r\n              </p>\r\n              <p className='text-3xl'>\r\n                {\r\n                  <WeatherIconComponent\r\n                    type={getWindDirection(weatherCurrent.windBearing)}\r\n                  />\r\n                }\r\n              </p>\r\n            </div>\r\n            <p>\r\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\r\n              <span className='font-bold'>\r\n                {computedTempValue('apparentTemperature')}\r\n              </span>\r\n              <sup>o</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n\r\nInfoDetailComponent.propTypes = {\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst CurrentWeatherContainer = ({\r\n  weatherCurrent,\r\n  address,\r\n  latlong,\r\n  urbanArea\r\n}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              urbanArea={urbanArea}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n\r\nCurrentWeatherContainer.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst DayComponent = props => {\r\n  const {day, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be 'High' or 'Low'\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(day[`temperature${type}`])\r\n      : fToC(day[`temperature${type}`])\r\n  }\r\n\r\n  // emit event to forecastContainer\r\n  const selectedDay = () => {\r\n    props.selectedDay({day})\r\n  }\r\n\r\n  // hide or show right and left sides of a border\r\n  const specialBorder = () => {\r\n    return `md:border-r${\r\n      index === 7 || index === selectedIndex - 1 ? '-0' : ''\r\n    } md:border-l${index === 0 || index === selectedIndex + 1 ? '-0' : ''}`\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`md:border-t md:border-b-0 md:border-light md:hover:border-light md:hover:bg-light md:hover:text-black items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer transition-all duration-1000 ease-in-out ${\r\n        index === selectedIndex\r\n          ? `bg-${colorTheme} text-${theme} md:border-${colorTheme}`\r\n          : ''\r\n      } ${specialBorder()}`}\r\n      onClick={selectedDay}>\r\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\r\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-light sm:font-medium'>\r\n          {FormatTime(day.time, day.timezone, 'ddd')}\r\n        </p>\r\n        {/* icon */}\r\n        <div className='flex w-1/6 sm:w-full'>\r\n          {getWeatherIcon(day).startsWith('wi') ? (\r\n            <p\r\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n              title={day.summary}>\r\n              <WeatherIconComponent type={getWeatherIcon(day)} />\r\n            </p>\r\n          ) : (\r\n            <img\r\n              src={`./weather/${getWeatherIcon(day)}.svg`}\r\n              alt='icon'\r\n              title={day.summary}\r\n              className='sm:-mt-3 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n            />\r\n          )}\r\n        </div>\r\n        {/* high & low */}\r\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n          <p className='mx-2 text-xs sm:text-sm'>\r\n            {computedTempValue('High')}\r\n            <sup>o</sup>\r\n          </p>\r\n          <p className='mx-2 text-xs'>\r\n            {computedTempValue('Low')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n        {/* sunrise & sunset */}\r\n        <div\r\n          className={`${\r\n            index === selectedIndex ? 'flex' : 'flex'\r\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\r\n              title='sunrise'>\r\n              <WeatherIconComponent type='sunrise' />\r\n            </p>\r\n            <p>{FormatTime(day.sunriseTime, day.timezone, 'h:mm')}</p>\r\n          </div>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-1'\r\n              title='sunset'>\r\n              <WeatherIconComponent type='sunset' />\r\n            </p>\r\n            <p>{FormatTime(day.sunsetTime, day.timezone, 'HH:mm')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n\r\nDayComponent.propTypes = {\r\n  day: PropTypes.object,\r\n  selectedDay: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(Timeframe[`${type}`])\r\n      : fToC(Timeframe[`${type}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\r\n      <div>\r\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\r\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\r\n          </p>\r\n        ) : (\r\n          <img\r\n            src={`./weather/${getWeatherIcon(Timeframe)}.svg`}\r\n            alt='icon'\r\n            title={Timeframe.summary}\r\n            className='w-16 h-16 object-contain'\r\n          />\r\n        )}\r\n      </div>\r\n      <p className='text-lg'>\r\n        {computedTempValue('temperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm'>\r\n        {computedTempValue('apparentTemperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>\r\n        {FormatTime(Timeframe.time, Timeframe.timezone, 'h:mm A')}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n\r\nTimeframeComponent.propTypes = {\r\n  Timeframe: PropTypes.object\r\n}\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\r\n  const [selectedDay, setSelectedDay] = useState('')\r\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0)\r\n  const {time, timezone} = weatherCurrent\r\n\r\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (!isUndefined(weatherCurrent.time)) {\r\n      const today = FormatTime(time, timezone, 'MM/DD/YYYY')\r\n      // check if today key exist in days\r\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n        setSelectedDay(weatherForecast.days[today] ? today : '')\r\n        selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\r\n      }\r\n    }\r\n  }\r\n\r\n  // find the index of selectedDay in days object\r\n  const selectedDayIndexHandler = selectedDay => {\r\n    const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\r\n    setSelectedDayIndex(index !== -1 ? index : 0)\r\n  }\r\n\r\n  /**\r\n   * day is a date '02/28/2020'\r\n   * @param {String} day\r\n   */\r\n  const daySelectHandler = day => {\r\n    setSelectedDay(day)\r\n    selectedDayIndexHandler(day)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    // eslint-disable-next-line\r\n  }, [weatherForecast])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden pb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* day */}\r\n            <div\r\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n              {Object.keys(weatherForecast.days).map((day, index) => {\r\n                // day is key in weatherForecast.days -> '02/28/2020'\r\n                // index is the position of key -> 0\r\n                return (\r\n                  <DayComponent\r\n                    day={weatherForecast.days[day]}\r\n                    key={index}\r\n                    index={index}\r\n                    selectedIndex={selectedDayIndex}\r\n                    selectedDay={() => daySelectHandler(day)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.days) ? (\r\n              <ErrorComponent\r\n                errorMessage={'No forecast data available for this city!'}\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n\r\nForecastContainer.propTypes = {\r\n  cityName: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n  weatherForecast: PropTypes.object\r\n}\r\n","import React, {useContext, Fragment} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherBackground from './../../utils/WeatherBackground'\r\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from './../forecast/ForecastContainer'\r\nimport emitGA from './../../utils/MiscTrackEvents'\r\nimport './WeatherForecastStyle.scss'\r\n\r\nconst WeatherForecastContainer = ({\r\n  weatherCurrent,\r\n  weatherForecast,\r\n  address,\r\n  latlong,\r\n  urbanArea\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const WET_TYPES = ['rain', 'snow', 'sleet', 'hail']\r\n\r\n  // return rain or snow svg image for the above wet types\r\n  const weatherSVG = () => {\r\n    if (weatherCurrent.icon === 'snow') {\r\n      return 'snow'\r\n    }\r\n    return 'rain'\r\n  }\r\n\r\n  const imageBorder = {\r\n    borderTopLeftRadius: '1rem',\r\n    borderTopRightRadius: '1rem'\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className={'flex flex-col justify-center items-center lg:px-5 pt-10'}>\r\n        <div\r\n          className={`sm:w-full lg:w-5/6 xl:max-w-6xl bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none rounded-t-2xl shadow-lg`}>\r\n          <div className='relative overflow-hidden'>\r\n            <img\r\n              src={`./weather-backgrounds/${getWeatherBackground(\r\n                weatherCurrent\r\n              )}.jpg`}\r\n              alt='clear day'\r\n              className='w-full object-cover object-center weather-background'\r\n              style={imageBorder}\r\n            />\r\n            {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\r\n            <div>\r\n              {WET_TYPES.includes(weatherCurrent.icon) && (\r\n                <img\r\n                  src={`./weather-backgrounds/${weatherSVG()}.svg`}\r\n                  alt='clear day'\r\n                  className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\r\n                  style={imageBorder}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* current weather container should be on the image on mobile and small devices */}\r\n            <div\r\n              className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n                urbanArea={urbanArea}\r\n              />\r\n            </div>\r\n\r\n            {/* current weather and forecast container should be on the image from medium devices */}\r\n            <div\r\n              className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n                urbanArea={urbanArea}\r\n              />\r\n              <ForecastContainer\r\n                cityName={address.cityName}\r\n                weatherCurrent={weatherCurrent}\r\n                weatherForecast={weatherForecast}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='block md:hidden'>\r\n            <ForecastContainer\r\n              cityName={address.cityName}\r\n              weatherCurrent={weatherCurrent}\r\n              weatherForecast={weatherForecast}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='relative'>\r\n        <p\r\n          className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n          Powered by&nbsp;\r\n          <a\r\n            href='https://darksky.net/poweredby/'\r\n            target='_blank'\r\n            rel='noreferrer noopener'\r\n            className={`link z-0 font-medium hover:text-${theme}`}\r\n            onClick={() => emitGA('powered-by', 'Dark Sky')}>\r\n            Dark Sky\r\n          </a>\r\n        </p>\r\n        <div className={`bg-${theme}`}>\r\n          {urbanArea.slug ? (\r\n            <div className={`mx-auto text-center pb-5`}>\r\n              <p>\r\n                <a\r\n                  href={`https://teleport.org/cities/${urbanArea.slug}`}\r\n                  target='_blank'\r\n                  rel='noreferrer noopener'\r\n                  className='hover:no-underline'\r\n                  onClick={() => emitGA('explore-life', urbanArea.name)}>\r\n                  <button\r\n                    className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}>\r\n                    Explore life in {urbanArea.name}\r\n                  </button>\r\n                </a>\r\n              </p>\r\n              <p className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                Powered by&nbsp;\r\n                <a\r\n                  href='https://teleport.org/'\r\n                  target='_blank'\r\n                  rel='noreferrer noopener'\r\n                  className={`link z-0 font-medium hover:text-${theme}`}\r\n                  onClick={() => emitGA('powered-by', 'Teleport')}>\r\n                  Teleport\r\n                </a>\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherForecastContainer\r\n"],"sourceRoot":""}