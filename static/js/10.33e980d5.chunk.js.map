{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","alerts","setAlerts","isLoading","setIsLoading","isError","setIsError","validCityName","isValid","address","cityName","includes","setWeatherData","current","forecast","fetchWeatherData","a","FetchWeatherData","Sentry","useEffect","timer","setInterval","clearInterval","loaderText","className","errorMessage","latlong"],"mappings":"+OA2HeA,UAlHU,WACvB,IAAMC,EAAiBC,qBAAWC,KADL,EAEiBC,mBAAS,IAF1B,mBAEtBC,EAFsB,KAELC,EAFK,OAGeF,mBAAS,IAHxB,mBAGtBG,EAHsB,KAGNC,EAHM,OAIDJ,mBAAS,IAJR,mBAItBK,EAJsB,KAIdC,EAJc,OAKKN,oBAAS,GALd,mBAKtBO,EALsB,KAKXC,EALW,OAMCR,oBAAS,GANV,mBAMtBS,EANsB,KAMbC,EANa,KAcvBC,EAAgB,WACpB,GAAIC,YAAQf,EAAegB,SAAU,CACnC,IAAMC,EAAWjB,EAAegB,QAAQC,SACxC,OACEF,YAAQE,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAGvB,OAAO,GAGHC,EAAiB,SAACC,EAASC,EAAUb,GACrCO,YAAQK,IAAYL,YAAQM,KAC9Bd,EAAkBa,GAClBf,EAAmBgB,GACnBZ,EAAUD,KAIRc,EAAgB,uCAAG,kCAAAC,EAAA,+EAEmCC,YACtDxB,GAHmB,gBAEdM,EAFc,EAEdA,eAAgBF,EAFF,EAEEA,gBAAiBI,EAFnB,EAEmBA,OAKxCW,EAAeb,EAAgBF,EAAiBI,GAEhDK,GAAW,GATU,kDAWrBA,GAAW,GACXY,IAAA,MAZqB,yBAcrBd,GAAa,GAdQ,6EAAH,qDAgCtB,OAdAe,qBAAU,WACRf,GAAa,GACbW,IAEA,IAAMK,EAAQC,aAAY,WACxBN,MACC,MAEH,OAAO,WACLO,cAAcF,MAGf,CAAC3B,EAAegB,UAGjB,kBAAC,WAAD,KACGN,EACC,kBAAC,IAAD,CACEoB,WAAU,oCACRhB,IAAa,cAAYd,EAAegB,QAAQC,UAAa,GADrD,mBAKZ,kBAAC,WAAD,KACGL,EACC,6BACGE,IAIC,yBAAKiB,UAAU,uBACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEC,aAAY,iEACVlB,IAAa,cACFd,EAAegB,QAAQC,UAC9B,GAHM,sBAQhB,MAGN,kBAAC,WAAD,KAtFDF,YAAQT,GAwFH,kBAAC,IAAD,CACEA,eAAgBA,EAChBF,gBAAiBA,EACjBI,OAAQA,EACRQ,QAAShB,EAAegB,QACxBiB,QAASjC,EAAeiC,UAExB","file":"static/js/10.33e980d5.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport isValid from '../../utils/ValidityChecker'\r\n\r\nconst WeatherContainer = () => {\r\n  const addressContext = useContext(AddressContext)\r\n  const [weatherForecast, setWeatherForecast] = useState({})\r\n  const [weatherCurrent, setWeatherCurrent] = useState({})\r\n  const [alerts, setAlerts] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isError, setIsError] = useState(false)\r\n\r\n  // check whether to show/hide weatherForecastContainer based on weatherCurrent\r\n  const showWeatherForecast = () => {\r\n    return isValid(weatherCurrent)\r\n  }\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (isValid(addressContext.address)) {\r\n      const cityName = addressContext.address.cityName\r\n      return (\r\n        isValid(cityName) &&\r\n        !cityName.includes('undefined') &&\r\n        !cityName.includes('null')\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const setWeatherData = (current, forecast, alerts) => {\r\n    if (isValid(current) && isValid(forecast)) {\r\n      setWeatherCurrent(current)\r\n      setWeatherForecast(forecast)\r\n      setAlerts(alerts)\r\n    }\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    try {\r\n      const {weatherCurrent, weatherForecast, alerts} = await FetchWeatherData(\r\n        addressContext\r\n      )\r\n      // set the weatherCurrent and weatherForecast only when the data is non-empty\r\n      // this way, the old fetched data can be preserved when api call fail or limit exceed\r\n      setWeatherData(weatherCurrent, weatherForecast, alerts)\r\n      // set the error to false state with the above successful weather data fetch\r\n      setIsError(false)\r\n    } catch (err) {\r\n      setIsError(true)\r\n      Sentry.captureException(err)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    fetchWeatherData()\r\n    // fetch weather data every 60 minutes\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [addressContext.address])\r\n\r\n  return (\r\n    <Fragment>\r\n      {isLoading ? (\r\n        <LoaderComponent\r\n          loaderText={`Fetching weather forecast ${\r\n            validCityName() ? `for ${addressContext.address.cityName}` : ''\r\n          } ðŸ˜Ž`}\r\n        />\r\n      ) : (\r\n        <Fragment>\r\n          {isError ? (\r\n            <div>\r\n              {validCityName() ? (\r\n                // show error component only when addressContext cityName is valid\r\n                // since by default on component load, addressContext address is empty\r\n                // this extra check will hide error and show only when api call fetch fail for fetching weatherData\r\n                <div className='flex justify-center'>\r\n                  <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                    <ErrorComponent\r\n                      errorMessage={`Something went wrong. Failed to fetch weather forecast ${\r\n                        validCityName()\r\n                          ? `for ${addressContext.address.cityName}`\r\n                          : ''\r\n                      }! ðŸ˜¢`}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          ) : (\r\n            <Fragment>\r\n              {showWeatherForecast() ? (\r\n                <WeatherForecastContainer\r\n                  weatherCurrent={weatherCurrent}\r\n                  weatherForecast={weatherForecast}\r\n                  alerts={alerts}\r\n                  address={addressContext.address}\r\n                  latlong={addressContext.latlong}\r\n                />\r\n              ) : null}\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherContainer\r\n"],"sourceRoot":""}