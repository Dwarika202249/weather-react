{"version":3,"sources":["components/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js"],"names":["imageOverlay","background","borderTopLeftRadius","borderTopRightRadius","FavoriteComponent","urbanArea","favorite","favoriteSelected","useContext","ThemeContext","theme","colorTheme","className","imageExist","src","getImageDetails","image","web","alt","style","onClick","address","cityName","split","FavoritesContainer","favorites","AddressContext","useState","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","slideIndex","setSlideIndex","weatherRef","useRef","selectFavoriteHandler","index","fetchWeatherData","a","async","isUndefined","Object","keys","length","FetchWeatherData","data","isEmpty","state","scrollHandler","ref","window","scrollTo","current","offsetTop","useEffect","timer","setInterval","clearInterval","CarouselSettings","afterSlide","map","key","latlong","weatherCurrent","CurrentWeatherContainer","ForecastContainer","weatherForecast","href","target","rel","slug","name"],"mappings":"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","file":"static/js/5.9a91a491.chunk.js","sourcesContent":["import React, {useContext, Fragment} from 'react'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\n// get image details\r\nconst getImage = urbanArea => {\r\n  const {image} = getImageDetails(urbanArea)\r\n  return image\r\n}\r\nconst imageOverlay = {\r\n  background: 'rgba(0,0,0,0.55)',\r\n  borderTopLeftRadius: '1rem',\r\n  borderTopRightRadius: '1rem'\r\n}\r\n\r\nconst FavoriteComponent = ({favorite, favoriteSelected}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='relative w-full h-16'>\r\n      {imageExist(favorite.urbanArea) ? (\r\n        <Fragment>\r\n          <img\r\n            src={getImage(favorite.urbanArea).web}\r\n            alt='city'\r\n            className='h-full w-full object-cover object-center rounded-2xl'\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n      <div\r\n        className={`${\r\n          imageExist(favorite.urbanArea)\r\n            ? 'absolute top-0 left-0 right-0 bottom-0 text-light'\r\n            : `h-16 text-${colorTheme} border border-${colorTheme} bg-${theme} text-${colorTheme} hover:bg-${colorTheme} hover:text-${theme}`\r\n        } pt-4 lg:pt-1/2 font-medium rounded-2xl shadow-lg cursor-pointer text-center justify-center tracking-wide`}\r\n        style={imageExist(favorite.urbanArea) ? imageOverlay : null}\r\n        onClick={favoriteSelected}>\r\n        {favorite.address.cityName.split(', ')[0]}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FavoriteComponent\r\n\r\nFavoriteComponent.propTypes = {\r\n  favorite: PropTypes.object,\r\n  favoriteSelected: PropTypes.func\r\n}\r\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport FetchWeatherData from './../../utils/FetchWeatherData'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FavoriteComponent from '../../components/favorite/FavoriteComponent'\r\n\r\nconst FavoritesContainer = () => {\r\n  const {favorites} = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const [selectedFavorite, setSelectedFavorite] = useState({})\r\n  const [favoriteWeather, setFavoriteWeather] = useState({})\r\n  const [slideIndex, setSlideIndex] = useState(0)\r\n  const weatherRef = useRef(null)\r\n\r\n  // scroll to weather component when selectedFavorite is set\r\n  const scrollToRef = ref => window.scrollTo(0, ref.current.offsetTop)\r\n\r\n  const selectFavoriteHandler = index => {\r\n    if (favorites[index]) {\r\n      setSelectedFavorite({...favorites[index]})\r\n    }\r\n    setSlideIndex(index)\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (\r\n      !isUndefined(selectedFavorite) &&\r\n      Object.keys(selectedFavorite).length\r\n    ) {\r\n      const data = await FetchWeatherData(selectedFavorite)\r\n      // set favoriteWeather only when the data is non-empty\r\n      if (!isEmpty(data) && !isUndefined(data)) {\r\n        setFavoriteWeather(state => ({...state, ...data}))\r\n        scrollHandler()\r\n      }\r\n    }\r\n  }\r\n\r\n  const scrollHandler = () => {\r\n    scrollToRef(weatherRef)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedFavorite])\r\n\r\n  return (\r\n    <Fragment>\r\n      {favorites.length > 0 ? (\r\n        <div className={`bg-${theme} pt-10 pb-24 mb-0`}>\r\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\r\n            Favorites\r\n          </p>\r\n          {/* mobile */}\r\n          <div className='sm:hidden px-5 py-5'>\r\n            <Carousel\r\n              {...CarouselSettings('favorite')}\r\n              slideIndex={slideIndex}\r\n              afterSlide={slideIndex => selectFavoriteHandler(slideIndex)}>\r\n              {favorites.map((favorite, index) => {\r\n                return (\r\n                  <FavoriteComponent\r\n                    key={favorite.latlong}\r\n                    favorite={favorite}\r\n                    favoriteSelected={() => selectFavoriteHandler(index)}\r\n                  />\r\n                )\r\n              })}\r\n            </Carousel>\r\n          </div>\r\n          {/* tablet and above devices */}\r\n          <div className='hidden sm:flex justify-center items-center'>\r\n            <div className='sm:w-5/6 xl:w-3/4 px-5 py-5'>\r\n              <div className='flex sm:flex-row flex-wrap justify-center'>\r\n                {favorites.map((favorite, index) => {\r\n                  return (\r\n                    <div\r\n                      className='m-2 sm:w-1/2 md:w-1/4'\r\n                      key={favorite.latlong}>\r\n                      <FavoriteComponent\r\n                        key={favorite.latlong}\r\n                        favorite={favorite}\r\n                        favoriteSelected={() => selectFavoriteHandler(index)}\r\n                      />\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* \r\n            TODO: utilize weather container here instead of code repeat\r\n          */}\r\n          <div ref={weatherRef}>\r\n            {!isEmpty(favoriteWeather.weatherCurrent) &&\r\n            !isUndefined(favoriteWeather.weatherCurrent) ? (\r\n              <Fragment>\r\n                <div className='flex justify-center px-5 pt-10'>\r\n                  <div\r\n                    className={`sm:w-full lg:w-5/6 xl:w-2/3 border border-${colorTheme} bg-{theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n                    <CurrentWeatherContainer\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      address={selectedFavorite.address}\r\n                      latlong={selectedFavorite.latlong}\r\n                      urbanArea={selectedFavorite.urbanArea}\r\n                    />\r\n                    <ForecastContainer\r\n                      cityName={selectedFavorite.address.cityName}\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      weatherForecast={favoriteWeather.weatherForecast}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://darksky.net/poweredby/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`special-link z-0 font-medium hover:text-${theme}`}>\r\n                    Dark Sky\r\n                  </a>\r\n                </p>\r\n                <div className={`bg-${theme}`}>\r\n                  {selectedFavorite.urbanArea.slug ? (\r\n                    <div className='mx-auto text-center pb-5'>\r\n                      <p>\r\n                        <a\r\n                          href={`https://teleport.org/cities/${selectedFavorite.urbanArea.slug}`}\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className='hover:no-underline'>\r\n                          <button\r\n                            className={`bg-${colorTheme} text-${theme} font-bold py-3 px-6 rounded-full capitalize`}>\r\n                            Explore life in {selectedFavorite.urbanArea.name}\r\n                          </button>\r\n                        </a>\r\n                      </p>\r\n                      <p\r\n                        className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                        Powered by&nbsp;\r\n                        <a\r\n                          href='https://teleport.org/'\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className={`special-link z-0 font-medium hover:text-${theme}`}>\r\n                          Teleport\r\n                        </a>\r\n                      </p>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </Fragment>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default FavoritesContainer\r\n"],"sourceRoot":""}