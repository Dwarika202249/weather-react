{"version":3,"sources":["utils/WeatherIcon.js","utils/CarouselSettings.js","utils/ImageDetails.js","utils/FetchWeatherData.js","utils/FormattedDateTime.js","utils/FormatTime.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","utils/GroupedDayIcons.js","containers/forecast/ForecastContainer.js","components/weather/InfoComponent.js","utils/WindDirection.js","components/weather/InfoDetailComponent.js","containers/current-weather/CurrentWeatherContainer.js","containers/weather/WeatherContainer.js"],"names":["getWeatherIcon","code","weatherCode","split","hour","dayjs","format","type","CarouselSettings","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","edgeEasing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","imageExist","urbanArea","isUndefined","isEmpty","photos","length","getImageDetails","image","mobile","web","attribution","photographer","site","source","getURL","latlong","process","FetchWeatherData","a","async","weatherCurrent","weatherForecast","forecastURL","axios","get","then","response","data","forecastData","currentURL","currentData","console","log","FormattedDateTime","lat","long","formattedDateTime","URL","formatted","message","FormatTime","t","includes","DayComponent","props","day","icon","iconDesc","index","selectedIndex","weatherUnit","useContext","WeatherUnitContext","ThemeContext","theme","colorTheme","computedTempValue","Math","round","toLowerCase","className","onClick","selectedDay","date","reverse","join","title","sunrise_time","sunset_time","TimeframeComponent","Timeframe","wx_desc","wx_icon","time","GroupedDayIcons","Days","map","groupBy","Timeframes","dayIcon","mapValues","key","Object","keys","sort","b","ForecastContainer","cityName","useState","errorMessage","setErrorMessage","selectedDayIndex","setSelectedDayIndex","dayIcons","setDayIcons","daySelectHandler","useEffect","today","todayIndex","findIndex","updateSelectedDay","icons","iconsDesc","updateDayIcons","ErrorBoundaryContainer","ErrorComponent","showCloseBtn","LoaderComponent","loaderText","slideIndex","afterSlide","InfoComponent","address","updateFavorites","AddressContext","setDate","setTime","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","isValidFormattedDateTime","datetimeSetter","dateObj","current","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","src","alt","style","background","borderTopLeftRadius","borderTopRightRadius","favorites","sortedFavorites","sortBy","duplicates","removeIndex","newFavorites","splice","setItem","stringify","fontSize","href","target","rel","getWindDirection","deg","InfoDetailComponent","updateWeatherUnit","unitClick","unit","humid_pct","windspd_mph","windspd_kmh","winddir_deg","CurrentWeatherContainer","WeatherContainer","addressContext","setWeatherForecast","setWeatherCurrent","setFormattedDateTime","isLoading","setIsLoading","previousLatLong","fetchWeatherData","formattedString","timer","slug","name"],"mappings":"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","file":"static/js/5.e1fa2e3d.chunk.js","sourcesContent":["import dayjs from 'dayjs'\r\n\r\nconst getWeatherIcon = code => {\r\n  if (code) {\r\n    const weatherCode = code.split('.')[0]\r\n    const hour = dayjs().format('H')\r\n    const type = hour >= 6 && hour < 18 ? 'day' : 'night-alt'\r\n    switch (weatherCode) {\r\n      case 'Blizzard':\r\n        return 'snow-wind'\r\n      case 'Clear':\r\n        return 'night-clear'\r\n      case 'CloudRainThunder':\r\n        return `${type}-storm-showers`\r\n      case 'CloudSleetSnowThunder':\r\n        return `${type}-snow-thunderstorm`\r\n      case 'Cloudy':\r\n        return 'cloudy'\r\n      case 'Fog':\r\n        return type === 'day' ? 'day-fog' : 'night-fog'\r\n      case 'FreezingDrizzle':\r\n        return `${type}-sleet`\r\n      case 'FreezingFog':\r\n        return `${type}-cloudy-windy`\r\n      case 'FreezingRain':\r\n        return `${type}-rain-mix`\r\n      case 'HeavyRain':\r\n        return `${type}-rain`\r\n      case 'HeavyRainSwrsDay':\r\n        return 'day-rain'\r\n      case 'HeavyRainSwrsNight':\r\n        return 'night-alt-rain'\r\n      case 'HeavySleet':\r\n        return 'snow-wind'\r\n      case 'HeavySleetSwrsDay':\r\n        return 'day-snow-wind'\r\n      case 'HeavySleetSwrsNight':\r\n        return 'night-alt-snow-wind'\r\n      case 'HeavySnow':\r\n        return 'snow'\r\n      case 'HeavySnowSwrsDay':\r\n        return 'day-snow-thunderstorm'\r\n      case 'HeavySnowSwrsNight':\r\n        return 'night-alt-snow-thunderstorm'\r\n      case 'IsoRainSwrsDay':\r\n        return 'day-showers'\r\n      case 'IsoRainSwrsNight':\r\n        return 'night-alt-showers'\r\n      case 'IsoSleetSwrsDay':\r\n        return 'day-sleet'\r\n      case 'IsoSleetSwrsNight':\r\n        return 'night-alt-sleet'\r\n      case 'IsoSnowSwrsDay':\r\n        return 'day-snow'\r\n      case 'IsoSnowSwrsNight':\r\n        return 'night-alt-snow'\r\n      case 'Mist':\r\n        return `${type}-rain-mix`\r\n      case 'ModRain':\r\n        return 'sprinkle'\r\n      case 'ModRainSwrsDay':\r\n        return 'day-sprinkle'\r\n      case 'ModRainSwrsNight':\r\n        return 'night-alt-sprinkle'\r\n      case 'ModSleet':\r\n        return 'sleet'\r\n      case 'ModSleetSwrsDay':\r\n        return 'day-sleet'\r\n      case 'ModSleetSwrsNight':\r\n        return 'night-alt-sleet'\r\n      case 'ModSnow':\r\n        return 'snow'\r\n      case 'ModSnowSwrsDay':\r\n        return 'day-snow'\r\n      case 'ModSnowSwrsNight':\r\n        return 'night-alt-snow'\r\n      case 'OccLightRain':\r\n        return `${type}-showers`\r\n      case 'OccLightSleet':\r\n        return `${type}-sleet`\r\n      case 'OccLightSnow':\r\n        return `${type}-snow`\r\n      case 'Overcast':\r\n        return type === 'day' ? 'day-sunny-overcast' : 'night-alt-cloudy'\r\n      case 'PartCloudRainThunderDay':\r\n        return 'day-thunderstorm'\r\n      case 'PartCloudRainThunderNight':\r\n        return 'night-alt-thunderstorm'\r\n      case 'PartCloudSleetSnowThunderDay':\r\n        return 'day-snow-thunderstorm'\r\n      case 'PartCloudSleetSnowThunderNight':\r\n        return 'night-alt-snow-thunderstorm'\r\n      case 'PartlyCloudyDay':\r\n        return 'day-cloudy'\r\n      case 'PartlyCloudyNight':\r\n        return 'night-alt-cloudy'\r\n      case 'Sunny':\r\n        return 'day-sunny'\r\n      default:\r\n        return 'na'\r\n    }\r\n  }\r\n  return 'na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","// modify carousel settings for timeframe, day, and favorites components\r\n/**\r\n * @param {String} type\r\n * time or day or favorite\r\n */\r\nconst CarouselSettings = type => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? 3 : 1,\r\n  slidesToScroll: type === 'time' ? 3 : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? 0.95 : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeCircleOut',\r\n  edgeEasing: 'easeCircleOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#A1A6B4',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px'\r\n    }\r\n  }\r\n})\r\n\r\nexport default CarouselSettings\r\n","import {isUndefined, isEmpty} from 'lodash-es'\r\n\r\n// check if there any image exist for an urban area\r\nconst imageExist = urbanArea => {\r\n  return isUndefined(urbanArea) && isEmpty(urbanArea)\r\n    ? false\r\n    : urbanArea.photos.length > 0\r\n}\r\n\r\nconst getImageDetails = urbanArea => {\r\n  const {image} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0]\r\n    : {mobile: '', web: ''}\r\n  const {photographer, site, source} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0].attribution\r\n    : {\r\n        photographer: '',\r\n        site: '',\r\n        source: ''\r\n      }\r\n\r\n  return {\r\n    image,\r\n    photographer,\r\n    site,\r\n    source\r\n  }\r\n}\r\n\r\nexport {imageExist, getImageDetails}\r\n","import axios from 'axios'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\n\r\nconst APP_ID = process.env.REACT_APP_WEATHER_UNLOCKED_APP_ID\r\nconst APP_KEY = process.env.REACT_APP_WEATHER_UNLOCKED_APP_KEY\r\n/**\r\n * @param {String} type (forecast | current)\r\n * @param {String} latlong\r\n */\r\nconst getURL = (type, latlong) => {\r\n  return `http://api.weatherunlocked.com/api/${type}/${latlong}?app_id=${APP_ID}&app_key=${APP_KEY}`\r\n}\r\n\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong)) {\r\n    try {\r\n      const forecastURL = getURL('forecast', latlong)\r\n      const forecastData = await axios\r\n        .get(forecastURL)\r\n        .then(response => response.data)\r\n      const currentURL = getURL('current', latlong)\r\n      const currentData = await axios\r\n        .get(currentURL)\r\n        .then(response => response.data)\r\n      weatherForecast = {...forecastData}\r\n      weatherCurrent = {...currentData}\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","import axios from 'axios'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\n\r\nconst APP_KEY = process.env.REACT_APP_TIMEZONE_DB_API_KEY\r\n\r\n/**\r\n * @param {String} latlong\r\n */\r\nconst FormattedDateTime = async latlong => {\r\n  const [lat, long] = latlong.split(',')\r\n  let formattedDateTime = ''\r\n\r\n  // fetch formattedDateTime only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong)) {\r\n    try {\r\n      const URL = `http://api.timezonedb.com/v2.1/get-time-zone?key=${APP_KEY}&format=json&by=position&lat=${lat}&lng=${long}`\r\n      const {data} = await axios.get(URL)\r\n      if (!isUndefined(data) && !isEmpty(data)) {\r\n        formattedDateTime = data.formatted\r\n      }\r\n    } catch (error) {\r\n      formattedDateTime = `${error.message} forecast data. Please try again!`\r\n    }\r\n  }\r\n\r\n  return formattedDateTime\r\n}\r\n\r\nexport default FormattedDateTime\r\n","/**\r\n * @param {String} t\r\n */\r\nconst FormatTime = t => {\r\n  // check if the 't' is sunrise/set time or timeframe time\r\n  // 06:00 or 600 exception being 0 & 1000\r\n  if (t === '0') return '0:00'\r\n  else if (t === '1000') return '10:00'\r\n  return t.includes(':') ? t : `${t.split('0')[0]}:00`\r\n}\r\n\r\nexport default FormatTime\r\n","import React, {useContext} from 'react'\r\nimport dayjs from 'dayjs'\r\nimport FormatTime from '../../utils/FormatTime'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\n\r\nconst DayComponent = props => {\r\n  const {day, icon, iconDesc, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const computedTempValue = type => {\r\n    return Math.round(day[`temp_${type}_${weatherUnit.toLowerCase()}`])\r\n  }\r\n\r\n  const selectedDay = () => {\r\n    props.selectedDay({day, index})\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`sm:border-t sm:border-r sm:border-b-0 sm:border-l-0 sm:border-${colorTheme} sm:hover:bg-${colorTheme} sm:hover:text-${theme} items-center text-center flex-1 py-1 pb-3 cursor-pointer ${\r\n        index === selectedIndex ? `sm:bg-${colorTheme} sm:text-${theme}` : ''\r\n      } transition-colors duration-1000 ease-in-out`}\r\n      onClick={selectedDay}>\r\n      <p className='font-medium'>\r\n        {dayjs(\r\n          day.date\r\n            .split('/')\r\n            .reverse()\r\n            .join(', ')\r\n        ).format('ddd')}\r\n      </p>\r\n      <i\r\n        title={iconDesc}\r\n        className={`mx-auto text-xl wi wi-${getWeatherIcon(icon)}`}></i>\r\n      <div className='flex flex-row justify-center items-center font-light'>\r\n        <p className='mx-2 text-sm'>\r\n          {computedTempValue('max')}\r\n          <sup>o</sup>\r\n        </p>\r\n        <p className='mx-2 text-xs'>\r\n          {computedTempValue('min')}\r\n          <sup>o</sup>\r\n        </p>\r\n      </div>\r\n      <div className='flex flex-row justify-center sm:flex-col font-light mt-1'>\r\n        <div className='flex flex-row justify-center items-center mx-2'>\r\n          <i className='text-sm wi wi-sunrise text-sun' title='sunrise'></i>\r\n          <p className='text-sm ml-2'>{FormatTime(`${day.sunrise_time}`)}</p>\r\n        </div>\r\n        <div className='flex flex-row justify-center items-center mx-2'>\r\n          <i className='text-sm wi wi-sunset text-sun' title='sunset'></i>\r\n          <p className='text-sm ml-2'>{FormatTime(`${day.sunset_time}`)}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n","import React, {useContext} from 'react'\r\nimport FormatTime from '../../utils/FormatTime'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme} = useContext(ThemeContext)\r\n\r\n  const computedTempValue = type => {\r\n    return Math.round(Timeframe[`${type}_${weatherUnit.toLowerCase()}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${\r\n        theme === 'light' ? 'dark' : 'light'\r\n      }`}>\r\n      <i\r\n        title={Timeframe.wx_desc}\r\n        className={`wi wi-${getWeatherIcon(Timeframe.wx_icon)} text-xl`}></i>\r\n      <p className='text-xl'>\r\n        {computedTempValue('temp')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm italic'>\r\n        {computedTempValue('feelslike')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>{FormatTime(`${Timeframe.time}`)}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n","import {isEmpty, groupBy, mapValues} from 'lodash-es'\r\n\r\n/**\r\n * @param {Array} data (WeatherForecast)\r\n * @param {String} type (wx_icon | wx_desc)\r\n */\r\nconst GroupedDayIcons = (data, type) => {\r\n  if (isEmpty(data)) {\r\n    return []\r\n  }\r\n  const groupedDaysByIcon = data.Days.map(day => {\r\n    return groupBy(day.Timeframes, type)\r\n  })\r\n\r\n  const groupedDaysIconByCount = groupedDaysByIcon.map(dayIcon => {\r\n    return mapValues(dayIcon, function(key) {\r\n      return key.length\r\n    })\r\n  })\r\n\r\n  const groupedDayIcons = groupedDaysIconByCount.map(icon => {\r\n    return Object.keys(icon).sort((a, b) => icon[b] - icon[a])[0]\r\n  })\r\n\r\n  return groupedDayIcons\r\n}\r\n\r\nexport default GroupedDayIcons\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport dayjs from 'dayjs'\r\nimport {findIndex, isEmpty} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport GroupedDayIcons from '../../utils/GroupedDayIcons'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\n\r\nconst ForecastContainer = ({cityName, weatherForecast, formattedDateTime}) => {\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n  const [selectedDayIndex, setSelectedDayIndex] = useState(-1)\r\n  const [dayIcons, setDayIcons] = useState({})\r\n\r\n  // set the selectedDayIndex to the current day by fetching current city date and time from FormattedDateTime\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (formattedDateTime && !formattedDateTime.includes('Failed')) {\r\n      const today = dayjs(formattedDateTime).format('DD/MM/YYYY')\r\n      const todayIndex = findIndex(weatherForecast.Days, ['date', today])\r\n      setSelectedDayIndex(todayIndex < 0 ? 0 : todayIndex)\r\n    } else {\r\n      setErrorMessage(formattedDateTime)\r\n    }\r\n  }\r\n\r\n  const daySelectHandler = index => {\r\n    setSelectedDayIndex(index)\r\n  }\r\n\r\n  // find weather icon and desc for every day in weatherForecast Days based on the most common weather_icon of the timeframes\r\n  const updateDayIcons = () => {\r\n    const icons = GroupedDayIcons(weatherForecast, 'wx_icon')\r\n    const iconsDesc = GroupedDayIcons(weatherForecast, 'wx_desc')\r\n    setDayIcons({icons: [...icons], iconDesc: [...iconsDesc]})\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    updateDayIcons()\r\n    // eslint-disable-next-line\r\n  }, [formattedDateTime])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.Days) && selectedDayIndex !== -1 ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden py-3'>\r\n              <Carousel {...CarouselSettings('time')}>\r\n                {weatherForecast.Days[selectedDayIndex]\r\n                  ? weatherForecast.Days[selectedDayIndex].Timeframes.map(\r\n                      (Timeframe, index) => {\r\n                        return (\r\n                          <TimeframeComponent\r\n                            Timeframe={Timeframe}\r\n                            key={index}\r\n                          />\r\n                        )\r\n                      }\r\n                    )\r\n                  : null}\r\n              </Carousel>\r\n            </div>\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex py-3'>\r\n              {weatherForecast.Days[selectedDayIndex]\r\n                ? weatherForecast.Days[selectedDayIndex].Timeframes.map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )\r\n                : null}\r\n            </div>\r\n\r\n            {/* mobile */}\r\n            <div className='sm:hidden py-3'>\r\n              <Carousel\r\n                {...CarouselSettings('day')}\r\n                slideIndex={selectedDayIndex}\r\n                afterSlide={slideIndex => daySelectHandler(slideIndex)}>\r\n                {weatherForecast.Days\r\n                  ? weatherForecast.Days.map((day, index) => {\r\n                      return (\r\n                        <DayComponent\r\n                          day={day}\r\n                          key={index}\r\n                          index={index}\r\n                          icon={dayIcons.icons[index]}\r\n                          iconDesc={dayIcons.iconDesc[index]}\r\n                          selectedIndex={selectedDayIndex}\r\n                          selectedDay={() => daySelectHandler(index)}\r\n                        />\r\n                      )\r\n                    })\r\n                  : null}\r\n              </Carousel>\r\n            </div>\r\n            {/* table and above devices */}\r\n            <div className={`hidden sm:flex w-full rounded sm:visible`}>\r\n              {weatherForecast.Days\r\n                ? weatherForecast.Days.map((day, index) => {\r\n                    return (\r\n                      <DayComponent\r\n                        day={day}\r\n                        key={index}\r\n                        index={index}\r\n                        icon={dayIcons.icons[index]}\r\n                        iconDesc={dayIcons.iconDesc[index]}\r\n                        selectedIndex={selectedDayIndex}\r\n                        selectedDay={() => daySelectHandler(index)}\r\n                      />\r\n                    )\r\n                  })\r\n                : null}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.Days) || errorMessage ? (\r\n              <ErrorComponent\r\n                errorMessage={\r\n                  isEmpty(weatherForecast.Days)\r\n                    ? 'No forecast data available for this city!'\r\n                    : errorMessage\r\n                }\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport dayjs from 'dayjs'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {sortBy} from 'lodash-es'\r\n\r\nconst InfoComponent = ({address, latlong, urbanArea, formattedDateTime}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  // get image details\r\n  const {image, photographer, site, source} = getImageDetails(urbanArea)\r\n\r\n  const imageOverlay = {\r\n    background: 'rgba(0,0,0,0.55)',\r\n    borderTopLeftRadius: '1rem',\r\n    borderTopRightRadius: '1rem'\r\n  }\r\n\r\n  // store ref to formattedDateTime and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem(\r\n        'favorites',\r\n        JSON.stringify([{address, latlong, urbanArea}])\r\n      )\r\n      updateFavorites({\r\n        favorites: [{address, latlong, urbanArea}]\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      // sort favorites by cityName\r\n      const sortedFavorites = sortBy(\r\n        [...favorites, {address, latlong, urbanArea}],\r\n        ['address.cityName']\r\n      )\r\n      const duplicates = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        localStorage.setItem('favorites', JSON.stringify(sortedFavorites))\r\n        updateFavorites({\r\n          favorites: sortedFavorites\r\n        })\r\n      } else {\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          favorite =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          // sort the new favorites array by cityName\r\n          const newFavorites = sortBy([...favorites], ['address.cityName'])\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          updateFavorites({\r\n            favorites: newFavorites\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // check if formattedDateTime is not an empty string & an error message starting with Failed\r\n  const isValidFormattedDateTime =\r\n    formattedDateTime && !formattedDateTime.includes('Failed')\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = dateObj => {\r\n    setDate(dateObj ? dateObj.format('MMMM DD, YYYY') : '')\r\n    setTime(dateObj ? dateObj.format('dddd h:mm A') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever formattedDateTime change\r\n    datetimeSetter('')\r\n    // set date & time when formattedDateTime is valid\r\n    if (isValidFormattedDateTime) {\r\n      datetimeSetter(dayjs(formattedDateTime))\r\n    }\r\n    const dateTimer = setInterval(() => {\r\n      if (isValidFormattedDateTime) {\r\n        // update date and time every second only when there is a valid formattedDateTime\r\n        const formattedDateTimeObj = dayjs(formattedDateTimeRef.current).add(\r\n          1,\r\n          'second'\r\n        )\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [formattedDateTime])\r\n\r\n  return (\r\n    <div className='relative'>\r\n      <div>\r\n        {imageExist(urbanArea) ? (\r\n          <Fragment>\r\n            <img\r\n              src={image.mobile}\r\n              alt='city'\r\n              className='block sm:hidden h-40 w-full object-cover object-center rounded-t-2xl'\r\n            />\r\n            <img\r\n              src={image.web}\r\n              alt='city'\r\n              className='hidden sm:block sm:h-32 md:h-24 xl:h-32 w-full object-cover object-center rounded-t-2xl'\r\n            />\r\n          </Fragment>\r\n        ) : null}\r\n      </div>\r\n      <div\r\n        className={`${\r\n          imageExist(urbanArea)\r\n            ? 'absolute top-0 left-0 right-0 bottom-0 text-light'\r\n            : `text-${colorTheme}`\r\n        }`}\r\n        style={imageExist(urbanArea) ? imageOverlay : null}>\r\n        <div className='flex justify-between items-start'>\r\n          <div className='pt-4 px-4'>\r\n            <p\r\n              className={`font-bold ${\r\n                imageExist(urbanArea) ? 'text-2xl' : ''\r\n              }`}>\r\n              {address.cityName}\r\n            </p>\r\n            <div\r\n              className={`sm:flex-col md:flex md:flex-row ${\r\n                imageExist(urbanArea) ? 'font-medium' : 'font-light'\r\n              }`}>\r\n              {date && time ? (\r\n                <Fragment>\r\n                  <p>\r\n                    {date}\r\n                    <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n                  </p>\r\n                  <p>{time}</p>\r\n                </Fragment>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className='mt-4 mr-4 cursor-pointer'\r\n            title={\r\n              isBookmarked()\r\n                ? 'Remove this city from favorites'\r\n                : 'Favorite this city'\r\n            }\r\n            onClick={favoritesHandler}>\r\n            {isBookmarked() ? <span>&#9733;</span> : <span>&#9734;</span>}\r\n          </div>\r\n        </div>\r\n        <div className='hidden md:block text-right bottom-0 right-0 xl:mt-8 px-2'>\r\n          {photographer && site ? (\r\n            <p\r\n              className='font-light tracking-wider'\r\n              style={{fontSize: '0.5rem'}}>\r\n              Photo by&nbsp;\r\n              <span className='italic font-normal'>{photographer}</span>\r\n              &nbsp;on&nbsp;\r\n              <a\r\n                className='italic font-normal hover:no-underline hover:font-medium hover:text-light'\r\n                href={source}\r\n                target='_blank'\r\n                rel='noreferrer noopener'>\r\n                {site}\r\n              </a>\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n","const getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n\r\n  const unitClick = unit => {\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temp` or `feels_like`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return Math.round(weatherCurrent[`${type}_${weatherUnit.toLowerCase()}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.windspd_mph)} mph`\r\n      : `${Math.round(weatherCurrent.windspd_kmh)} kmph`\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sm:flex-col md:flex md:flex-row justify-between mt-5 mb-5 px-4'>\r\n        <div className='flex-col sm:w-full lg:w-1/2'>\r\n          <div className='flex flex-row items-center'>\r\n            <div>\r\n              <i\r\n                className={`wi wi-${getWeatherIcon(\r\n                  weatherCurrent.wx_icon\r\n                )} text-4xl mt-3 mr-2`}\r\n                title={weatherCurrent.wx_desc}></i>\r\n            </div>\r\n            <div className='flex justify-start items-center'>\r\n              <div>\r\n                <span className='text-5xl font-bold'>\r\n                  {computedTempValue('temp')}\r\n                </span>\r\n              </div>\r\n              <div className='text-2xl -mt-6'>\r\n                <i\r\n                  className={`wi wi-fahrenheit cursor-pointer mx-2 ${\r\n                    weatherUnit === 'F' ? 'font-bold underline' : ''\r\n                  }`}\r\n                  onClick={() => unitClick('F')}></i>\r\n                |\r\n                <i\r\n                  className={`wi wi-celsius cursor-pointer mx-2 ${\r\n                    weatherUnit === 'C' ? 'font-bold underline' : ''\r\n                  }`}\r\n                  onClick={() => unitClick('C')}></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <p className='sm:ml-3 capitalize'>{weatherCurrent.wx_desc}</p>\r\n        </div>\r\n        <div className='sm:w-full lg:w-1/2'>\r\n          <p>\r\n            <span className='font-light'>Humidity:</span>&nbsp;\r\n            {weatherCurrent.humid_pct}%\r\n          </p>\r\n          <div className='flex items-center'>\r\n            <p>\r\n              <span className='font-light'>Wind:</span>&nbsp;\r\n              {computedSpeedValue()}{' '}\r\n            </p>\r\n            <p>\r\n              <i\r\n                className={`mx-2 mt-2 text-3xl wi wi-direction-${getWindDirection(\r\n                  weatherCurrent.winddir_deg\r\n                )}`}></i>\r\n            </p>\r\n          </div>\r\n          <p>\r\n            <span className='font-light'>Feels like:</span>&nbsp;\r\n            {computedTempValue('feelslike')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\n\r\nconst CurrentWeatherContainer = ({\r\n  weatherCurrent,\r\n  address,\r\n  latlong,\r\n  urbanArea,\r\n  formattedDateTime\r\n}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              urbanArea={urbanArea}\r\n              formattedDateTime={formattedDateTime}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport FormattedDateTime from './../../utils/FormattedDateTime'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\n\r\nconst WeatherContainer = () => {\r\n  const addressContext = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const [weatherForecast, setWeatherForecast] = useState({})\r\n  const [weatherCurrent, setWeatherCurrent] = useState({})\r\n  const [formattedDateTime, setFormattedDateTime] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const previousLatLong = useRef('')\r\n\r\n  const fetchWeatherData = async () => {\r\n    setIsLoading(true)\r\n    const {weatherCurrent, weatherForecast} = await FetchWeatherData(\r\n      addressContext\r\n    )\r\n    setWeatherCurrent(weatherCurrent)\r\n    setWeatherForecast(weatherForecast)\r\n    const formattedString = await FormattedDateTime(addressContext.latlong)\r\n    setFormattedDateTime(formattedString)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n\r\n    if (previousLatLong.current !== addressContext.latlong) {\r\n      fetchWeatherData()\r\n    }\r\n    previousLatLong.current = addressContext.latlong\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [addressContext])\r\n\r\n  return (\r\n    <Fragment>\r\n      {!isUndefined(weatherCurrent) && !isEmpty(weatherCurrent) ? (\r\n        <Fragment>\r\n          <div className={`flex justify-center px-5 py-10 bg-${theme}`}>\r\n            <div\r\n              className={`sm:w-full md:w-5/6 xl:w-1/2 border border-${colorTheme} bg-${theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={addressContext.address}\r\n                latlong={addressContext.latlong}\r\n                urbanArea={addressContext.urbanArea}\r\n                formattedDateTime={formattedDateTime}\r\n              />\r\n              <ForecastContainer\r\n                cityName={addressContext.address.cityName}\r\n                weatherForecast={weatherForecast}\r\n                formattedDateTime={formattedDateTime}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={`bg-${theme}`}>\r\n            {addressContext.urbanArea.slug ? (\r\n              <div className={`mx-auto text-center pb-5`}>\r\n                <p>\r\n                  <a\r\n                    href={`https://teleport.org/cities/${addressContext.urbanArea.slug}`}\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className='hover:no-underline'>\r\n                    <button\r\n                      className={`bg-${colorTheme} text-${theme} font-bold py-3 px-6 rounded-full capitalize`}>\r\n                      Explore life in {addressContext.urbanArea.name}\r\n                    </button>\r\n                  </a>\r\n                </p>\r\n                <p\r\n                  className={`py-1 text-xs italic font-light text-${colorTheme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://teleport.org/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`hover:no-underline hover:font-medium hover:text-${colorTheme}`}>\r\n                    Teleport\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          {isLoading ? (\r\n            <LoaderComponent\r\n              loaderText={`Fetching weather forecast ${\r\n                !isEmpty(addressContext.address.cityName)\r\n                  ? `for ${addressContext.address.cityName}`\r\n                  : null\r\n              }`}\r\n            />\r\n          ) : null}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherContainer\r\n"],"sourceRoot":""}