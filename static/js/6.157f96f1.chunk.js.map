{"version":3,"sources":["utils/ValidityChecker.js","components/error/ErrorComponent.js","context/AddressContext.js","context/WeatherUnitContext.js","utils/API.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/ValidCityName.js","components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js"],"names":["isValid","value","isEmpty","isNil","ErrorComponent","props","theme","useContext","ThemeContext","className","role","errorMessage","showCloseBtn","onClick","closeError","xmlns","viewBox","d","AddressContext","React","createContext","SPECIAL_COUNTRY_CODES","AddressContextProvider","updateState","state","setState","updateFavorites","address","cityName","cityId","latlong","favorites","formatCoords","latitude","longitude","updateAddress","a","hit","axios","get","API_URL","hits","data","city","administrative","country","validName","objectID","Sentry","getIPAddress","fetchIPAddress","lat","lon","regionName","countryCode","includes","context","updateWeatherUnit","getAddress","navigator","geolocation","getCurrentPosition","position","coords","error","console","getFavorites","localStorage","getItem","JSON","parse","this","Provider","children","Component","contextType","WeatherUnitContext","propTypes","PropTypes","objectOf","string","array","func","weatherUnit","WeatherUnitContextProvider","useState","setWeatherUnit","useEffect","setItem","stringify","unit","isProduction","ErrorBoundaryContainer","hasError","eventId","errorInfo","scope","setExtras","name","showDelimeter","AddressComponent","colorTheme","addressSelected","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","showCaret","caretClicked","showAddresses","axiosRetry","retryDelay","exponentialDelay","AutoCompleteContainer","showLoader","addresses","debounceAddress","debounce","getAddresses","searchCity","event","target","toggleAddresses","prevState","setCity","split","Event","category","action","label","message","trim","results","map","en","default","lng","handleError","clearState","LoaderComponent","index","key","length","WeatherContainer","lazy","FavoritesContainer","HomeContainer","fallback","loaderText"],"mappings":"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","file":"static/js/6.157f96f1.chunk.js","sourcesContent":["import {isEmpty, isNil} from 'lodash-es'\r\n\r\n/**\r\n * Check if the given value is valid or not\r\n * @param {*} value\r\n */\r\nconst isValid = (value) => {\r\n  return !isEmpty(value) && !isNil(value)\r\n}\r\n\r\nexport default isValid\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst ErrorComponent = props => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className={`w-full ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n      role='alert'>\r\n      <span className='w-5/6 block break-words'>{props.errorMessage}</span>\r\n      {props.showCloseBtn && (\r\n        <span\r\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1 py-3'\r\n          onClick={props.closeError}>\r\n          <svg\r\n            className='fill-current h-6 w-6 text-red-500'\r\n            role='button'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\r\n          </svg>\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent\r\n","import React, {Component} from 'react'\r\nimport {WeatherUnitContext} from './WeatherUnitContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport axios from 'axios'\r\nimport * as Sentry from '@sentry/browser'\r\nimport validName from './../utils/ValidCityName'\r\nimport fetchIPAddress from './../utils/FetchIPAddress'\r\nimport API_URL from '../utils/API'\r\nimport isValid from '../utils/ValidityChecker'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\n/**\r\n * Today, countries that use the Fahrenheit include the United States, Bahamas, Palau,\r\n * Belize, the Cayman Islands, the Federated States of Micronesia,\r\n * the Marshall Islands, and the territories such as Puerto Rico,\r\n * the U.S. Virgin Islands, and Guam.\r\n */\r\nconst SPECIAL_COUNTRY_CODES = [\r\n  'US',\r\n  'BS',\r\n  'PW',\r\n  'BZ',\r\n  'KY',\r\n  'FM',\r\n  'PR',\r\n  'VI',\r\n  'GU',\r\n]\r\n\r\nclass AddressContextProvider extends Component {\r\n  // get weather unit\r\n  static contextType = WeatherUnitContext\r\n\r\n  updateState = (state) => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = (state) => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    address: {\r\n      cityName: '',\r\n      cityId: '',\r\n    },\r\n    latlong: '',\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites,\r\n  }\r\n\r\n  formatCoords = (latitude, longitude) => {\r\n    return `${latitude},${longitude}`\r\n  }\r\n\r\n  /**\r\n   * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\r\n   */\r\n  updateAddress = async (latlong) => {\r\n    let hit = {}\r\n    try {\r\n      const {hits} = (\r\n        await axios.get(`${API_URL}/address/coords/${latlong}`)\r\n      ).data\r\n      hit = hits[0]\r\n\r\n      if (isValid(hit)) {\r\n        const city = hit.city ? hit.city[0] : ''\r\n        const state = hit.administrative ? hit.administrative[0] : ''\r\n        const country = hit.country ? hit.country : ''\r\n        const cityName = `${validName(city)}${validName(state)}${validName(\r\n          country,\r\n          false\r\n        )}`\r\n        const cityId = hit.objectID ? hit.objectID : ''\r\n        this.updateState({\r\n          address: {\r\n            cityName,\r\n            cityId,\r\n          },\r\n          latlong,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      Sentry.captureException(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get ip and city info using ip-api\r\n   * update the address\r\n   */\r\n  getIPAddress = async () => {\r\n    try {\r\n      const data = await fetchIPAddress()\r\n      if (isValid(data)) {\r\n        const {lat, lon, city, regionName, country, countryCode} = data\r\n        const cityName = `${city}, ${regionName}, ${country}`\r\n        // update the weatherUnit to 'F' if the countryCode is a special country code\r\n        if (SPECIAL_COUNTRY_CODES.includes(countryCode)) {\r\n          this.context.updateWeatherUnit('F')\r\n        }\r\n        this.updateState({\r\n          address: {\r\n            cityName,\r\n          },\r\n          latlong: this.formatCoords(lat, lon),\r\n        })\r\n      }\r\n    } catch (error) {\r\n      Sentry.captureException(error)\r\n    }\r\n  }\r\n\r\n  getAddress = async () => {\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latlong = this.formatCoords(\r\n            position.coords.latitude,\r\n            position.coords.longitude\r\n          )\r\n          this.updateAddress(latlong)\r\n        },\r\n        (error) => {\r\n          console.error(error)\r\n          this.getIPAddress()\r\n        }\r\n      )\r\n    } else {\r\n      this.getIPAddress()\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddress()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n\r\nAddressContext.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  favorites: PropTypes.array,\r\n  updateState: PropTypes.func,\r\n  updateFavorites: PropTypes.func,\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'C'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('C')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('C'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n","/**\r\n * weather react serverless API functions URL\r\n */\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\nexport default isProduction\r\n  ? 'https://weather-react-api.now.sh'\r\n  : 'https://weather-react-api-dev.now.sh'\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nexport class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false,\r\n    eventId: null,\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    Sentry.withScope((scope) => {\r\n      scope.setExtras(errorInfo)\r\n      const eventId = Sentry.captureException(error)\r\n      this.setState({eventId})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <div className='flex'>\r\n            <div className='w-1/6'></div>\r\n            <div className='flex-col w-2/3 justify-center text-center'>\r\n              <ErrorComponent\r\n                errorMessage={'Something went wrong. Reload the page!'}\r\n              />\r\n              <button\r\n                className='font-semibold py-3 px-6 rounded-full capitalize text-sun'\r\n                onClick={() =>\r\n                  Sentry.showReportDialog({eventId: this.state.eventId})\r\n                }>\r\n                Report feedback\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundaryContainer\r\n","import isValid from './ValidityChecker'\r\n\r\n/**\r\n * util func to check and return the valid name\r\n * @param {*} name (city or state or country)\r\n * @param {*} showDelimeter (false for country)\r\n */\r\nconst validName = (name, showDelimeter = true) => {\r\n  return isValid(name) ? `${name}${showDelimeter ? ', ' : ''}` : ''\r\n}\r\n\r\nexport default validName\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst AddressComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <p\r\n      className={`px-5 py-1 cursor-pointer item text-${colorTheme} hover:text-${theme} hover:bg-${colorTheme}`}\r\n      onClick={props.addressSelected}>\r\n      {props.address.cityName}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AddressComponent\r\n\r\nAddressComponent.propTypes = {\r\n  addressSelected: PropTypes.func,\r\n  address: PropTypes.objectOf(PropTypes.string)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FiSearch} from 'react-icons/fi'\r\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\r\n\r\nconst IconComponent = ({type, color}) => {\r\n  const TYPES = {\r\n    search: <FiSearch />,\r\n    up: <IoIosArrowUp />,\r\n    down: <IoIosArrowDown />\r\n  }\r\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\r\n}\r\n\r\nconst SearchComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='h-12 mx-5 mt-5'>\r\n      <div className='relative'>\r\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\r\n          <IconComponent type='search' color={colorTheme} />\r\n        </div>\r\n        <input\r\n          style={{\r\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\r\n            letterSpacing: '0.05em'\r\n          }}\r\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\r\n          id='grid-first-name'\r\n          type='text'\r\n          placeholder='Type city name to find weather forecast'\r\n          onChange={props.citySearch}\r\n          value={props.city}\r\n        />\r\n        {props.showCaret ? (\r\n          <div\r\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\r\n            onClick={props.caretClicked}>\r\n            {props.showAddresses ? (\r\n              <IconComponent type='up' color={colorTheme} />\r\n            ) : (\r\n              <IconComponent type='down' color={colorTheme} />\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchComponent\r\n\r\nSearchComponent.propTypes = {\r\n  city: PropTypes.string,\r\n  cityName: PropTypes.string,\r\n  showCaret: PropTypes.bool,\r\n  showAddresses: PropTypes.bool,\r\n  caretClicked: PropTypes.func\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport debounce from 'lodash/debounce'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/address/AddressComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/search/SearchComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport validName from '../../utils/ValidCityName'\r\nimport API_URL from './../../utils/API'\r\nimport isValid from '../../utils/ValidityChecker'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nclass AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    errorMessage: '',\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1250)\r\n\r\n  searchCity = (event) => {\r\n    this.setState({city: event.target.value, errorMessage: ''})\r\n    this.debounceAddress()\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\r\n    // city value could be empty when this function run\r\n    // so this extra check will fix the bug of showing addresses list when there is no city name\r\n    if (this.state.city.trim()) {\r\n      try {\r\n        this.setState({showLoader: true})\r\n        // the below latlong check is just a workaround for accessing correct api route\r\n        // otherwise, no matter how good the city name is, when latlong is empty user will get 404 since there is no route without latlong on the api server\r\n        const latlong = isValid(this.context.latlong)\r\n          ? this.context.latlong\r\n          : '00,00'\r\n\r\n        const {hits} = (\r\n          await axios.get(\r\n            `${API_URL}/places/query/${this.state.city}/${latlong}`\r\n          )\r\n        ).data\r\n\r\n        // populate addresses and show them if matching cities exist\r\n        if (isValid(hits)) {\r\n          const results = hits.map((hit) => {\r\n            // city value lives in default array of locale_names\r\n            const city = `${\r\n              hit['locale_names'].en\r\n                ? hit['locale_names'].en[0]\r\n                : hit['locale_names'].default[0]\r\n            }`\r\n            // state value lives in administrative array\r\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\r\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\r\n            const country = `${\r\n              hit.country.en ? hit.country.en : hit.country.default\r\n            }`\r\n\r\n            // prettier-ignore\r\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\r\n            const {lat, lng} = hit['_geoloc']\r\n            return {\r\n              cityName: cityName,\r\n              cityId: hit.objectID,\r\n              latlong: `${lat},${lng}`,\r\n            }\r\n          })\r\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\r\n          this.setState({\r\n            addresses: results,\r\n            showCaret: true,\r\n            showAddresses: true,\r\n            errorMessage: '',\r\n          })\r\n        } else {\r\n          this.setState({showAddresses: false})\r\n          this.handleError(\r\n            'No matching cities found. Try searching with a valid city name!'\r\n          )\r\n        }\r\n      } catch (error) {\r\n        Sentry.captureException(error)\r\n        this.handleError(\r\n          'Something went wrong. Please try again or search with a different city name!'\r\n        )\r\n      } finally {\r\n        this.setState({showLoader: false})\r\n      }\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses,\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = async (address) => {\r\n    if (address) {\r\n      // set city to just have cityName excluding state and country in the search input\r\n      // 'Herndon, Virginia, United States' -> 'Herndon'\r\n      this.setState({\r\n        city: address.cityName.split(',')[0],\r\n        showAddresses: false,\r\n      })\r\n      // // track this cityName to GA\r\n      Event({\r\n        category: 'Address',\r\n        action: 'City Search',\r\n        label: address.cityName,\r\n      })\r\n\r\n      this.context.updateState({\r\n        address: address,\r\n        latlong: address.latlong,\r\n      })\r\n    }\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      errorMessage: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <div className='flex justify-center'>\r\n                <div className='w-5/6'>\r\n                  <ErrorComponent\r\n                    errorMessage={this.state.errorMessage}\r\n                    showCloseBtn={true}\r\n                    closeError={() => {\r\n                      this.setState({errorMessage: ''})\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteContainer\r\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport class HomeContainer extends Component {\r\n  static contextType = ThemeContext\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <WeatherUnitContextProvider>\r\n          <AddressContextProvider>\r\n            <AutoCompleteContainer />\r\n            <ErrorBoundaryContainer>\r\n              <Suspense\r\n                fallback={\r\n                  <LoaderComponent loaderText={'Loading components'} />\r\n                }>\r\n                <WeatherContainer />\r\n                <FavoritesContainer />\r\n              </Suspense>\r\n            </ErrorBoundaryContainer>\r\n          </AddressContextProvider>\r\n        </WeatherUnitContextProvider>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeContainer\r\n"],"sourceRoot":""}