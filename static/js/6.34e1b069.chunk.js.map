{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","ThemeContext","theme","colorTheme","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","isLoading","setIsLoading","previousLatLong","useRef","fetchWeatherData","a","async","FetchWeatherData","current","forecast","isEmpty","useEffect","timer","setInterval","latlong","clearInterval","isUndefined","loaderText","address","cityName","className","urbanArea","href","target","rel","slug","name"],"mappings":"6OAoIeA,UA3HU,WACvB,IAAMC,EAAiBC,qBAAWC,KADL,EAEDD,qBAAWE,KAAhCC,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,WAFe,EAIiBC,mBAAS,IAJ1B,mBAItBC,EAJsB,KAILC,EAJK,OAKeF,mBAAS,IALxB,mBAKtBG,EALsB,KAKNC,EALM,OAMKJ,oBAAS,GANd,mBAMtBK,EANsB,KAMXC,EANW,KASvBC,EAAkBC,iBAAO,IASzBC,EAAmB,8BAAAC,EAAAC,OAAA,uDACvBL,GAAa,GADU,WAAAI,EAAA,MAEyBE,YAC9ClB,IAHqB,gBAEhBS,EAFgB,EAEhBA,eAAgBF,EAFA,EAEAA,gBATDY,EAcPV,EAdgBW,EAcAb,EAb1Bc,YAAQF,IAAaE,YAAQD,KAChCV,EAAkBS,GAClBX,EAAmBY,IAYrBR,GAAa,GARU,iCAPF,IAACO,EAASC,MAmCjC,OAjBAE,qBAAU,WACR,IAAMC,EAAQC,aAAY,WACxBT,MACC,MAQH,OAJIF,EAAgBM,UAAYnB,EAAeyB,SAC7CV,IAEFF,EAAgBM,QAAUnB,EAAeyB,QAClC,WACLC,cAAcH,MAGf,CAACvB,IAGF,kBAAC,WAAD,KACI2B,YAAYlB,IAAoBY,YAAQZ,GA2DxC,kBAAC,WAAD,KACGE,EACC,kBAAC,IAAD,CACEiB,WAAU,oCACPP,YAAQrB,EAAe6B,QAAQC,UAE5B,KAFJ,cACW9B,EAAe6B,QAAQC,aAIpC,MAnEN,kBAAC,WAAD,KACE,yBAAKC,UAAS,4CAAuC3B,IACnD,yBACE2B,UAAS,oDAA+C1B,EAA/C,eAAgED,EAAhE,iBAA8EC,EAA9E,6BACT,kBAAC,IAAD,CACEI,eAAgBA,EAChBoB,QAAS7B,EAAe6B,QACxBJ,QAASzB,EAAeyB,QACxBO,UAAWhC,EAAegC,YAE5B,kBAAC,IAAD,CACEF,SAAU9B,EAAe6B,QAAQC,SACjCrB,eAAgBA,EAChBF,gBAAiBA,MAIvB,uBACEwB,UAAS,iEAA4D1B,EAA5D,eAA6ED,IADxF,iBAGE,uBACE6B,KAAK,iCACLC,OAAO,SACPC,IAAI,sBACJJ,UAAS,kDAA6C3B,IAJxD,aAQF,yBAAK2B,UAAS,aAAQ3B,IACnBJ,EAAegC,UAAUI,KACxB,yBAAKL,UAAS,4BACZ,2BACE,uBACEE,KAAI,sCAAiCjC,EAAegC,UAAUI,MAC9DF,OAAO,SACPC,IAAI,sBACJJ,UAAU,sBACV,4BACEA,UAAS,aAAQ1B,EAAR,iBAA2BD,EAA3B,iDADX,mBAEmBJ,EAAegC,UAAUK,QAIhD,uBAAGN,UAAS,uCAAkC1B,IAA9C,iBAEE,uBACE4B,KAAK,wBACLC,OAAO,SACPC,IAAI,sBACJJ,UAAS,kDAA6C3B,IAJxD,cASF","file":"static/js/6.34e1b069.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\n\r\nconst WeatherContainer = () => {\r\n  const addressContext = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const [weatherForecast, setWeatherForecast] = useState({})\r\n  const [weatherCurrent, setWeatherCurrent] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  // store ref to latlong\r\n  const previousLatLong = useRef('')\r\n\r\n  const setWeatherData = (current, forecast) => {\r\n    if (!isEmpty(current) && !isEmpty(forecast)) {\r\n      setWeatherCurrent(current)\r\n      setWeatherForecast(forecast)\r\n    }\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    setIsLoading(true)\r\n    const {weatherCurrent, weatherForecast} = await FetchWeatherData(\r\n      addressContext\r\n    )\r\n    // set the weatherCurrent and weatherForecast only when the data is non-empty\r\n    // this way, the old fetched data can be preserved when api call fail or limit exceed\r\n    setWeatherData(weatherCurrent, weatherForecast)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n\r\n    // fetch weatherData only when latlong change\r\n    // to avoid uneccessary api calls for the same location or on page reload\r\n    if (previousLatLong.current !== addressContext.latlong) {\r\n      fetchWeatherData()\r\n    }\r\n    previousLatLong.current = addressContext.latlong\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [addressContext])\r\n\r\n  return (\r\n    <Fragment>\r\n      {!isUndefined(weatherCurrent) && !isEmpty(weatherCurrent) ? (\r\n        <Fragment>\r\n          <div className={`flex justify-center px-5 pt-10 bg-${theme}`}>\r\n            <div\r\n              className={`sm:w-full lg:w-5/6 xl:w-2/3 border border-${colorTheme} bg-${theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={addressContext.address}\r\n                latlong={addressContext.latlong}\r\n                urbanArea={addressContext.urbanArea}\r\n              />\r\n              <ForecastContainer\r\n                cityName={addressContext.address.cityName}\r\n                weatherCurrent={weatherCurrent}\r\n                weatherForecast={weatherForecast}\r\n              />\r\n            </div>\r\n          </div>\r\n          <p\r\n            className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n            Powered by&nbsp;\r\n            <a\r\n              href='https://darksky.net/poweredby/'\r\n              target='_blank'\r\n              rel='noreferrer noopener'\r\n              className={`special-link z-0 font-medium hover:text-${theme}`}>\r\n              Dark Sky\r\n            </a>\r\n          </p>\r\n          <div className={`bg-${theme}`}>\r\n            {addressContext.urbanArea.slug ? (\r\n              <div className={`mx-auto text-center pb-5`}>\r\n                <p>\r\n                  <a\r\n                    href={`https://teleport.org/cities/${addressContext.urbanArea.slug}`}\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className='hover:no-underline'>\r\n                    <button\r\n                      className={`bg-${colorTheme} text-${theme} font-bold py-3 px-6 rounded-full capitalize`}>\r\n                      Explore life in {addressContext.urbanArea.name}\r\n                    </button>\r\n                  </a>\r\n                </p>\r\n                <p className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://teleport.org/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`special-link z-0 font-medium hover:text-${theme}`}>\r\n                    Teleport\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          {isLoading ? (\r\n            <LoaderComponent\r\n              loaderText={`Fetching weather forecast ${\r\n                !isEmpty(addressContext.address.cityName)\r\n                  ? `for ${addressContext.address.cityName}`\r\n                  : null\r\n              }`}\r\n            />\r\n          ) : null}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherContainer\r\n"],"sourceRoot":""}