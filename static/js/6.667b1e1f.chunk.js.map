{"version":3,"sources":["utils/CarouselSettings.js","utils/FetchWeatherData.js","utils/MiscTrackEvents.js","components/weather/InfoComponent.js","utils/WindDirection.js","components/weather/InfoDetailComponent.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","utils/ImageDetails.js","components/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js","utils/FormatTime.js","utils/TemperatureConvert.js","utils/WeatherIcon.js","components/weather/WeatherIconComponent.js"],"names":["CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","process","FetchWeatherData","a","async","weatherCurrent","weatherForecast","isUndefined","isEmpty","get","then","response","weatherData","data","timezone","currently","sunrise","daily","sunriseTime","sunset","sunsetTime","timeFrames","hourly","forEach","hour","date","FormatTime","time","Object","keys","includes","push","days","day","catch","err","Sentry","emitGA","value","Event","category","action","label","InfoComponent","address","urbanArea","updateFavorites","useContext","AddressContext","useState","setDate","setTime","emitFavoriteCityGA","favoriteCity","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","format","current","useEffect","moment","tz","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","computedTempValue","Math","round","fToC","getWeatherIcon","startsWith","summary","WeatherIconComponent","src","alt","humidity","windSpeed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","today","updateSelectedDay","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","imageExist","photos","getImage","image","mobile","web","attribution","photographer","site","source","getImageDetails","imageOverlay","background","borderTopLeftRadius","borderTopRightRadius","FavoriteComponent","favoriteSelected","style","split","FavoritesContainer","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","isLoading","setIsLoading","slideIndex","setSlideIndex","weatherRef","favoritesLength","validCityName","selectFavoriteHandler","fetchWeatherData","state","scrollHandler","finally","ref","window","scrollTo","offsetTop","find","timer","afterSlide","href","target","rel","slug","name","timestamp","formatType","temp","icon","up","right","down","left"],"mappings":"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","file":"static/js/6.667b1e1f.chunk.js","sourcesContent":["// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none'\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#A1A6B4',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px'\r\n    }\r\n  }\r\n})\r\n\r\nexport default CarouselSettings\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport FormatTime from './FormatTime'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nconst API_KEY = process.env.REACT_APP_DARKSKY_API_KEY\r\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nconst getURL = latlong => {\r\n  return `${CORS_URL}/https://api.darksky.net/forecast/${API_KEY}/${latlong}?extend=hourly&exclude=minutely,flags`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong)) {\r\n    await axios\r\n      .get(getURL(latlong))\r\n      .then(response => {\r\n        const weatherData = response.data\r\n        if (!isEmpty(weatherData) && !isUndefined(weatherData)) {\r\n          // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n          // displaying weatherIcon with day or night variants specific to location timezone\r\n          // parsing sunriseTime & sunsetTime according to the timezone\r\n          const timezone = weatherData.timezone\r\n\r\n          weatherCurrent = {\r\n            timezone,\r\n            ...weatherData.currently,\r\n            sunrise: weatherData.daily.data[0].sunriseTime,\r\n            sunset: weatherData.daily.data[0].sunsetTime\r\n          }\r\n\r\n          // group 168 hours into days as keys in timeFrames\r\n          // group days and timeFrames into weatherForecast\r\n          const timeFrames = {}\r\n          // create date as the keys for timeFrame in timeFrames\r\n          // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n          weatherData.hourly.data.forEach(hour => {\r\n            const date = FormatTime(hour.time, timezone, 'MM/DD/YYYY')\r\n            if (Object.keys(timeFrames).includes(date)) {\r\n              timeFrames[date].push({timezone, ...hour})\r\n            } else {\r\n              timeFrames[date] = [{timezone, ...hour}]\r\n            }\r\n          })\r\n          const days = {}\r\n          // create date as the keys for the day in days\r\n          // i.e days: {'02/28/2020': {...day}, ...}\r\n          weatherData.daily.data.forEach(day => {\r\n            const date = FormatTime(day.time, timezone, 'MM/DD/YYYY')\r\n            // since there will be unique day objects in days\r\n            // just create a 'date' key with day object as value for as many days\r\n            days[date] = {timezone, ...day}\r\n          })\r\n\r\n          weatherForecast = {timeFrames, days}\r\n        }\r\n      })\r\n      .catch(err => Sentry.captureException(err))\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","import {Event} from './ReactAnalytics'\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String} value\r\n */\r\nconst emitGA = (type, value) => {\r\n  switch (type) {\r\n    case 'favorites':\r\n      // track selectedFavorite to GA\r\n      Event({\r\n        category: 'Favorites',\r\n        action: 'Select Favorite',\r\n        label: value\r\n      })\r\n      break\r\n    case 'explore-life':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Explore Life',\r\n        action: 'Click on Explore Life',\r\n        label: value\r\n      })\r\n      break\r\n    case 'powered-by':\r\n      // track explore life click event to GA\r\n      Event({\r\n        category: 'Powered By',\r\n        action: 'Click on Powered By',\r\n        label: value\r\n      })\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default emitGA\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\r\n\r\nconst InfoComponent = ({address, latlong, urbanArea, weatherCurrent}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  /**\r\n   * track select favorite click event to GA\r\n   * @param {String} type (add or remove)\r\n   * @param {String} favoriteCity (name)\r\n   */\r\n  const emitFavoriteCityGA = (type, favoriteCity) => {\r\n    Event({\r\n      category: 'Favorite City',\r\n      action: `${type} city`,\r\n      label: favoriteCity\r\n    })\r\n  }\r\n\r\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem(\r\n        'favorites',\r\n        JSON.stringify([{address, latlong, urbanArea}])\r\n      )\r\n      emitFavoriteCityGA('add', address.cityName)\r\n      updateFavorites({\r\n        favorites: [{address, latlong, urbanArea}]\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const duplicates = favorites.filter(\r\n        favorite => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        // add newly added favorite to old favorites\r\n        const updatedFavorites = [...favorites, {address, latlong, urbanArea}]\r\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n        emitFavoriteCityGA('add', address.cityName)\r\n        updateFavorites({\r\n          favorites: updatedFavorites\r\n        })\r\n      } else {\r\n        // if already favorite is selected\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          favorite =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          const newFavorites = [...favorites]\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          emitFavoriteCityGA('remove', address.cityName)\r\n          updateFavorites({\r\n            favorites: newFavorites\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = dateObj => {\r\n    setDate(!isUndefined(dateObj) ? dateObj.format('MMMM Do, YYYY') : '')\r\n    setTime(!isUndefined(dateObj) ? dateObj.format('dddd h:mm A') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever weatherCurrent change\r\n    datetimeSetter(\r\n      moment(weatherCurrent.time * 1000).tz(weatherCurrent.timezone)\r\n    )\r\n\r\n    const dateTimer = setInterval(() => {\r\n      if (weatherCurrent.time) {\r\n        // update date and time every second only when there is a valid timestamp\r\n        const formattedDateTimeObj = moment\r\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n          .add(1, 's')\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [weatherCurrent])\r\n\r\n  return (\r\n    <div className='flex justify-between items-start'>\r\n      <div className='pt-4 px-4'>\r\n        <p className='font-bold'>{address.cityName}</p>\r\n        <div className='sm:flex-col md:flex md:flex-row font-light'>\r\n          {!isEmpty(date) && !isEmpty(time) ? (\r\n            <Fragment>\r\n              <p>\r\n                {date}\r\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n              </p>\r\n              <p>{time}</p>\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        className='mt-6 mr-4 cursor-pointer text-xl'\r\n        title={\r\n          isBookmarked()\r\n            ? 'Remove this city from favorites'\r\n            : 'Favorite this city'\r\n        }\r\n        onClick={favoritesHandler}>\r\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n\r\nInfoComponent.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport {mToK} from '../../utils/SpeedConvert'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport {PropTypes} from 'prop-types'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n\r\n  const unitClick = unit => {\r\n    // track event to GA\r\n    Event({\r\n      category: 'Weather Unit',\r\n      action: 'Set Unit',\r\n      label: unit\r\n    })\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(weatherCurrent[`${type}`])\r\n      : fToC(weatherCurrent[`${type}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.windSpeed)} mph`\r\n      : `${mToK(weatherCurrent.windSpeed)} kmph`\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\r\n        <div className='flex-col sm:w-full lg:w-1/2'>\r\n          <div className='flex flex-row justify-between sm:justify-start'>\r\n            <div className='flex flex-col justify-center items-center'>\r\n              <div>\r\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\r\n                  <p\r\n                    className='text-6xl sm:mx-2 mt-2'\r\n                    title={weatherCurrent.summary}>\r\n                    {\r\n                      <WeatherIconComponent\r\n                        type={getWeatherIcon(weatherCurrent)}\r\n                      />\r\n                    }\r\n                  </p>\r\n                ) : (\r\n                  <img\r\n                    src={`./weather/${getWeatherIcon(weatherCurrent)}.svg`}\r\n                    alt='icon'\r\n                    title={weatherCurrent.summary}\r\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                  />\r\n                )}\r\n              </div>\r\n              <p className='hidden sm:flex font-medium -mt-2 ml-3 capitalize'>\r\n                {weatherCurrent.summary}\r\n              </p>\r\n            </div>\r\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\r\n              <div>\r\n                <span className='text-6xl font-bold'>\r\n                  {computedTempValue('temperature')}\r\n                </span>\r\n              </div>\r\n              <div className='-mt-8 mx-2 text-sm'>\r\n                <sup>o</sup>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'F' ? 'font-bold underline' : 'font-light'\r\n                  }`}\r\n                  onClick={() => unitClick('F')}>\r\n                  F\r\n                </span>\r\n                <span className='mx-1'>|</span>\r\n                <sup>o</sup>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'C' ? 'font-bold underline' : 'font-light'\r\n                  }`}\r\n                  onClick={() => unitClick('C')}>\r\n                  C\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* weather info */}\r\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n            {weatherCurrent.summary}\r\n          </p>\r\n          <div className='text-sm sm:text-lg ml-8'>\r\n            <div className='flex flex-row sm:my-2'>\r\n              <p className='font-light'>Humidity:</p>&nbsp;\r\n              <p className='mx-1'>{Math.round(weatherCurrent.humidity)}</p>\r\n              <p className='text-sm mt-1'>\r\n                <FiPercent />\r\n              </p>\r\n            </div>\r\n            <div className='flex items-center sm:my-2'>\r\n              <p>\r\n                <span className='font-light'>Wind:</span>&nbsp;\r\n                {computedSpeedValue()}{' '}\r\n              </p>\r\n              <p className='text-3xl'>\r\n                {\r\n                  <WeatherIconComponent\r\n                    type={getWindDirection(weatherCurrent.windBearing)}\r\n                  />\r\n                }\r\n              </p>\r\n            </div>\r\n            <p>\r\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\r\n              {computedTempValue('apparentTemperature')}\r\n              <sup>o</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n\r\nInfoDetailComponent.propTypes = {\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst CurrentWeatherContainer = ({\r\n  weatherCurrent,\r\n  address,\r\n  latlong,\r\n  urbanArea\r\n}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              urbanArea={urbanArea}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n\r\nCurrentWeatherContainer.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  urbanArea: PropTypes.object,\r\n  weatherCurrent: PropTypes.object\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst DayComponent = props => {\r\n  const {day, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be 'High' or 'Low'\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(day[`temperature${type}`])\r\n      : fToC(day[`temperature${type}`])\r\n  }\r\n\r\n  const selectedDay = () => {\r\n    props.selectedDay({day})\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`sm:border-t sm:border-r sm:border-b-0 sm:border-l-0 md:border-light md:hover:bg-light md:hover:text-black items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer ${\r\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\r\n      } transition-all duration-1000 ease-in-out`}\r\n      onClick={selectedDay}>\r\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\r\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-light sm:font-medium'>\r\n          {FormatTime(day.time, day.timezone, 'ddd')}\r\n        </p>\r\n        {/* icon */}\r\n        <div className='flex w-1/6 sm:w-full'>\r\n          {getWeatherIcon(day).startsWith('wi') ? (\r\n            <p\r\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n              title={day.summary}>\r\n              <WeatherIconComponent type={getWeatherIcon(day)} />\r\n            </p>\r\n          ) : (\r\n            <img\r\n              src={`./weather/${getWeatherIcon(day)}.svg`}\r\n              alt='icon'\r\n              title={day.summary}\r\n              className='sm:-mt-3 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n            />\r\n          )}\r\n        </div>\r\n        {/* high & low */}\r\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n          <p className='mx-2 text-xs sm:text-sm'>\r\n            {computedTempValue('High')}\r\n            <sup>o</sup>\r\n          </p>\r\n          <p className='mx-2 text-xs'>\r\n            {computedTempValue('Low')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n        {/* sunrise & sunset */}\r\n        <div\r\n          className={`${\r\n            index === selectedIndex ? 'flex' : 'flex'\r\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p className='text-xl text-sun mr-2' title='sunrise'>\r\n              <WeatherIconComponent type='sunrise' />\r\n            </p>\r\n            <p>{FormatTime(day.sunriseTime, day.timezone, 'h:mm')}</p>\r\n          </div>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p className='text-xl text-sun mr-1' title='sunset'>\r\n              <WeatherIconComponent type='sunset' />\r\n            </p>\r\n            <p>{FormatTime(day.sunsetTime, day.timezone, 'HH:mm')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n\r\nDayComponent.propTypes = {\r\n  day: PropTypes.object,\r\n  selectedDay: PropTypes.func,\r\n  index: PropTypes.string,\r\n  selectedIndex: PropTypes.string\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = type => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(Timeframe[`${type}`])\r\n      : fToC(Timeframe[`${type}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\r\n      <div>\r\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\r\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\r\n          </p>\r\n        ) : (\r\n          <img\r\n            src={`./weather/${getWeatherIcon(Timeframe)}.svg`}\r\n            alt='icon'\r\n            title={Timeframe.summary}\r\n            className='w-16 h-16 object-contain'\r\n          />\r\n        )}\r\n      </div>\r\n      <p className='text-lg'>\r\n        {computedTempValue('temperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm'>\r\n        {computedTempValue('apparentTemperature')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>\r\n        {FormatTime(Timeframe.time, Timeframe.timezone, 'h:mm A')}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n\r\nTimeframeComponent.propTypes = {\r\n  Timeframe: PropTypes.object\r\n}\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\r\n  const [selectedDay, setSelectedDay] = useState('')\r\n  const {time, timezone} = weatherCurrent\r\n\r\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (!isUndefined(weatherCurrent.time)) {\r\n      const today = FormatTime(time, timezone, 'MM/DD/YYYY')\r\n      // check if today key exist in days\r\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n        setSelectedDay(weatherForecast.days[today] ? today : '')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * day is a date '02/28/2020'\r\n   * @param {String} day\r\n   */\r\n  const daySelectHandler = day => {\r\n    setSelectedDay(day)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    // eslint-disable-next-line\r\n  }, [weatherForecast])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden pb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* day */}\r\n            <div\r\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n              {Object.keys(weatherForecast.days).map((day, index) => {\r\n                // day is key in weatherForecast.days -> '02/28/2020'\r\n                // index is the position of key -> 0\r\n                return (\r\n                  <DayComponent\r\n                    day={weatherForecast.days[day]}\r\n                    key={index}\r\n                    index={day}\r\n                    selectedIndex={selectedDay}\r\n                    selectedDay={() => daySelectHandler(day)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.days) ? (\r\n              <ErrorComponent\r\n                errorMessage={'No forecast data available for this city!'}\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n\r\nForecastContainer.propTypes = {\r\n  cityName: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n  weatherForecast: PropTypes.object\r\n}\r\n","import {isUndefined, isEmpty} from 'lodash-es'\r\n\r\n// check if there any image exist for an urban area\r\nconst imageExist = urbanArea => {\r\n  return isUndefined(urbanArea.photos) && isEmpty(urbanArea.photos)\r\n    ? false\r\n    : urbanArea.photos.length > 0\r\n}\r\n\r\n/* sample urbanArea\r\n\"urbanArea\": {\r\n  \"name\": \"Christchurch\",\r\n  \"slug\": \"christchurch\",\r\n  \"photos\": [\r\n    {\r\n      \"attribution\": {\r\n        \"license\": \"Creative Commons Attribution-Share Alike 3.0 Unported\",\r\n        \"photographer\": \"P. Stalder\",\r\n        \"site\": \"Wikimedia Commons\",\r\n        \"source\": \"https://commons.wikimedia.org/wiki/File:Christchurch_City.jpg\"\r\n      },\r\n      \"image\": {\r\n        \"mobile\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch-0cf7c854fe.jpg\",\r\n        \"web\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch_web-23e4656c2c.jpg\"\r\n      }\r\n    }\r\n  ]\r\n} */\r\n/**\r\n * @param {Object} urbanArea\r\n */\r\nconst getImageDetails = urbanArea => {\r\n  const {image} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0]\r\n    : {mobile: '', web: ''}\r\n  const {photographer, site, source} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0].attribution\r\n    : {\r\n        photographer: '',\r\n        site: '',\r\n        source: ''\r\n      }\r\n\r\n  return {\r\n    image,\r\n    photographer,\r\n    site,\r\n    source\r\n  }\r\n}\r\n\r\nexport {imageExist, getImageDetails}\r\n","import React, {useContext, Fragment} from 'react'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\n// get image details\r\nconst getImage = urbanArea => {\r\n  const {image} = getImageDetails(urbanArea)\r\n  return image\r\n}\r\nconst imageOverlay = {\r\n  background: 'rgba(0,0,0,0.7)',\r\n  borderTopLeftRadius: '1rem',\r\n  borderTopRightRadius: '1rem'\r\n}\r\n\r\nconst FavoriteComponent = ({\r\n  favorite,\r\n  favoriteSelected,\r\n  index,\r\n  selectedIndex\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='relative w-full h-16'>\r\n      {imageExist(favorite.urbanArea) ? (\r\n        <Fragment>\r\n          <img\r\n            src={getImage(favorite.urbanArea).web}\r\n            alt='city'\r\n            className='h-full w-full object-cover object-center rounded-2xl'\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n      <div\r\n        className={`${\r\n          imageExist(favorite.urbanArea)\r\n            ? `absolute top-0 left-0 right-0 bottom-0 text-light ${\r\n                index === selectedIndex\r\n                  ? 'sm:shadow-outline'\r\n                  : 'sm:outline-none'\r\n              }`\r\n            : `h-16 text-${colorTheme} bg-${theme} hover:bg-${colorTheme} hover:text-${theme} border ${\r\n                index === selectedIndex\r\n                  ? 'sm:border-teal-600'\r\n                  : `sm:border-${colorTheme}`\r\n              }`\r\n        } pt-5 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\r\n        style={imageExist(favorite.urbanArea) ? imageOverlay : null}\r\n        onClick={favoriteSelected}>\r\n        {favorite.address.cityName.split(', ')[0]}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FavoriteComponent\r\n\r\nFavoriteComponent.propTypes = {\r\n  favorite: PropTypes.object,\r\n  favoriteSelected: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number\r\n}\r\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport FetchWeatherData from './../../utils/FetchWeatherData'\r\nimport {isUndefined, isEmpty, find} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FavoriteComponent from '../../components/favorite/FavoriteComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport emitGA from '../../utils/MiscTrackEvents'\r\n\r\nconst FavoritesContainer = () => {\r\n  const {favorites} = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const [selectedFavorite, setSelectedFavorite] = useState({})\r\n  const [favoriteWeather, setFavoriteWeather] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [slideIndex, setSlideIndex] = useState(null)\r\n  const weatherRef = useRef(null)\r\n\r\n  // favorites data length\r\n  const favoritesLength = useRef(0)\r\n\r\n  // scroll to weather component when selectedFavorite is set\r\n  const scrollToRef = ref => window.scrollTo(0, ref.current.offsetTop)\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (!isEmpty(selectedFavorite) && !isUndefined(selectedFavorite)) {\r\n      return (\r\n        !isEmpty(selectedFavorite.address.cityName) &&\r\n        !isUndefined(selectedFavorite.address.cityName)\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const selectFavoriteHandler = index => {\r\n    if (favorites[index]) {\r\n      emitGA('favorites', favorites[index].address.cityName)\r\n      setSelectedFavorite({...favorites[index]})\r\n    }\r\n    setSlideIndex(index)\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (\r\n      !isUndefined(selectedFavorite) &&\r\n      Object.keys(selectedFavorite).length\r\n    ) {\r\n      setIsLoading(true)\r\n      await FetchWeatherData(selectedFavorite)\r\n        .then(response => {\r\n          // set favoriteWeather only when the data is non-empty\r\n          if (!isEmpty(response) && !isUndefined(response)) {\r\n            setFavoriteWeather(state => ({...state, ...response}))\r\n            scrollHandler()\r\n          }\r\n        })\r\n        .catch(err => Sentry.captureException(err))\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const scrollHandler = () => {\r\n    scrollToRef(weatherRef)\r\n  }\r\n\r\n  const favoritesChecker = () => {\r\n    // check for deleted selectedFavorite scenario\r\n    // i.e. selectedFavorite is not in the favorites\r\n    // to update it with the favorite at current slideIndex\r\n    if (!isEmpty(selectedFavorite) && !isUndefined(selectedFavorite)) {\r\n      if (\r\n        isUndefined(\r\n          find(\r\n            favorites,\r\n            favorite =>\r\n              favorite.address.cityName === selectedFavorite.address.cityName\r\n          )\r\n        )\r\n      ) {\r\n        selectFavoriteHandler(slideIndex)\r\n      } else {\r\n        // if favorites get updated\r\n        // i.e. a new favorite is added (favorites.length > favoritesLength)\r\n        // set selectedFavorite and slideIndex to the newly added favorite\r\n        // i.e. last favorite in favorites\r\n        if (favorites.length > favoritesLength.current) {\r\n          selectFavoriteHandler(favorites.length - 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    /* important edge case scenarios checker for deleted selectedFavorite & newly added favorite */\r\n    favoritesChecker()\r\n    // update favoritesLength\r\n    favoritesLength.current = favorites.length\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedFavorite, favorites])\r\n\r\n  return (\r\n    <Fragment>\r\n      {favorites.length > 0 ? (\r\n        <div className={`bg-${theme} pt-10 pb-24 mb-0`}>\r\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\r\n            Favorites\r\n          </p>\r\n          {/* mobile */}\r\n          <div className='sm:hidden px-5 py-5'>\r\n            <Carousel\r\n              {...CarouselSettings('favorite')}\r\n              slideIndex={slideIndex}\r\n              afterSlide={slideIndex => selectFavoriteHandler(slideIndex)}>\r\n              {favorites.map((favorite, index) => {\r\n                return (\r\n                  <FavoriteComponent\r\n                    key={favorite.latlong}\r\n                    favorite={favorite}\r\n                    index={index}\r\n                    selectedIndex={slideIndex}\r\n                    favoriteSelected={() => selectFavoriteHandler(index)}\r\n                  />\r\n                )\r\n              })}\r\n            </Carousel>\r\n          </div>\r\n          {/* tablet and above devices */}\r\n          <div className='hidden sm:flex justify-center items-center'>\r\n            <div className='sm:w-5/6 xl:max-w-6xl px-5 py-5'>\r\n              <div className='flex sm:flex-row flex-wrap justify-center'>\r\n                {favorites.map((favorite, index) => {\r\n                  return (\r\n                    <div\r\n                      className='m-2 sm:w-1/2 md:w-1/4'\r\n                      key={favorite.latlong}>\r\n                      <FavoriteComponent\r\n                        key={favorite.latlong}\r\n                        favorite={favorite}\r\n                        index={index}\r\n                        selectedIndex={slideIndex}\r\n                        favoriteSelected={() => selectFavoriteHandler(index)}\r\n                      />\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* \r\n            TODO: utilize weather container here instead of code repeat\r\n          */}\r\n          <div ref={weatherRef}>\r\n            {!isEmpty(favoriteWeather.weatherCurrent) &&\r\n            !isUndefined(favoriteWeather.weatherCurrent) ? (\r\n              <Fragment>\r\n                <div className='flex justify-center px-5 pt-10'>\r\n                  <div\r\n                    className={`sm:w-full lg:w-5/6 xl:max-w-6xl border border-${colorTheme} bg-{theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n                    <CurrentWeatherContainer\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      address={selectedFavorite.address}\r\n                      latlong={selectedFavorite.latlong}\r\n                      urbanArea={selectedFavorite.urbanArea}\r\n                    />\r\n                    <ForecastContainer\r\n                      cityName={selectedFavorite.address.cityName}\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      weatherForecast={favoriteWeather.weatherForecast}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://darksky.net/poweredby/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`link z-0 font-medium hover:text-${theme}`}\r\n                    onClick={() => emitGA('powered-by', 'Dark Sky')}>\r\n                    Dark Sky\r\n                  </a>\r\n                </p>\r\n                <div className={`bg-${theme}`}>\r\n                  {selectedFavorite.urbanArea.slug ? (\r\n                    <div className='mx-auto text-center pb-5'>\r\n                      <p>\r\n                        <a\r\n                          href={`https://teleport.org/cities/${selectedFavorite.urbanArea.slug}`}\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className='hover:no-underline'\r\n                          onClick={() =>\r\n                            emitGA(\r\n                              'explore-life',\r\n                              selectedFavorite.urbanArea.name\r\n                            )\r\n                          }>\r\n                          <button\r\n                            className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}>\r\n                            Explore life in {selectedFavorite.urbanArea.name}\r\n                          </button>\r\n                        </a>\r\n                      </p>\r\n                      <p\r\n                        className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                        Powered by&nbsp;\r\n                        <a\r\n                          href='https://teleport.org/'\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className={`link z-0 font-medium hover:text-${theme}`}\r\n                          onClick={() => emitGA('powered-by', 'Teleport')}>\r\n                          Teleport\r\n                        </a>\r\n                      </p>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </Fragment>\r\n            ) : (\r\n              <Fragment>\r\n                {isLoading ? (\r\n                  <LoaderComponent\r\n                    loaderText={`Fetching weather forecast ${\r\n                      validCityName()\r\n                        ? `for ${selectedFavorite.address.cityName}`\r\n                        : ''\r\n                    } 😎`}\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {validCityName() ? (\r\n                      // show error component only when selectedFavorite cityName is valid\r\n                      // since by default on component load, selectedFavorite is empty\r\n                      // this extra check will hide error and show only when api call fetch fail for selectedFavorite\r\n                      <div className='flex justify-center'>\r\n                        <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                          <ErrorComponent\r\n                            errorMessage={`Something went wrong. Failed to fetch weather forecast ${\r\n                              validCityName()\r\n                                ? `for ${selectedFavorite.address.cityName}`\r\n                                : ''\r\n                            }! 😢`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default FavoritesContainer\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n */\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n\r\nexport default FormatTime\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherIcon = data => {\r\n  const {icon, timezone} = data\r\n  const hour = moment()\r\n    .tz(timezone)\r\n    .format('H')\r\n  const type = hour >= 6 && hour < 18 ? 'day' : 'night'\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'clear-day':\r\n        return 'day'\r\n      case 'clear-night':\r\n        return 'night'\r\n      case 'rain':\r\n        return `${type}-rain`\r\n      case 'snow':\r\n        return `${type}-snow`\r\n      case 'sleet':\r\n        return 'sleet'\r\n      case 'wind':\r\n        return `${type}-cloudy`\r\n      case 'fog':\r\n        return `${type}-cloudy`\r\n      case 'cloudy':\r\n        return 'cloudy'\r\n      case 'partly-cloudy-day':\r\n        return 'day-cloudy'\r\n      case 'partly-cloudy-night':\r\n        return 'night-cloudy'\r\n      case 'hail':\r\n        return 'hail'\r\n      case 'thunderstorm':\r\n        return 'thunder'\r\n      case 'tornado':\r\n        return 'wi-tornado'\r\n      default:\r\n        return 'wi-na'\r\n    }\r\n  }\r\n  return 'wi-na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nconst WeatherIconComponent = ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n\r\nexport default WeatherIconComponent\r\n"],"sourceRoot":""}