{"version":3,"sources":["components/error/ErrorComponent.js","context/AddressContext.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/LatLongUrbanArea.js","components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js","context/WeatherUnitContext.js"],"names":["ErrorComponent","props","theme","useContext","ThemeContext","className","role","errorMessage","showCloseBtn","onClick","closeError","xmlns","viewBox","d","AddressContext","React","createContext","AddressContextProvider","updateState","state","setState","updateFavorites","address","cityName","cityId","urbanArea","name","slug","photos","latlong","favorites","fetchAddressInfo","a","async","axios","get","then","response","data","isEmpty","isUndefined","city","region","country_name","cityInfo","count","cityIdArr","_embedded","map","result","_links","href","split","getLatLongUrbanArea","catch","err","Sentry","latitude","longitude","getFavorites","localStorage","getItem","JSON","parse","urban_areas","setItem","stringify","this","getAddressInfo","Provider","value","children","Component","propTypes","PropTypes","objectOf","string","ErrorBoundaryContainer","hasError","eventId","error","errorInfo","scope","setExtras","axiosRetry","retryDelay","exponentialDelay","lat","long","location","latlon","undefined","urbanAreas","Object","keys","includes","AddressComponent","colorTheme","addressSelected","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","showCaret","trim","caretClicked","showAddresses","AutoCompleteContainer","showLoader","addresses","debounceAddress","debounce","getAddresses","searchCity","event","target","clearState","toggleAddresses","prevState","setCity","Event","category","action","label","context","message","results","matching_full_name","handleError","LoaderComponent","index","key","length","contextType","WeatherContainer","lazy","FavoritesContainer","HomeContainer","WeatherUnitContext","fallback","loaderText","weatherUnit","WeatherUnitContextProvider","useState","setWeatherUnit","useEffect","updateWeatherUnit","unit"],"mappings":"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","file":"static/js/7.c2b958de.chunk.js","sourcesContent":["import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst ErrorComponent = props => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className={`w-full ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n      role='alert'>\r\n      <span className='w-5/6 block break-words'>{props.errorMessage}</span>\r\n      {props.showCloseBtn && (\r\n        <span\r\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1 py-3'\r\n          onClick={props.closeError}>\r\n          <svg\r\n            className='fill-current h-6 w-6 text-red-500'\r\n            role='button'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\r\n          </svg>\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent\r\n","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport {PropTypes} from 'prop-types'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport getLatLongUrbanArea from '../utils/LatLongUrbanArea'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\nclass AddressContextProvider extends Component {\r\n  updateState = state => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = state => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    address: {\r\n      cityName: '',\r\n      cityId: ''\r\n    },\r\n    urbanArea: {\r\n      name: '',\r\n      slug: '',\r\n      photos: []\r\n    },\r\n    latlong: '',\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites\r\n  }\r\n\r\n  fetchAddressInfo = async () => {\r\n    // defaults\r\n    let cityId = ''\r\n    let urbanArea = {\r\n      name: '',\r\n      slug: '',\r\n      photos: []\r\n    }\r\n    await axios\r\n      .get('https://ipapi.co/json')\r\n      .then(async response => {\r\n        const {data} = response\r\n        if (!isEmpty(data) && !isUndefined(data)) {\r\n          const cityName = `${data.city}, ${data.region}, ${data.country_name}`\r\n          await axios\r\n            .get(`https://api.teleport.org/api/cities/?search=${cityName}`)\r\n            .then(async response => {\r\n              const cityInfo = response.data\r\n              // get cityId if matching cities exist\r\n              if (\r\n                !isEmpty(cityInfo) &&\r\n                !isUndefined(cityInfo) &&\r\n                cityInfo.count > 0\r\n              ) {\r\n                const cityIdArr = cityInfo._embedded['city:search-results'].map(\r\n                  result => ({\r\n                    cityId: result._links['city:item'].href.split('/')[5]\r\n                  })\r\n                )\r\n\r\n                cityId = cityIdArr[0].cityId\r\n\r\n                // update urbanArea with the known cityId\r\n                await getLatLongUrbanArea(cityId)\r\n                  .then(response => {\r\n                    urbanArea = response.urbanArea\r\n                  })\r\n                  .catch(err => Sentry.captureException(err))\r\n              }\r\n            })\r\n            .catch(err => Sentry.captureException(err))\r\n\r\n          this.updateState({\r\n            address: {\r\n              cityName: cityName,\r\n              cityId: cityId\r\n            },\r\n            latlong: `${data.latitude},${data.longitude}`,\r\n            urbanArea\r\n          })\r\n        }\r\n      })\r\n      .catch(err => Sentry.captureException(err))\r\n  }\r\n\r\n  async getAddressInfo() {\r\n    try {\r\n      // fetch and store urban areas list in localStorage\r\n      if (!localStorage.getItem('urban-areas')) {\r\n        const urban_areas = await axios\r\n          .get(\r\n            'https://gist.githubusercontent.com/iamsainikhil/4959bbe458ebf0c4bcbf7e24b4983c89/raw/170221bcd3d9732fec97210b9a67cd445e437481/urban_areas.json'\r\n          )\r\n          .then(response => response.data)\r\n        localStorage.setItem('urban-areas', JSON.stringify(urban_areas))\r\n      }\r\n\r\n      // use ipapi.co API instead of using browser's default geolocation API\r\n      // since cityName is important and cannot be fetched using browser geolocation API\r\n      this.fetchAddressInfo()\r\n    } catch (error) {\r\n      Sentry.captureException(error)\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))]\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddressInfo()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n\r\nAddressContext.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string\r\n}\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nexport class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false,\r\n    eventId: null\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    Sentry.withScope(scope => {\r\n      scope.setExtras(errorInfo)\r\n      const eventId = Sentry.captureException(error)\r\n      this.setState({eventId})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <div>\r\n            <ErrorComponent\r\n              errorMessage={'Something went wrong. Reload the page!'}\r\n            />\r\n            <button\r\n              className='font-semibold py-3 px-6 rounded-full capitalize'\r\n              onClick={() =>\r\n                Sentry.showReportDialog({eventId: this.state.eventId})\r\n              }>\r\n              Report feedback\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundaryContainer\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport * as Sentry from '@sentry/browser'\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\n/**\r\n * address is an object with cityName & cityId properties\r\n * @param {Object} address\r\n */\r\nconst getLatLongUrbanArea = async cityId => {\r\n  // defaults\r\n  let lat = ''\r\n  let long = ''\r\n  let name = ''\r\n  let slug = ''\r\n  let photos = []\r\n\r\n  // get lat, long, and name\r\n  await axios\r\n    .get(`https://api.teleport.org/api/cities/${cityId}`)\r\n    .then(async response => {\r\n      const {data} = response\r\n      if (!isEmpty(data) && !isUndefined(data)) {\r\n        const {latitude, longitude} = data.location.latlon\r\n        lat = latitude\r\n        long = longitude\r\n        if (data._links['city:urban_area']) {\r\n          name = data._links['city:urban_area'].name\r\n        }\r\n      }\r\n\r\n      // get slug and photos\r\n      if (localStorage.getItem('urban-areas') && name !== undefined) {\r\n        const urbanAreas = JSON.parse(localStorage.getItem('urban-areas'))\r\n        // get the value of the slug with the matched name in urbanAreas array\r\n        // i.e [{Washington, D.C.: \"washington-dc\"},...]\r\n        if (Object.keys(urbanAreas).includes(name)) {\r\n          slug = urbanAreas[name]\r\n          const {data} = await axios.get(\r\n            `https://api.teleport.org/api/urban_areas/slug:${slug}/images`\r\n          )\r\n          photos = !isEmpty(data) && !isUndefined(data) ? data.photos : []\r\n        }\r\n      }\r\n    })\r\n    .catch(err => Sentry.captureException(err))\r\n\r\n  return {\r\n    latlong: `${lat},${long}`,\r\n    urbanArea: {\r\n      name,\r\n      slug,\r\n      photos\r\n    }\r\n  }\r\n}\r\n\r\nexport default getLatLongUrbanArea\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst AddressComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <p\r\n      className={`px-5 py-1 cursor-pointer item text-${colorTheme} hover:text-${theme} hover:bg-${colorTheme}`}\r\n      onClick={props.addressSelected}>\r\n      {props.address.cityName}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AddressComponent\r\n\r\nAddressComponent.propTypes = {\r\n  addressSelected: PropTypes.func,\r\n  address: PropTypes.objectOf(PropTypes.string)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FiSearch} from 'react-icons/fi'\r\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\r\n\r\nconst IconComponent = ({type, color}) => {\r\n  const TYPES = {\r\n    search: <FiSearch />,\r\n    up: <IoIosArrowUp />,\r\n    down: <IoIosArrowDown />\r\n  }\r\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\r\n}\r\n\r\nconst SearchComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='h-12 mx-5 mt-5'>\r\n      <div className='relative'>\r\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\r\n          <IconComponent type='search' color={colorTheme} />\r\n        </div>\r\n        <input\r\n          style={{\r\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\r\n            letterSpacing: '0.05em'\r\n          }}\r\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-4 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\r\n          id='grid-first-name'\r\n          type='text'\r\n          placeholder='Type city name to find weather forecast'\r\n          onChange={props.citySearch}\r\n          value={props.city}\r\n        />\r\n        {props.showCaret && props.city.trim() ? (\r\n          <div\r\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\r\n            onClick={props.caretClicked}>\r\n            {props.showAddresses ? (\r\n              <IconComponent type='up' color={colorTheme} />\r\n            ) : (\r\n              <IconComponent type='down' color={colorTheme} />\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchComponent\r\n\r\nSearchComponent.propTypes = {\r\n  city: PropTypes.string,\r\n  cityName: PropTypes.string,\r\n  showCaret: PropTypes.bool,\r\n  showAddresses: PropTypes.bool,\r\n  caretClicked: PropTypes.func\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport debounce from 'lodash/debounce'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/address/AddressComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/search/SearchComponent'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport getLatLongUrbanArea from '../../utils/LatLongUrbanArea'\r\nimport * as Sentry from '@sentry/browser'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nclass AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    errorMessage: ''\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1000)\r\n\r\n  searchCity = event => {\r\n    this.setState({city: event.target.value})\r\n    if (event.target.value.trim()) {\r\n      this.setState({errorMessage: ''})\r\n      this.debounceAddress()\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    try {\r\n      this.setState({showLoader: true})\r\n      const {data} = await axios.get(\r\n        `https://api.teleport.org/api/cities/?search=${this.state.city}`\r\n      )\r\n\r\n      // populate addresses and show them if matching cities exist\r\n      if (!isEmpty(data) && !isUndefined(data) && data.count > 0) {\r\n        const results = data._embedded['city:search-results'].map(result => ({\r\n          cityName: result.matching_full_name,\r\n          cityId: result._links['city:item'].href.split('/')[5]\r\n        }))\r\n        // results is an array of `address` objects with cityName and cityId properties\r\n        this.setState({\r\n          addresses: results,\r\n          showCaret: true,\r\n          showAddresses: true,\r\n          errorMessage: ''\r\n        })\r\n      } else {\r\n        this.setState({showAddresses: false})\r\n        this.handleError(\r\n          'No matching cities found. Try searching with a valid city name!'\r\n        )\r\n      }\r\n    } catch (error) {\r\n      this.handleError(error)\r\n      Sentry.captureException(error)\r\n    } finally {\r\n      this.setState({showLoader: false})\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState, props) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = async address => {\r\n    if (address) {\r\n      // set city to just have cityName excluding state and country in the search input\r\n      // 'Herndon, Virginia, United States' -> 'Herndon'\r\n      this.setState({\r\n        city: address.cityName.split(',')[0],\r\n        showAddresses: false\r\n      })\r\n      // // track this cityName to GA\r\n      Event({\r\n        category: 'Address',\r\n        action: 'City Search',\r\n        label: address.cityName\r\n      })\r\n      // get latlong and urbanArea and update addressContext state for\r\n      // address, latlong, and urbanArea\r\n      const {latlong, urbanArea} = await getLatLongUrbanArea(address.cityId)\r\n      this.context.updateState({\r\n        address: address,\r\n        latlong: latlong,\r\n        urbanArea: urbanArea\r\n      })\r\n    }\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      errorMessage: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <div className='flex justify-center'>\r\n                <div className='w-5/6'>\r\n                  <ErrorComponent\r\n                    errorMessage={this.state.errorMessage}\r\n                    showCloseBtn={true}\r\n                    closeError={() => {\r\n                      this.setState({errorMessage: ''})\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteContainer\r\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport class HomeContainer extends Component {\r\n  static contextType = ThemeContext\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <WeatherUnitContextProvider>\r\n          <AddressContextProvider>\r\n            <AutoCompleteContainer />\r\n            <ErrorBoundaryContainer>\r\n              <Suspense\r\n                fallback={\r\n                  <LoaderComponent loaderText={'Loading components'} />\r\n                }>\r\n                <WeatherContainer />\r\n                <FavoritesContainer />\r\n              </Suspense>\r\n            </ErrorBoundaryContainer>\r\n          </AddressContextProvider>\r\n        </WeatherUnitContextProvider>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeContainer\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'F'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('F')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('F'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n"],"sourceRoot":""}