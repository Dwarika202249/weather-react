{"version":3,"sources":["components/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js"],"names":["imageOverlay","background","borderTopLeftRadius","borderTopRightRadius","FavoriteComponent","urbanArea","favorite","favoriteSelected","index","selectedIndex","useContext","ThemeContext","theme","colorTheme","className","imageExist","src","getImageDetails","image","web","alt","style","onClick","address","cityName","split","FavoritesContainer","favorites","AddressContext","useState","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","isLoading","setIsLoading","slideIndex","setSlideIndex","weatherRef","useRef","favoritesLength","validCityName","isEmpty","isUndefined","selectFavoriteHandler","emitGA","fetchWeatherData","a","async","Object","keys","length","FetchWeatherData","then","response","state","scrollHandler","catch","err","Sentry","finally","ref","window","scrollTo","current","offsetTop","useEffect","find","timer","setInterval","clearInterval","CarouselSettings","afterSlide","map","key","latlong","weatherCurrent","LoaderComponent","loaderText","ErrorComponent","errorMessage","CurrentWeatherContainer","ForecastContainer","weatherForecast","href","target","rel","slug","name"],"mappings":"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","file":"static/js/8.bfbcc2fc.chunk.js","sourcesContent":["import React, {useContext, Fragment} from 'react'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\n// get image details\r\nconst getImage = urbanArea => {\r\n  const {image} = getImageDetails(urbanArea)\r\n  return image\r\n}\r\nconst imageOverlay = {\r\n  background: 'rgba(0,0,0,0.55)',\r\n  borderTopLeftRadius: '1rem',\r\n  borderTopRightRadius: '1rem'\r\n}\r\n\r\nconst FavoriteComponent = ({\r\n  favorite,\r\n  favoriteSelected,\r\n  index,\r\n  selectedIndex\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='relative w-full h-16'>\r\n      {imageExist(favorite.urbanArea) ? (\r\n        <Fragment>\r\n          <img\r\n            src={getImage(favorite.urbanArea).web}\r\n            alt='city'\r\n            className='h-full w-full object-cover object-center rounded-2xl'\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n      <div\r\n        className={`${\r\n          imageExist(favorite.urbanArea)\r\n            ? `absolute top-0 left-0 right-0 bottom-0 text-light ${\r\n                index === selectedIndex\r\n                  ? 'sm:shadow-outline'\r\n                  : 'sm:outline-none'\r\n              }`\r\n            : `h-16 text-${colorTheme} bg-${theme} hover:bg-${colorTheme} hover:text-${theme} border ${\r\n                index === selectedIndex\r\n                  ? 'sm:border-teal-600'\r\n                  : `sm:border-${colorTheme}`\r\n              }`\r\n        } pt-5 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\r\n        style={imageExist(favorite.urbanArea) ? imageOverlay : null}\r\n        onClick={favoriteSelected}>\r\n        {favorite.address.cityName.split(', ')[0]}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FavoriteComponent\r\n\r\nFavoriteComponent.propTypes = {\r\n  favorite: PropTypes.object,\r\n  favoriteSelected: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number\r\n}\r\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport FetchWeatherData from './../../utils/FetchWeatherData'\r\nimport {isUndefined, isEmpty, find} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FavoriteComponent from '../../components/favorite/FavoriteComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport emitGA from '../../utils/MiscTrackEvents'\r\n\r\nconst FavoritesContainer = () => {\r\n  const {favorites} = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const [selectedFavorite, setSelectedFavorite] = useState({})\r\n  const [favoriteWeather, setFavoriteWeather] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [slideIndex, setSlideIndex] = useState(null)\r\n  const weatherRef = useRef(null)\r\n\r\n  // favorites data length\r\n  const favoritesLength = useRef(0)\r\n\r\n  // scroll to weather component when selectedFavorite is set\r\n  const scrollToRef = ref => window.scrollTo(0, ref.current.offsetTop)\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (!isEmpty(selectedFavorite) && !isUndefined(selectedFavorite)) {\r\n      return (\r\n        !isEmpty(selectedFavorite.address.cityName) &&\r\n        !isUndefined(selectedFavorite.address.cityName)\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const selectFavoriteHandler = index => {\r\n    if (favorites[index]) {\r\n      emitGA('favorites', favorites[index].address.cityName)\r\n      setSelectedFavorite({...favorites[index]})\r\n    }\r\n    setSlideIndex(index)\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (\r\n      !isUndefined(selectedFavorite) &&\r\n      Object.keys(selectedFavorite).length\r\n    ) {\r\n      setIsLoading(true)\r\n      await FetchWeatherData(selectedFavorite)\r\n        .then(response => {\r\n          // set favoriteWeather only when the data is non-empty\r\n          if (!isEmpty(response) && !isUndefined(response)) {\r\n            setFavoriteWeather(state => ({...state, ...response}))\r\n            scrollHandler()\r\n          }\r\n        })\r\n        .catch(err => Sentry.captureException(err))\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const scrollHandler = () => {\r\n    scrollToRef(weatherRef)\r\n  }\r\n\r\n  const favoritesChecker = () => {\r\n    // check for deleted selectedFavorite scenario\r\n    // i.e. selectedFavorite is not in the favorites\r\n    // to update it with the favorite at current slideIndex\r\n    if (!isEmpty(selectedFavorite) && !isUndefined(selectedFavorite)) {\r\n      if (\r\n        isUndefined(\r\n          find(\r\n            favorites,\r\n            favorite =>\r\n              favorite.address.cityName === selectedFavorite.address.cityName\r\n          )\r\n        )\r\n      ) {\r\n        selectFavoriteHandler(slideIndex)\r\n      } else {\r\n        // if favorites get updated\r\n        // i.e. a new favorite is added (favorites.length > favoritesLength)\r\n        // set selectedFavorite and slideIndex to the newly added favorite\r\n        // i.e. last favorite in favorites\r\n        if (favorites.length > favoritesLength.current) {\r\n          selectFavoriteHandler(favorites.length - 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    /* important edge case scenarios checker for deleted selectedFavorite & newly added favorite */\r\n    favoritesChecker()\r\n    // update favoritesLength\r\n    favoritesLength.current = favorites.length\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedFavorite, favorites])\r\n\r\n  return (\r\n    <Fragment>\r\n      {favorites.length > 0 ? (\r\n        <div className={`bg-${theme} pt-10 pb-24 mb-0`}>\r\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\r\n            Favorites\r\n          </p>\r\n          {/* mobile */}\r\n          <div className='sm:hidden px-5 py-5'>\r\n            <Carousel\r\n              {...CarouselSettings('favorite')}\r\n              slideIndex={slideIndex}\r\n              afterSlide={slideIndex => selectFavoriteHandler(slideIndex)}>\r\n              {favorites.map((favorite, index) => {\r\n                return (\r\n                  <FavoriteComponent\r\n                    key={favorite.latlong}\r\n                    favorite={favorite}\r\n                    index={index}\r\n                    selectedIndex={slideIndex}\r\n                    favoriteSelected={() => selectFavoriteHandler(index)}\r\n                  />\r\n                )\r\n              })}\r\n            </Carousel>\r\n          </div>\r\n          {/* tablet and above devices */}\r\n          <div className='hidden sm:flex justify-center items-center'>\r\n            <div className='sm:w-5/6 xl:max-w-6xl px-5 py-5'>\r\n              <div className='flex sm:flex-row flex-wrap justify-center'>\r\n                {favorites.map((favorite, index) => {\r\n                  return (\r\n                    <div\r\n                      className='m-2 sm:w-1/2 md:w-1/4'\r\n                      key={favorite.latlong}>\r\n                      <FavoriteComponent\r\n                        key={favorite.latlong}\r\n                        favorite={favorite}\r\n                        index={index}\r\n                        selectedIndex={slideIndex}\r\n                        favoriteSelected={() => selectFavoriteHandler(index)}\r\n                      />\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* \r\n            TODO: utilize weather container here instead of code repeat\r\n          */}\r\n          <div ref={weatherRef}>\r\n            {!isEmpty(favoriteWeather.weatherCurrent) &&\r\n            !isUndefined(favoriteWeather.weatherCurrent) ? (\r\n              <Fragment>\r\n                <div className='flex justify-center px-5 pt-10'>\r\n                  <div\r\n                    className={`sm:w-full lg:w-5/6 xl:max-w-6xl border border-${colorTheme} bg-{theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n                    <CurrentWeatherContainer\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      address={selectedFavorite.address}\r\n                      latlong={selectedFavorite.latlong}\r\n                      urbanArea={selectedFavorite.urbanArea}\r\n                    />\r\n                    <ForecastContainer\r\n                      cityName={selectedFavorite.address.cityName}\r\n                      weatherCurrent={favoriteWeather.weatherCurrent}\r\n                      weatherForecast={favoriteWeather.weatherForecast}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://darksky.net/poweredby/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`link z-0 font-medium hover:text-${theme}`}\r\n                    onClick={() => emitGA('powered-by', 'Dark Sky')}>\r\n                    Dark Sky\r\n                  </a>\r\n                </p>\r\n                <div className={`bg-${theme}`}>\r\n                  {selectedFavorite.urbanArea.slug ? (\r\n                    <div className='mx-auto text-center pb-5'>\r\n                      <p>\r\n                        <a\r\n                          href={`https://teleport.org/cities/${selectedFavorite.urbanArea.slug}`}\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className='hover:no-underline'\r\n                          onClick={() =>\r\n                            emitGA(\r\n                              'explore-life',\r\n                              selectedFavorite.urbanArea.name\r\n                            )\r\n                          }>\r\n                          <button\r\n                            className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}>\r\n                            Explore life in {selectedFavorite.urbanArea.name}\r\n                          </button>\r\n                        </a>\r\n                      </p>\r\n                      <p\r\n                        className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                        Powered by&nbsp;\r\n                        <a\r\n                          href='https://teleport.org/'\r\n                          target='_blank'\r\n                          rel='noreferrer noopener'\r\n                          className={`link z-0 font-medium hover:text-${theme}`}\r\n                          onClick={() => emitGA('powered-by', 'Teleport')}>\r\n                          Teleport\r\n                        </a>\r\n                      </p>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </Fragment>\r\n            ) : (\r\n              <Fragment>\r\n                {isLoading ? (\r\n                  <LoaderComponent\r\n                    loaderText={`Fetching weather forecast ${\r\n                      validCityName()\r\n                        ? `for ${selectedFavorite.address.cityName}`\r\n                        : ''\r\n                    } 😎`}\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {validCityName() ? (\r\n                      // show error component only when selectedFavorite cityName is valid\r\n                      // since by default on component load, selectedFavorite is empty\r\n                      // this extra check will hide error and show only when api call fetch fail for selectedFavorite\r\n                      <div className='flex justify-center'>\r\n                        <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                          <ErrorComponent\r\n                            errorMessage={`Something went wrong. Failed to fetch weather forecast ${\r\n                              validCityName()\r\n                                ? `for ${selectedFavorite.address.cityName}`\r\n                                : ''\r\n                            }! 😢`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default FavoritesContainer\r\n"],"sourceRoot":""}