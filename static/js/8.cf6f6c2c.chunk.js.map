{"version":3,"sources":["utils/ImageDetails.js","components/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js"],"names":["imageExist","urbanArea","isUndefined","photos","isEmpty","length","getImage","image","mobile","web","attribution","photographer","site","source","getImageDetails","imageOverlay","background","borderTopLeftRadius","borderTopRightRadius","FavoriteComponent","favorite","favoriteSelected","index","selectedIndex","useContext","ThemeContext","theme","colorTheme","className","src","alt","style","onClick","address","cityName","split","FavoritesContainer","favorites","AddressContext","useState","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","isLoading","setIsLoading","slideIndex","setSlideIndex","weatherRef","useRef","favoritesLength","validCityName","isNull","selectFavoriteHandler","emitGA","fetchWeatherData","a","async","Object","keys","FetchWeatherData","response","state","scrollHandler","Sentry","ref","window","scrollTo","current","offsetTop","useEffect","find","timer","setInterval","clearInterval","CarouselSettings","afterSlide","map","key","latlong","weatherCurrent","LoaderComponent","loaderText","ErrorComponent","errorMessage","WeatherForecastContainer","weatherForecast"],"mappings":"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","file":"static/js/8.cf6f6c2c.chunk.js","sourcesContent":["import {isUndefined, isEmpty} from 'lodash-es'\r\n\r\n// check if there any image exist for an urban area\r\nconst imageExist = urbanArea => {\r\n  return isUndefined(urbanArea.photos) && isEmpty(urbanArea.photos)\r\n    ? false\r\n    : urbanArea.photos.length > 0\r\n}\r\n\r\n/* sample urbanArea\r\n\"urbanArea\": {\r\n  \"name\": \"Christchurch\",\r\n  \"slug\": \"christchurch\",\r\n  \"photos\": [\r\n    {\r\n      \"attribution\": {\r\n        \"license\": \"Creative Commons Attribution-Share Alike 3.0 Unported\",\r\n        \"photographer\": \"P. Stalder\",\r\n        \"site\": \"Wikimedia Commons\",\r\n        \"source\": \"https://commons.wikimedia.org/wiki/File:Christchurch_City.jpg\"\r\n      },\r\n      \"image\": {\r\n        \"mobile\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch-0cf7c854fe.jpg\",\r\n        \"web\": \"https://d13k13wj6adfdf.cloudfront.net/urban_areas/christchurch_web-23e4656c2c.jpg\"\r\n      }\r\n    }\r\n  ]\r\n} */\r\n/**\r\n * @param {Object} urbanArea\r\n */\r\nconst getImageDetails = urbanArea => {\r\n  const {image} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0]\r\n    : {mobile: '', web: ''}\r\n  const {photographer, site, source} = imageExist(urbanArea)\r\n    ? urbanArea.photos[0].attribution\r\n    : {\r\n        photographer: '',\r\n        site: '',\r\n        source: ''\r\n      }\r\n\r\n  return {\r\n    image,\r\n    photographer,\r\n    site,\r\n    source\r\n  }\r\n}\r\n\r\nexport {imageExist, getImageDetails}\r\n","import React, {useContext, Fragment} from 'react'\r\nimport {imageExist, getImageDetails} from '../../utils/ImageDetails'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\n// get image details\r\nconst getImage = urbanArea => {\r\n  const {image} = getImageDetails(urbanArea)\r\n  return image\r\n}\r\nconst imageOverlay = {\r\n  background: 'rgba(0,0,0,0.7)',\r\n  borderTopLeftRadius: '1rem',\r\n  borderTopRightRadius: '1rem'\r\n}\r\n\r\nconst FavoriteComponent = ({\r\n  favorite,\r\n  favoriteSelected,\r\n  index,\r\n  selectedIndex\r\n}) => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='relative w-full h-16'>\r\n      {imageExist(favorite.urbanArea) ? (\r\n        <Fragment>\r\n          <img\r\n            src={getImage(favorite.urbanArea).web}\r\n            alt='city'\r\n            className='h-full w-full object-cover object-center rounded-2xl'\r\n          />\r\n        </Fragment>\r\n      ) : null}\r\n      <div\r\n        className={`${\r\n          imageExist(favorite.urbanArea)\r\n            ? `absolute top-0 left-0 right-0 bottom-0 text-light ${\r\n                index === selectedIndex\r\n                  ? 'sm:shadow-outline'\r\n                  : 'sm:outline-none'\r\n              }`\r\n            : `h-16 text-${colorTheme} bg-${theme} hover:bg-${colorTheme} hover:text-${theme} border ${\r\n                index === selectedIndex\r\n                  ? 'sm:border-teal-600'\r\n                  : `sm:border-${colorTheme}`\r\n              }`\r\n        } pt-5 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\r\n        style={imageExist(favorite.urbanArea) ? imageOverlay : null}\r\n        onClick={favoriteSelected}>\r\n        {favorite.address.cityName.split(', ')[0]}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FavoriteComponent\r\n\r\nFavoriteComponent.propTypes = {\r\n  favorite: PropTypes.object,\r\n  favoriteSelected: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number\r\n}\r\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from './../../utils/FetchWeatherData'\r\nimport {isUndefined, isEmpty, find, isNull} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FavoriteComponent from '../../components/favorite/FavoriteComponent'\r\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport emitGA from '../../utils/MiscTrackEvents'\r\n\r\nconst FavoritesContainer = () => {\r\n  const {favorites} = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const [selectedFavorite, setSelectedFavorite] = useState({})\r\n  const [favoriteWeather, setFavoriteWeather] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [slideIndex, setSlideIndex] = useState(null)\r\n  const weatherRef = useRef(null)\r\n\r\n  // favorites data length\r\n  const favoritesLength = useRef(0)\r\n\r\n  // scroll to weather component when selectedFavorite is set\r\n  const scrollToRef = ref => window.scrollTo(0, ref.current.offsetTop)\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (\r\n      !isEmpty(selectedFavorite) &&\r\n      !isUndefined(selectedFavorite) &&\r\n      !isNull(selectedFavorite)\r\n    ) {\r\n      const cityName = selectedFavorite.address.cityName\r\n      return (\r\n        !isEmpty(cityName) &&\r\n        !isUndefined(cityName) &&\r\n        cityName !== 'undefined, undefined, undefined'\r\n      )\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const selectFavoriteHandler = index => {\r\n    if (favorites[index]) {\r\n      emitGA('favorites', favorites[index].address.cityName)\r\n      setSelectedFavorite({...favorites[index]})\r\n    }\r\n    setSlideIndex(index)\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (\r\n      !isUndefined(selectedFavorite) &&\r\n      Object.keys(selectedFavorite).length\r\n    ) {\r\n      try {\r\n        setIsLoading(true)\r\n        const response = await FetchWeatherData(selectedFavorite)\r\n        // set favoriteWeather only when the data is non-empty\r\n        if (!isEmpty(response) && !isUndefined(response) && !isNull(response)) {\r\n          setFavoriteWeather(state => ({...state, ...response}))\r\n          scrollHandler()\r\n        }\r\n      } catch (err) {\r\n        Sentry.captureException(err)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const scrollHandler = () => {\r\n    scrollToRef(weatherRef)\r\n  }\r\n\r\n  const favoritesChecker = () => {\r\n    // check for deleted selectedFavorite scenario\r\n    // i.e. selectedFavorite is not in the favorites\r\n    // to update it with the favorite at current slideIndex\r\n    if (\r\n      !isEmpty(selectedFavorite) &&\r\n      !isUndefined(selectedFavorite) &&\r\n      !isNull(selectedFavorite)\r\n    ) {\r\n      if (\r\n        isUndefined(\r\n          find(\r\n            favorites,\r\n            favorite =>\r\n              favorite.address.cityName === selectedFavorite.address.cityName\r\n          )\r\n        )\r\n      ) {\r\n        selectFavoriteHandler(slideIndex)\r\n      } else {\r\n        // if favorites get updated\r\n        // i.e. a new favorite is added (favorites.length > favoritesLength)\r\n        // set selectedFavorite and slideIndex to the newly added favorite\r\n        // i.e. last favorite in favorites\r\n        if (favorites.length > favoritesLength.current) {\r\n          selectFavoriteHandler(favorites.length - 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    /* important edge case scenarios checker for deleted selectedFavorite & newly added favorite */\r\n    favoritesChecker()\r\n    // update favoritesLength\r\n    favoritesLength.current = favorites.length\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedFavorite, favorites])\r\n\r\n  return (\r\n    <Fragment>\r\n      {favorites.length > 0 ? (\r\n        <div className={`bg-${theme} pt-10 pb-24 mb-0`}>\r\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\r\n            Favorites\r\n          </p>\r\n          {/* mobile */}\r\n          <div className='sm:hidden px-5 py-5'>\r\n            <Carousel\r\n              {...CarouselSettings('favorite')}\r\n              slideIndex={slideIndex}\r\n              afterSlide={slideIndex => selectFavoriteHandler(slideIndex)}>\r\n              {favorites.map((favorite, index) => {\r\n                return (\r\n                  <FavoriteComponent\r\n                    key={favorite.latlong}\r\n                    favorite={favorite}\r\n                    index={index}\r\n                    selectedIndex={slideIndex}\r\n                    favoriteSelected={() => selectFavoriteHandler(index)}\r\n                  />\r\n                )\r\n              })}\r\n            </Carousel>\r\n          </div>\r\n          {/* tablet and above devices */}\r\n          <div className='hidden sm:flex justify-center items-center'>\r\n            <div className='sm:w-5/6 xl:max-w-6xl px-5 py-5'>\r\n              <div className='flex sm:flex-row flex-wrap justify-center'>\r\n                {favorites.map((favorite, index) => {\r\n                  return (\r\n                    <div\r\n                      className='m-2 sm:w-1/2 md:w-1/4'\r\n                      key={favorite.latlong}>\r\n                      <FavoriteComponent\r\n                        key={favorite.latlong}\r\n                        favorite={favorite}\r\n                        index={index}\r\n                        selectedIndex={slideIndex}\r\n                        favoriteSelected={() => selectFavoriteHandler(index)}\r\n                      />\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* \r\n            TODO: utilize weather container here instead of code repeat\r\n          */}\r\n          <div ref={weatherRef}>\r\n            {!isEmpty(favoriteWeather.weatherCurrent) &&\r\n            !isUndefined(favoriteWeather.weatherCurrent) &&\r\n            !isNull(favoriteWeather.weatherCurrent) ? (\r\n              <WeatherForecastContainer\r\n                weatherCurrent={favoriteWeather.weatherCurrent}\r\n                weatherForecast={favoriteWeather.weatherForecast}\r\n                address={selectedFavorite.address}\r\n                latlong={selectedFavorite.latlong}\r\n                urbanArea={selectedFavorite.urbanArea}\r\n              />\r\n            ) : (\r\n              <Fragment>\r\n                {isLoading ? (\r\n                  <LoaderComponent\r\n                    loaderText={`Fetching weather forecast ${\r\n                      validCityName()\r\n                        ? `for ${selectedFavorite.address.cityName}`\r\n                        : ''\r\n                    } 😎`}\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {validCityName() ? (\r\n                      // show error component only when selectedFavorite cityName is valid\r\n                      // since by default on component load, selectedFavorite is empty\r\n                      // this extra check will hide error and show only when api call fetch fail for selectedFavorite\r\n                      <div className='flex justify-center'>\r\n                        <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                          <ErrorComponent\r\n                            errorMessage={`Something went wrong. Failed to fetch weather forecast ${\r\n                              validCityName()\r\n                                ? `for ${selectedFavorite.address.cityName}`\r\n                                : ''\r\n                            }! 😢`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default FavoritesContainer\r\n"],"sourceRoot":""}