{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","ThemeContext","theme","colorTheme","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","isLoading","setIsLoading","validCityName","isEmpty","address","isUndefined","cityName","fetchWeatherData","a","async","FetchWeatherData","then","response","current","forecast","catch","err","Sentry","finally","useEffect","timer","setInterval","clearInterval","loaderText","className","errorMessage","latlong","urbanArea","href","target","rel","onClick","emitGA","slug","name"],"mappings":"sQAyKeA,UA7JU,WACvB,IAAMC,EAAiBC,qBAAWC,KADL,EAEDD,qBAAWE,KAAhCC,EAFsB,EAEtBA,MAAOC,EAFe,EAEfA,WAFe,EAIiBC,mBAAS,IAJ1B,mBAItBC,EAJsB,KAILC,EAJK,OAKeF,mBAAS,IALxB,mBAKtBG,EALsB,KAKNC,EALM,OAMKJ,oBAAS,GANd,mBAMtBK,EANsB,KAMXC,EANW,KASvBC,EAAgB,WACpB,OACGC,YAAQd,EAAee,WACvBC,YAAYhB,EAAee,YAGzBD,YAAQd,EAAee,QAAQE,YAC/BD,YAAYhB,EAAee,QAAQE,YAapCC,EAAmB,oBAAAC,EAAAC,OAAA,uDACvBR,GAAa,GADU,WAAAO,EAAA,MAEjBE,YAAiBrB,GACpBsB,MAAK,SAAAC,GAAa,IAVCC,EAASC,EAWpBhB,EAAmCc,EAAnCd,eAAgBF,EAAmBgB,EAAnBhB,gBAXLiB,EAcHf,EAdYgB,EAcIlB,EAb9BO,YAAQU,IAAaV,YAAQW,KAChCf,EAAkBc,GAClBhB,EAAmBiB,OAalBC,OAAM,SAAAC,GACLC,IAAwBD,MAEzBE,SAAQ,WACPjB,GAAa,OAbM,sCA6BzB,OAZAkB,qBAAU,WACRZ,IACA,IAAMa,EAAQC,aAAY,WACxBd,MACC,MAEH,OAAO,WACLe,cAAcF,MAGf,CAAC/B,IAGF,kBAAC,WAAD,KACIgB,YAAYP,IAAoBK,YAAQL,GAgExC,kBAAC,WAAD,KACGE,EACC,kBAAC,IAAD,CACEuB,WAAU,oCACRrB,IAAa,cAAYb,EAAee,QAAQE,UAAa,GADrD,mBAKZ,6BACGJ,IAIC,yBAAKsB,UAAU,uBACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEC,aAAY,iEACVvB,IAAa,cACFb,EAAee,QAAQE,UAC9B,GAHM,sBAQhB,OAvFV,kBAAC,WAAD,KACE,yBAAKkB,UAAS,4CAAuC/B,IACnD,yBACE+B,UAAS,wDAAmD9B,EAAnD,eAAoED,EAApE,iBAAkFC,EAAlF,6BACT,kBAAC,IAAD,CACEI,eAAgBA,EAChBM,QAASf,EAAee,QACxBsB,QAASrC,EAAeqC,QACxBC,UAAWtC,EAAesC,YAE5B,kBAAC,IAAD,CACErB,SAAUjB,EAAee,QAAQE,SACjCR,eAAgBA,EAChBF,gBAAiBA,MAIvB,uBACE4B,UAAS,iEAA4D9B,EAA5D,eAA6ED,IADxF,iBAGE,uBACEmC,KAAK,iCACLC,OAAO,SACPC,IAAI,sBACJN,UAAS,0CAAqC/B,GAC9CsC,QAAS,kBAAMC,YAAO,aAAc,cALtC,aASF,yBAAKR,UAAS,aAAQ/B,IACnBJ,EAAesC,UAAUM,KACxB,yBAAKT,UAAS,4BACZ,2BACE,uBACEI,KAAI,sCAAiCvC,EAAesC,UAAUM,MAC9DJ,OAAO,SACPC,IAAI,sBACJN,UAAU,qBACVO,QAAS,kBACPC,YAAO,eAAgB3C,EAAesC,UAAUO,QAElD,4BACEV,UAAS,aAAQ9B,EAAR,iBAA2BD,EAA3B,qDADX,mBAEmBJ,EAAesC,UAAUO,QAIhD,uBAAGV,UAAS,uCAAkC9B,IAA9C,iBAEE,uBACEkC,KAAK,wBACLC,OAAO,SACPC,IAAI,sBACJN,UAAS,0CAAqC/B,GAC9CsC,QAAS,kBAAMC,YAAO,aAAc,cALtC,cAUF","file":"static/js/9.874c77c3.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, Fragment} from 'react'\r\nimport ForecastContainer from '../forecast/ForecastContainer'\r\nimport CurrentWeatherContainer from '../current-weather/CurrentWeatherContainer'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport emitGA from '../../utils/MiscTrackEvents'\r\n\r\nconst WeatherContainer = () => {\r\n  const addressContext = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const [weatherForecast, setWeatherForecast] = useState({})\r\n  const [weatherCurrent, setWeatherCurrent] = useState({})\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (\r\n      !isEmpty(addressContext.address) &&\r\n      !isUndefined(addressContext.address)\r\n    ) {\r\n      return (\r\n        !isEmpty(addressContext.address.cityName) &&\r\n        !isUndefined(addressContext.address.cityName)\r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  const setWeatherData = (current, forecast) => {\r\n    if (!isEmpty(current) && !isEmpty(forecast)) {\r\n      setWeatherCurrent(current)\r\n      setWeatherForecast(forecast)\r\n    }\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    setIsLoading(true)\r\n    await FetchWeatherData(addressContext)\r\n      .then(response => {\r\n        const {weatherCurrent, weatherForecast} = response\r\n        // set the weatherCurrent and weatherForecast only when the data is non-empty\r\n        // this way, the old fetched data can be preserved when api call fail or limit exceed\r\n        setWeatherData(weatherCurrent, weatherForecast)\r\n      })\r\n      .catch(err => {\r\n        Sentry.captureException(err)\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [addressContext])\r\n\r\n  return (\r\n    <Fragment>\r\n      {!isUndefined(weatherCurrent) && !isEmpty(weatherCurrent) ? (\r\n        <Fragment>\r\n          <div className={`flex justify-center px-5 pt-10 bg-${theme}`}>\r\n            <div\r\n              className={`sm:w-full lg:w-5/6 xl:max-w-6xl border border-${colorTheme} bg-${theme} text-${colorTheme} rounded-t-2xl shadow-lg`}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={addressContext.address}\r\n                latlong={addressContext.latlong}\r\n                urbanArea={addressContext.urbanArea}\r\n              />\r\n              <ForecastContainer\r\n                cityName={addressContext.address.cityName}\r\n                weatherCurrent={weatherCurrent}\r\n                weatherForecast={weatherForecast}\r\n              />\r\n            </div>\r\n          </div>\r\n          <p\r\n            className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n            Powered by&nbsp;\r\n            <a\r\n              href='https://darksky.net/poweredby/'\r\n              target='_blank'\r\n              rel='noreferrer noopener'\r\n              className={`link z-0 font-medium hover:text-${theme}`}\r\n              onClick={() => emitGA('powered-by', 'Dark Sky')}>\r\n              Dark Sky\r\n            </a>\r\n          </p>\r\n          <div className={`bg-${theme}`}>\r\n            {addressContext.urbanArea.slug ? (\r\n              <div className={`mx-auto text-center pb-5`}>\r\n                <p>\r\n                  <a\r\n                    href={`https://teleport.org/cities/${addressContext.urbanArea.slug}`}\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className='hover:no-underline'\r\n                    onClick={() =>\r\n                      emitGA('explore-life', addressContext.urbanArea.name)\r\n                    }>\r\n                    <button\r\n                      className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}>\r\n                      Explore life in {addressContext.urbanArea.name}\r\n                    </button>\r\n                  </a>\r\n                </p>\r\n                <p className={`py-1 text-xs font-light text-${colorTheme}`}>\r\n                  Powered by&nbsp;\r\n                  <a\r\n                    href='https://teleport.org/'\r\n                    target='_blank'\r\n                    rel='noreferrer noopener'\r\n                    className={`link z-0 font-medium hover:text-${theme}`}\r\n                    onClick={() => emitGA('powered-by', 'Teleport')}>\r\n                    Teleport\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          {isLoading ? (\r\n            <LoaderComponent\r\n              loaderText={`Fetching weather forecast ${\r\n                validCityName() ? `for ${addressContext.address.cityName}` : ''\r\n              } ðŸ˜Ž`}\r\n            />\r\n          ) : (\r\n            <div>\r\n              {validCityName() ? (\r\n                // show error component only when addressContext cityName is valid\r\n                // since by default on component load, addressContext address is empty\r\n                // this extra check will hide error and show only when api call fetch fail for fetching weatherData\r\n                <div className='flex justify-center'>\r\n                  <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                    <ErrorComponent\r\n                      errorMessage={`Something went wrong. Failed to fetch weather forecast ${\r\n                        validCityName()\r\n                          ? `for ${addressContext.address.cityName}`\r\n                          : ''\r\n                      }! ðŸ˜¢`}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherContainer\r\n"],"sourceRoot":""}