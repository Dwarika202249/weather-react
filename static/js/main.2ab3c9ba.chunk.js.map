{"version":3,"sources":["components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","components/icon/IconComponent.js","components/header/HeaderComponent.js","containers/home/HomeContainer.js","App.js","serviceWorker.js","index.js","components/loader/LoaderComponent.js","context/AddressContext.js","components/error/ErrorComponent.js","context/WeatherUnitContext.js","containers/error-boundary/ErrorBoundaryContainer.js","context/ThemeContext.js"],"names":["AddressComponent","props","useContext","ThemeContext","theme","colorTheme","className","onClick","addressSelected","address","cityName","SearchComponent","src","alt","id","type","placeholder","onChange","citySearch","value","city","showCaret","trim","caretClicked","showAddresses","AutoCompleteContainer","state","showLoader","addresses","errorMessage","debounceAddress","debounce","getAddresses","searchCity","event","setState","target","clearState","toggleAddresses","prevState","setCity","getLatLong","message","this","axios","get","data","isEmpty","isUndefined","count","handleError","results","_embedded","map","result","matching_full_name","cityId","_links","href","split","lat","long","name","slug","photos","location","latlon","latitude","longitude","localStorage","getItem","undefined","urbanAreas","JSON","parse","Object","keys","includes","context","updateState","latlong","urbanArea","LoaderComponent","index","key","length","ErrorComponent","showCloseBtn","closeError","Component","contextType","AddressContext","IconComponent","iconType","HeaderComponent","toggleTheme","checked","icons","unchecked","WeatherContainer","lazy","FavoritesContainer","HomeContainer","WeatherUnitContext","ErrorBoundaryContainer","fallback","loaderText","App","basename","path","exact","component","Boolean","window","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","React","createContext","AddressContextProvider","updateFavorites","favorites","fetchAddressInfo","a","async","region","country_name","getFavorites","response","urban_areas","setItem","stringify","console","log","getAddressInfo","Provider","children","propTypes","PropTypes","objectOf","string","role","xmlns","viewBox","d","weatherUnit","WeatherUnitContextProvider","useState","setWeatherUnit","useEffect","updateWeatherUnit","unit","hasError","error","errorInfo","ThemeContextProvider","setTheme","hour","dayjs","format","daynightChecker"],"mappings":"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","file":"static/js/main.2ab3c9ba.chunk.js","sourcesContent":["import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst AddressComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <p\r\n      className={`px-5 py-1 cursor-pointer item text-${colorTheme} hover:text-${theme} hover:bg-${colorTheme}`}\r\n      onClick={props.addressSelected}>\r\n      {props.address.cityName}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AddressComponent\r\n","import React from 'react'\r\n\r\nconst SearchComponent = props => {\r\n  return (\r\n    <div className='h-12 mx-5 mt-5'>\r\n      <div className='relative'>\r\n        <div className='absolute top-0 left-0 ml-4 mt-4'>\r\n          <img\r\n            src='./city-weather-search.svg'\r\n            alt='city search'\r\n            className='h-6 object-contain object-center'\r\n          />\r\n        </div>\r\n        <input\r\n          className={`block appearance-none w-full bg-gray-300 border-none rounded-full shadow py-3 pl-12 pr-4 mb-3 leading-tight focus:outline-none focus:bg-light truncate`}\r\n          id='grid-first-name'\r\n          type='text'\r\n          placeholder='Type city name to find weather forecast'\r\n          onChange={props.citySearch}\r\n          value={props.city}\r\n        />\r\n        {props.showCaret && props.city.trim() ? (\r\n          <div\r\n            className='flex right-0 absolute top-0 mr-4 mt-4 cursor-pointer'\r\n            onClick={props.caretClicked}>\r\n            {props.showAddresses ? (\r\n              <img\r\n                src='./up-arrow.svg'\r\n                alt='arrow-up'\r\n                className='h-4 object-contain object-center'\r\n              />\r\n            ) : (\r\n              <img\r\n                src='./down-arrow.svg'\r\n                alt='arrow-down'\r\n                className='h-4 object-contain object-center'\r\n              />\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchComponent\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport debounce from 'lodash/debounce'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/address/AddressComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/search/SearchComponent'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\n\r\nclass AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    errorMessage: ''\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1000)\r\n\r\n  searchCity = event => {\r\n    this.setState({city: event.target.value})\r\n    if (event.target.value.trim()) {\r\n      this.setState({errorMessage: ''})\r\n      this.debounceAddress()\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    try {\r\n      this.setState({showLoader: true})\r\n      const {data} = await axios.get(\r\n        `https://api.teleport.org/api/cities/?search=${this.state.city}`\r\n      )\r\n\r\n      // if matching cities exist\r\n      if (!isEmpty(data) && !isUndefined(data) && data.count) {\r\n        const results = data._embedded['city:search-results'].map(result => ({\r\n          cityName: result.matching_full_name,\r\n          cityId: result._links['city:item'].href.split('/')[5]\r\n        }))\r\n        // results is an array of `address` objects with cityName and cityId properties\r\n        this.setState({\r\n          addresses: results,\r\n          showCaret: true,\r\n          showAddresses: true,\r\n          errorMessage: ''\r\n        })\r\n      } else {\r\n        this.setState({showAddresses: false})\r\n        this.handleError(\r\n          'No matching cities found. Try searching with a valid city name!'\r\n        )\r\n      }\r\n    } catch (error) {\r\n      this.handleError(error)\r\n    } finally {\r\n      this.setState({showLoader: false})\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState, props) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = address => {\r\n    if (address) {\r\n      this.setState({\r\n        city: address.cityName,\r\n        showAddresses: false\r\n      })\r\n      this.getLatLong(address)\r\n    }\r\n  }\r\n\r\n  async getLatLong(address) {\r\n    // defaults\r\n    let lat = ''\r\n    let long = ''\r\n    let name = ''\r\n    let slug = ''\r\n    let photos = []\r\n\r\n    // get lat, long, and name\r\n    const {data} = await axios.get(\r\n      `https://api.teleport.org/api/cities/${address.cityId}`\r\n    )\r\n\r\n    if (!isEmpty(data) && !isUndefined(data)) {\r\n      const {latitude, longitude} = data.location.latlon\r\n      lat = latitude\r\n      long = longitude\r\n      if (data._links['city:urban_area']) {\r\n        name = data._links['city:urban_area'].name\r\n      }\r\n    }\r\n\r\n    // get slug and photos\r\n    if (localStorage.getItem('urban-areas') && name !== undefined) {\r\n      const urbanAreas = JSON.parse(localStorage.getItem('urban-areas'))\r\n      if (Object.keys(urbanAreas).includes(name)) {\r\n        slug = urbanAreas[name]\r\n        const {data} = await axios.get(\r\n          `https://api.teleport.org/api/urban_areas/slug:${slug}/images`\r\n        )\r\n        photos = !isEmpty(data) && !isUndefined(data) ? data.photos : []\r\n      }\r\n    }\r\n\r\n    this.context.updateState({\r\n      address: address,\r\n      latlong: `${lat},${long}`,\r\n      urbanArea: {\r\n        name,\r\n        slug,\r\n        photos\r\n      }\r\n    })\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      errorMessage: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:w-1/2'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:w-1/2'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <ErrorComponent\r\n                errorMessage={this.state.errorMessage}\r\n                showCloseBtn={true}\r\n                closeError={() => {\r\n                  this.setState({errorMessage: ''})\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteContainer\r\n","import React from 'react'\r\n\r\nconst IconComponent = ({iconType}) => {\r\n  return (\r\n    <div>\r\n      {iconType === 'light' ? (\r\n        <img src='./sun.svg' alt='Light' />\r\n      ) : (\r\n        <img src='./moon.svg' alt='Dark' />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IconComponent\r\n","import React, {useContext} from 'react'\r\nimport Toggle from 'react-toggle'\r\nimport './ReactToggle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport IconComponent from '../icon/IconComponent'\r\n\r\nconst HeaderComponent = () => {\r\n  const {theme, toggleTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='flex justify-between items-center px-5 py-5'>\r\n      <div>\r\n        <img\r\n          src='./logo.png'\r\n          alt='Logo'\r\n          className='h-12 w-12 object-contain object-center'\r\n        />\r\n      </div>\r\n      <div>\r\n        <Toggle\r\n          checked={theme === 'light'}\r\n          icons={{\r\n            checked: <IconComponent iconType={'light'} />,\r\n            unchecked: <IconComponent iconType={'dark'} />\r\n          }}\r\n          onChange={toggleTheme}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderComponent\r\n","import React, {Component, Suspense, lazy} from 'react'\r\nimport './HomeStyle.scss'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport HeaderComponent from '../../components/header/HeaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport class HomeContainer extends Component {\r\n  static contextType = ThemeContext\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`bg-${this.context.theme} absolute top-0 right-0 bottom-0 left-0 tracking-wide`}>\r\n        <WeatherUnitContextProvider>\r\n          <HeaderComponent />\r\n          <AddressContextProvider>\r\n            <AutoCompleteContainer />\r\n            <ErrorBoundaryContainer>\r\n              <Suspense\r\n                fallback={\r\n                  <LoaderComponent loaderText={'Loading components'} />\r\n                }>\r\n                <WeatherContainer />\r\n                <FavoritesContainer />\r\n              </Suspense>\r\n            </ErrorBoundaryContainer>\r\n          </AddressContextProvider>\r\n        </WeatherUnitContextProvider>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeContainer\r\n","import React from 'react'\r\nimport {Switch, BrowserRouter, Route} from 'react-router-dom'\r\nimport HomeContainer from './containers/home/HomeContainer'\r\nimport {ThemeContextProvider} from './context/ThemeContext'\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContextProvider>\r\n      <Switch>\r\n        <BrowserRouter basename='/weather-react'>\r\n          <Route path='/' exact component={HomeContainer}></Route>\r\n        </BrowserRouter>\r\n      </Switch>\r\n      {/* <HomeContainer /> */}\r\n    </ThemeContextProvider>\r\n  )\r\n}\r\n\r\n// function Dummy() {\r\n//   return (\r\n//     <div\r\n//       className='bg-teal-100 border-t-4 border-teal-500 rounded-b\r\n//         text-teal-900 px-4 py-3 shadow-md'\r\n//       role='alert'>\r\n//       <div className='flex'>\r\n//         <div className='py-1'>\r\n//           <svg\r\n//             className='fill-current h-6 w-6 text-teal-500 mr-4'\r\n//             xmlns='http://www.w3.org/2000/svg'\r\n//             viewBox='0 0 20 20'>\r\n//             <path d='M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z' />\r\n//           </svg>\r\n//         </div>\r\n//         <div>\r\n//           <p className='font-semibold'>\r\n//             Weather Application development in progress...\r\n//           </p>\r\n//           <p className='text-sm'>The development setup is almost done.</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport './styles/main.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst app = (\r\n  <Router>\r\n    <App />\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import React, {useContext} from 'react'\r\nimport './LoaderStyle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst LoaderComponent = ({loaderText}) => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='flex flex-col w-full justify-center items-center'>\r\n      <div className='spinner'>\r\n        <div className='double-bounce1'></div>\r\n        <div className='double-bounce2'></div>\r\n      </div>\r\n      {loaderText && (\r\n        <div\r\n          className={`text-sm font-light text-${\r\n            theme === 'light' ? 'dark' : 'light'\r\n          }`}>\r\n          {loaderText}\r\n          <span className='text-2xl text-fade'>...</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoaderComponent\r\n","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport {PropTypes} from 'prop-types'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\nclass AddressContextProvider extends Component {\r\n  updateState = state => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = state => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    address: {\r\n      cityName: '',\r\n      cityId: ''\r\n    },\r\n    urbanArea: {\r\n      name: '',\r\n      slug: '',\r\n      photos: []\r\n    },\r\n    latlong: '',\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites\r\n  }\r\n\r\n  fetchAddressInfo = async () => {\r\n    const {data} = await axios.get('https://ipapi.co/json')\r\n\r\n    if (!isEmpty(data) && !isUndefined(data)) {\r\n      this.updateState({\r\n        address: {\r\n          cityName: `${data.city}, ${data.region}, ${data.country_name}`,\r\n          cityId: ''\r\n        },\r\n        latlong: `${data.latitude},${data.longitude}`\r\n      })\r\n    }\r\n  }\r\n\r\n  async getAddressInfo() {\r\n    try {\r\n      // use ipapi.co API instead of using browser's default geolocation API\r\n      // since cityName is important and cannot be fetched using browser geolocation API\r\n      this.fetchAddressInfo()\r\n\r\n      // fetch and store urban areas list in localStorage\r\n      if (!localStorage.getItem('urban-areas')) {\r\n        const urban_areas = await axios\r\n          .get(\r\n            'https://gist.githubusercontent.com/iamsainikhil/4959bbe458ebf0c4bcbf7e24b4983c89/raw/170221bcd3d9732fec97210b9a67cd445e437481/urban_areas.json'\r\n          )\r\n          .then(response => response.data)\r\n        localStorage.setItem('urban-areas', JSON.stringify(urban_areas))\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))]\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddressInfo()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n\r\nAddressContext.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst ErrorComponent = props => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className={`w-5/6 ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n      role='alert'>\r\n      <span className='w-5/6 block break-words'>{props.errorMessage}</span>\r\n      {props.showCloseBtn && (\r\n        <span\r\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1 py-3'\r\n          onClick={props.closeError}>\r\n          <svg\r\n            className='fill-current h-6 w-6 text-red-500'\r\n            role='button'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\r\n          </svg>\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'F'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('F')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('F'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\n\r\nexport class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(error, errorInfo)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <ErrorComponent errorMessage={'Something went wrong.'} />\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundaryContainer\r\n","import React, {useState, useEffect} from 'react'\r\nimport dayjs from 'dayjs'\r\n\r\nconst ThemeContext = React.createContext({\r\n  theme: 'light',\r\n  toggleTheme: () => {}\r\n})\r\n\r\nconst ThemeContextProvider = ({children}) => {\r\n  const [theme, setTheme] = useState('light')\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'light' ? 'dark' : 'light')\r\n  }\r\n\r\n  const colorTheme = theme === 'light' ? 'dark' : 'light'\r\n\r\n  const daynightChecker = () => {\r\n    const hour = dayjs().format('H')\r\n    if (hour >= 6 && hour < 18) {\r\n      setTheme('light')\r\n    } else {\r\n      setTheme('dark')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // set theme based on the time on initial application load only\r\n    daynightChecker()\r\n  }, [])\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{theme, colorTheme, toggleTheme}}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport {ThemeContext, ThemeContextProvider}\r\n"],"sourceRoot":""}