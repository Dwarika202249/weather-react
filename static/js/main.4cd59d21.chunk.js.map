{"version":3,"sources":["context/ThemeContext.js","utils/ReactAnalytics.js","components/loader/LoaderComponent.js","components/icon/IconComponent.js","components/header/HeaderComponent.js","components/footer/FooterComponent.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","theme","toggleTheme","ThemeContextProvider","children","useState","setTheme","colorTheme","saveThemePreference","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","hour","moment","format","daynightChecker","Provider","value","selectedTheme","Event","category","action","label","emitGA","Timing","variable","ReactGA","timing","event","LoaderComponent","loaderText","useContext","className","IconComponent","iconType","HeaderComponent","to","src","alt","isEmpty","checked","icons","unchecked","onChange","FooterComponent","style","backgroundColor","href","target","rel","onClick","title","role","aria-label","HomeContainer","lazy","PrivacyPolicyComponent","initialize","App","PerformanceObserver","list","getEntries","forEach","entry","responseStart","requestStart","responseEnd","observe","entryTypes","fallback","path","exact","component","Boolean","window","location","hostname","match","Sentry","dsn","process","app","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cd59d21.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport moment from 'moment-timezone'\r\nimport {Event} from '../utils/ReactAnalytics'\r\n\r\nconst ThemeContext = React.createContext({\r\n  theme: 'light',\r\n  toggleTheme: () => {}\r\n})\r\n\r\n// track theme toggles to GA\r\nconst emitGA = theme => {\r\n  Event({\r\n    category: 'Theme',\r\n    action: 'Toggle Theme',\r\n    label: theme\r\n  })\r\n}\r\n\r\nconst ThemeContextProvider = ({children}) => {\r\n  const [theme, setTheme] = useState('')\r\n  const colorTheme = theme === 'light' ? 'dark' : 'light'\r\n\r\n  const toggleTheme = () => {\r\n    const selectedTheme = theme === 'light' ? 'dark' : 'light'\r\n    emitGA(selectedTheme)\r\n    setTheme(selectedTheme)\r\n    saveThemePreference(selectedTheme)\r\n  }\r\n\r\n  const saveThemePreference = theme => {\r\n    localStorage.setItem('theme', JSON.stringify(theme))\r\n  }\r\n\r\n  const daynightChecker = () => {\r\n    const hour = moment().format('H')\r\n    if (hour >= 6 && hour < 18) {\r\n      setTheme('light')\r\n      saveThemePreference('light')\r\n    } else {\r\n      setTheme('dark')\r\n      saveThemePreference('dark')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // set theme based on the time on initial application load and\r\n    // when there is no theme preference in the localStorage\r\n    if (!localStorage.getItem('theme')) {\r\n      daynightChecker()\r\n    } else {\r\n      setTheme(JSON.parse(localStorage.getItem('theme')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{theme, colorTheme, toggleTheme}}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport {ThemeContext, ThemeContextProvider}\r\n","import ReactGA from 'react-ga'\r\n\r\nexport const Timing = ({variable, value, label}) => {\r\n  ReactGA.timing({\r\n    category: 'Load Performance',\r\n    variable,\r\n    value,\r\n    label\r\n  })\r\n}\r\n\r\nexport const Event = ({category, action, label}) => {\r\n  ReactGA.event({\r\n    category,\r\n    action,\r\n    label\r\n  })\r\n}\r\n\r\nexport const pageView = ({path}) => {\r\n  ReactGA.pageView(path)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport './LoaderStyle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst LoaderComponent = ({loaderText}) => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='flex flex-col w-full justify-center items-center'>\r\n      <div className='spinner'>\r\n        <div className='double-bounce1'></div>\r\n        <div className='double-bounce2'></div>\r\n      </div>\r\n      {loaderText && (\r\n        <div\r\n          className={`mx-auto text-center text-sm font-light text-${\r\n            theme === 'light' ? 'dark' : 'light'\r\n          }`}>\r\n          {loaderText}\r\n          <span className='text-2xl text-fade'>...</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoaderComponent\r\n\r\nLoaderComponent.propTypes = {\r\n  loaderText: PropTypes.string\r\n}\r\n","import React from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FaSun, FaMoon} from 'react-icons/fa'\r\n\r\nconst IconComponent = ({iconType}) => {\r\n  return (\r\n    <div>\r\n      {iconType === 'light' ? (\r\n        <p className='text-toggle'>\r\n          <FaSun />\r\n        </p>\r\n      ) : (\r\n        <p className='text-toggle'>\r\n          <FaMoon />\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IconComponent\r\n\r\nIconComponent.propTypes = {\r\n  iconType: PropTypes.string\r\n}\r\n","import React, {useContext} from 'react'\r\nimport Toggle from 'react-toggle'\r\nimport './ReactToggle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport IconComponent from '../icon/IconComponent'\r\nimport {Link} from 'react-router-dom'\r\nimport {isEmpty} from 'lodash-es'\r\n\r\nconst HeaderComponent = () => {\r\n  const {theme, toggleTheme} = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div className='flex justify-between items-center px-5 py-5'>\r\n      <div>\r\n        <Link to='/'>\r\n          <img\r\n            src='./logo.png'\r\n            alt='Logo'\r\n            className='h-12 w-12 object-contain object-center cursor-pointer'\r\n          />\r\n        </Link>\r\n      </div>\r\n      <div>\r\n        {/* below condition to avoid toggle glitch effect on page refresh */}\r\n        {!isEmpty(theme) ? (\r\n          <Toggle\r\n            checked={theme === 'light'}\r\n            icons={{\r\n              checked: <IconComponent iconType={'light'} />,\r\n              unchecked: <IconComponent iconType={'dark'} />\r\n            }}\r\n            onChange={toggleTheme}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderComponent\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport moment from 'moment-timezone'\r\nimport {Link} from 'react-router-dom'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaReact} from 'react-icons/fa'\r\n\r\nconst FooterComponent = () => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const emitGA = (action, label) => {\r\n    Event({\r\n      category: 'Footer Links',\r\n      action,\r\n      label\r\n    })\r\n  }\r\n  return (\r\n    <div\r\n      className={`text-${colorTheme} pb-3`}\r\n      style={{\r\n        backgroundColor: theme === 'dark' ? '#292929' : '#e8ebee'\r\n      }}>\r\n      <div\r\n        className={`flex flex-col text-center sm:flex sm:flex-row justify-around p-5 text-${colorTheme} text-sm`}>\r\n        <p className='my-2 sm:my-0 w-full sm:w-1/3'>\r\n          <a\r\n            href='https://github.com/iamsainikhil/weather-react/'\r\n            target='_blank'\r\n            rel='noreferrer noopener'\r\n            className={`link z-0 hover:text-${theme}`}\r\n            onClick={() => emitGA('Visit GitHub', 'GitHub Link')}>\r\n            GitHub\r\n          </a>\r\n        </p>\r\n        <p className='flex flex-no-wrap justify-center my-2 sm:my-0 w-full sm:w-1/2'>\r\n          Made with&nbsp;\r\n          <span title='Love' role='img' aria-label='Love' className='text-lg'>\r\n            ❤️\r\n          </span>\r\n          &nbsp;using&nbsp;\r\n          <span\r\n            title='React'\r\n            role='img'\r\n            aria-label='React'\r\n            className='text-lg text-react'>\r\n            <FaReact />\r\n          </span>\r\n          &nbsp;by&nbsp;\r\n          <span title='Sai Nikhil' role='img' aria-label='Sai Nikhil'>\r\n            👨‍💻\r\n          </span>\r\n        </p>\r\n        <p className='my-2 sm:my-0 w-full sm:w-1/3'>\r\n          <Link to='/privacy-policy' className={`link z-0 hover:text-${theme}`}>\r\n            Privacy Policy\r\n          </Link>\r\n        </p>\r\n      </div>\r\n      <p className='mx-auto text-center text-sm'>\r\n        &copy; {moment().format('YYYY')}{' '}\r\n        <a\r\n          className={`link z-0 hover:text-${theme}`}\r\n          href='https://iamsainikhil.github.io'\r\n          target='_blank'\r\n          rel='noreferrer noopener'\r\n          onClick={() => emitGA('Visit Portfolio', 'Portfolio Link')}>\r\n          Sai Nikhil\r\n        </a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FooterComponent\r\n","import React, {useContext, Suspense, lazy} from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\nimport ReactGA from 'react-ga'\r\nimport {ThemeContext} from './context/ThemeContext'\r\nimport HeaderComponent from './components/header/HeaderComponent'\r\nimport FooterComponent from './components/footer/FooterComponent'\r\nimport LoaderComponent from './components/loader/LoaderComponent'\r\nimport {Timing} from './utils/ReactAnalytics'\r\nconst HomeContainer = lazy(() => import('./containers/home/HomeContainer'))\r\nconst PrivacyPolicyComponent = lazy(() =>\r\n  import('./components/privacy-policy/PrivacyPolicyComponent')\r\n)\r\n\r\n// reactGA initialization\r\nReactGA.initialize('UA-85329633-7')\r\n\r\nconst App = () => {\r\n  const {theme} = useContext(ThemeContext)\r\n\r\n  const callback = list => {\r\n    list.getEntries().forEach(entry => {\r\n      Timing({\r\n        variable: 'Sever Latency',\r\n        value: entry.responseStart - entry.requestStart,\r\n        label: 'navigation'\r\n      })\r\n      Timing({\r\n        variable: 'Download Time',\r\n        value: entry.responseEnd - entry.responseStart,\r\n        label: 'navigation'\r\n      })\r\n      Timing({\r\n        variable: 'Total App Load Time',\r\n        value: entry.responseEnd - entry.requestStart,\r\n        label: 'navigation'\r\n      })\r\n    })\r\n  }\r\n\r\n  let observer = new PerformanceObserver(callback)\r\n  observer.observe({entryTypes: ['navigation']})\r\n\r\n  return (\r\n    <div className={` bg-${theme} tracking-wider border-box wrapper`}>\r\n      <div>\r\n        <HeaderComponent />\r\n      </div>\r\n      <div>\r\n        <Suspense\r\n          fallback={<LoaderComponent loaderText='Loading components' />}>\r\n          <Switch>\r\n            <Route path='/' exact component={HomeContainer}></Route>\r\n            <Route\r\n              path='/privacy-policy'\r\n              exact\r\n              component={PrivacyPolicyComponent}></Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n      <div>\r\n        <FooterComponent />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport './styles/main.css'\r\nimport * as Sentry from '@sentry/browser'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {ThemeContextProvider} from './context/ThemeContext'\r\n\r\nconst SENTRY_DSN = process.env.REACT_APP_SENTRY_DSN\r\n\r\nSentry.init({dsn: `${SENTRY_DSN}`})\r\n\r\nconst app = (\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <ThemeContextProvider>\r\n      <App />\r\n    </ThemeContextProvider>\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}