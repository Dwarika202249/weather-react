{"version":3,"sources":["components/icon/IconComponent.js","components/header/HeaderComponent.js","components/footer/FooterComponent.js","App.js","serviceWorker.js","utils/FetchIPAddress.js","index.js","context/ThemeContext.js","utils/ReactAnalytics.js","components/loader/LoaderComponent.js","utils/AssetsSrcURL.js"],"names":["IconComponent","iconType","className","HeaderComponent","useContext","ThemeContext","theme","toggleTheme","to","src","assetsSrcURL","alt","isEmpty","checked","icons","unchecked","onChange","FooterComponent","colorTheme","emitGA","action","label","Event","category","style","backgroundColor","href","target","rel","onClick","title","role","aria-label","moment","format","HomeContainer","lazy","PrivacyPolicyComponent","ReactGA","initialize","process","App","fallback","LoaderComponent","loaderText","path","exact","component","Boolean","window","location","hostname","match","fetchIPAddress","a","ip","axios","get","data","Sentry","dsn","initLogRocket","LogRocket","init","setupLogRocketReact","getSessionURL","sessionURL","scope","setExtra","ipaddresses","isUndefined","split","includes","logRocketSetup","console","clear","log","publicUrl","app","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","React","createContext","ThemeContextProvider","children","useState","setTheme","saveThemePreference","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","hour","daynightChecker","Provider","value","selectedTheme","event"],"mappings":"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","file":"static/js/main.79274903.chunk.js","sourcesContent":["import React from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FaSun, FaMoon} from 'react-icons/fa'\r\n\r\nconst IconComponent = ({iconType}) => {\r\n  return (\r\n    <div>\r\n      {iconType === 'light' ? (\r\n        <p className='text-toggle'>\r\n          <FaSun />\r\n        </p>\r\n      ) : (\r\n        <p className='text-toggle'>\r\n          <FaMoon />\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IconComponent\r\n\r\nIconComponent.propTypes = {\r\n  iconType: PropTypes.string\r\n}\r\n","import React, {useContext} from 'react'\r\nimport Toggle from 'react-toggle'\r\nimport './ReactToggle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport IconComponent from '../icon/IconComponent'\r\nimport {Link} from 'react-router-dom'\r\nimport {isEmpty} from 'lodash-es'\r\nimport assetsSrcURL from './../../utils/AssetsSrcURL'\r\n\r\nconst HeaderComponent = () => {\r\n  const {theme, toggleTheme} = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div className='flex justify-between items-center px-5 py-5'>\r\n      <div>\r\n        <Link to='/'>\r\n          <img\r\n            src={`${assetsSrcURL}/logo.png`}\r\n            alt='Logo'\r\n            className='h-12 w-12 object-contain object-center cursor-pointer'\r\n          />\r\n        </Link>\r\n      </div>\r\n      <div>\r\n        {/* below condition to avoid toggle glitch effect on page refresh */}\r\n        {!isEmpty(theme) ? (\r\n          <Toggle\r\n            checked={theme === 'light'}\r\n            icons={{\r\n              checked: <IconComponent iconType={'light'} />,\r\n              unchecked: <IconComponent iconType={'dark'} />,\r\n            }}\r\n            onChange={toggleTheme}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderComponent\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport moment from 'moment-timezone'\r\nimport {Link} from 'react-router-dom'\r\nimport {Event} from '../../utils/ReactAnalytics'\r\nimport {FaHeart, FaReact} from 'react-icons/fa'\r\n\r\nconst FooterComponent = () => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const emitGA = (action, label) => {\r\n    Event({\r\n      category: 'Footer Links',\r\n      action,\r\n      label,\r\n    })\r\n  }\r\n  return (\r\n    <div\r\n      className={`text-${colorTheme} pb-3`}\r\n      style={{\r\n        backgroundColor: theme === 'dark' ? '#292929' : '#e8ebee',\r\n      }}>\r\n      <div\r\n        className={`flex flex-col text-center sm:flex sm:flex-row justify-around p-5 text-${colorTheme} text-sm`}>\r\n        <p className='my-2 sm:my-0 w-full sm:w-1/3'>\r\n          <a\r\n            href='https://github.com/iamsainikhil/weather-react/'\r\n            target='_blank'\r\n            rel='noreferrer noopener'\r\n            className={`link z-0 hover:text-${theme}`}\r\n            onClick={() => emitGA('Visit GitHub', 'GitHub Link')}>\r\n            GitHub\r\n          </a>\r\n        </p>\r\n        <p className='flex flex-no-wrap justify-center items-center my-2 sm:my-0 w-full sm:w-1/2'>\r\n          Made with&nbsp;\r\n          <span\r\n            title='Love'\r\n            role='img'\r\n            aria-label='Love'\r\n            className='text-base text-heart'>\r\n            <FaHeart />\r\n          </span>\r\n          &nbsp;using&nbsp;\r\n          <span\r\n            title='React'\r\n            role='img'\r\n            aria-label='React'\r\n            className='text-base text-react'>\r\n            <FaReact />\r\n          </span>\r\n        </p>\r\n        <p className='my-2 sm:my-0 w-full sm:w-1/3'>\r\n          <Link to='/privacy-policy' className={`link z-0 hover:text-${theme}`}>\r\n            Privacy Policy\r\n          </Link>\r\n        </p>\r\n      </div>\r\n      <p className='mx-auto text-center text-sm'>\r\n        &copy; {moment().format('YYYY')}{' '}\r\n        <a\r\n          className={`link z-0 hover:text-${theme}`}\r\n          href='https://iamsainikhil.github.io'\r\n          target='_blank'\r\n          rel='noreferrer noopener'\r\n          onClick={() => emitGA('Visit Portfolio', 'Portfolio Link')}>\r\n          Sai Nikhil\r\n        </a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FooterComponent\r\n","import React, {useContext, Suspense, lazy} from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\nimport {ThemeContext} from './context/ThemeContext'\r\nimport HeaderComponent from './components/header/HeaderComponent'\r\nimport FooterComponent from './components/footer/FooterComponent'\r\nimport LoaderComponent from './components/loader/LoaderComponent'\r\nimport ReactGA from 'react-ga'\r\n\r\nconst HomeContainer = lazy(() => import('./containers/home/HomeContainer'))\r\nconst PrivacyPolicyComponent = lazy(() =>\r\n  import('./components/privacy-policy/PrivacyPolicyComponent')\r\n)\r\n\r\nconst GA_ID = process.env.REACT_APP_GA_ID\r\n\r\n// reactGA initialization\r\nReactGA.initialize(`${GA_ID}`)\r\n\r\nconst App = () => {\r\n  const {theme} = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div className={` bg-${theme} tracking-wider border-box wrapper`}>\r\n      <div>\r\n        <HeaderComponent />\r\n      </div>\r\n      <div>\r\n        <Suspense\r\n          fallback={<LoaderComponent loaderText='Loading components' />}>\r\n          <Switch>\r\n            <Route path='/' exact component={HomeContainer}></Route>\r\n            <Route\r\n              path='/privacy-policy'\r\n              exact\r\n              component={PrivacyPolicyComponent}></Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n      <div>\r\n        <FooterComponent />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nconst fetchIPAddress = async () => {\r\n  let ip = ''\r\n  try {\r\n    const {data} = await axios.get('https://ipapi.co/json')\r\n    ip = data.ip\r\n  } catch (err) {\r\n    Sentry.captureException(err)\r\n  }\r\n\r\n  return ip\r\n}\r\n\r\nexport default fetchIPAddress\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {ThemeContextProvider} from './context/ThemeContext'\r\nimport App from './App'\r\nimport './styles/main.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport * as Sentry from '@sentry/browser'\r\nimport LogRocket from 'logrocket'\r\nimport setupLogRocketReact from 'logrocket-react'\r\nimport fetchIPAddress from './utils/FetchIPAddress'\r\nimport {isUndefined} from 'lodash-es'\r\n\r\nconst SENTRY_DSN = process.env.REACT_APP_SENTRY_DSN\r\nSentry.init({dsn: `${SENTRY_DSN}`})\r\n\r\n// init logrocket sessions only in the prod env and on unignored ip\r\nconst initLogRocket = () => {\r\n  const LOGROCKET_PROJECT_ID = process.env.REACT_APP_LOGROCKET_PROJECT_ID\r\n  LogRocket.init(`${LOGROCKET_PROJECT_ID}`)\r\n  setupLogRocketReact(LogRocket)\r\n\r\n  // LogRocket and Sentry\r\n  LogRocket.getSessionURL((sessionURL) => {\r\n    Sentry.configureScope((scope) => {\r\n      scope.setExtra('sessionURL', sessionURL)\r\n    })\r\n  })\r\n}\r\n\r\nconst logRocketSetup = async () => {\r\n  const ipaddresses = process.env.REACT_APP_IGNORE_IP\r\n  // check if ignore ip env variable exist\r\n  if (!isUndefined(ipaddresses)) {\r\n    // fetch ip address and check if it matches any one of the ipaddresses\r\n    // initLogRocket when ip is not in the ignore list or ip fetch fail\r\n    const ip = await fetchIPAddress()\r\n    if (\r\n      !isUndefined(ip) &&\r\n      !ipaddresses.split(',').includes(ip) &&\r\n      process.env.NODE_ENV !== 'development'\r\n    ) {\r\n      initLogRocket()\r\n    }\r\n  } else {\r\n    initLogRocket()\r\n  }\r\n}\r\n\r\nlogRocketSetup()\r\n\r\n// custom console message\r\nconsole.clear()\r\nconsole.log(\r\n  `%c\r\n\r\nlloHe   HelloH lloHelloHel  HelloH       loHell          oHello\r\nlloHe   Hello  lloHelloHell HelloH       loHell         loHelloH\r\nloH     ell   lloH    Hell   llo          Hel         lloH  loHe\r\nloH     ell    loH           ll           He          llo    oHe\r\nloH     ell    loHell        ll           He         ello    oHel\r\nloHelloHell    loHello       ll           He         ello    oHel\r\nloHel o ell    loHello       llo          Hel         llo    oHe\r\nloH     ell    loH          ello    oH   oHel    ll   llo    oHe\r\nloH     ell    loHe    ell   llo    oH    Hel    ll   lloH  loHe\r\nlloHe   Hello  lloHell Hell HelloHelloH  loHelloHell    loHelloH\r\nlloHe   Hello  lloHelloHell HelloHelloH  loHelloHell     oHello\r\n\r\n%c Interested in the code behind this application? Well you're in luck - this application is open source! \r\nCome say hi, tell me what you're debugging, or if interested in the codebase, \r\ncheck out the repo on GitHub - https://github.com/iamsainikhil/weather-react   `,\r\n  'font-size: 1vmin',\r\n  'margin-bottom: 5px; line-height: 1.5'\r\n)\r\n\r\n// important change after recent upgrade of react-scripts to ^3.4.0\r\nconst publicUrl = process.env.PUBLIC_URL ?? '/'\r\n\r\nconsole.log(publicUrl)\r\n\r\nconst app = (\r\n  <Router basename={publicUrl}>\r\n    <ThemeContextProvider>\r\n      <App />\r\n    </ThemeContextProvider>\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import React, {useState, useEffect} from 'react'\r\nimport moment from 'moment-timezone'\r\nimport {Event} from '../utils/ReactAnalytics'\r\n\r\nconst ThemeContext = React.createContext({\r\n  theme: 'light',\r\n  toggleTheme: () => {}\r\n})\r\n\r\n// track theme toggles to GA\r\nconst emitGA = theme => {\r\n  Event({\r\n    category: 'Theme',\r\n    action: 'Toggle Theme',\r\n    label: theme\r\n  })\r\n}\r\n\r\nconst ThemeContextProvider = ({children}) => {\r\n  const [theme, setTheme] = useState('')\r\n  const colorTheme = theme === 'light' ? 'dark' : 'light'\r\n\r\n  const toggleTheme = () => {\r\n    const selectedTheme = theme === 'light' ? 'dark' : 'light'\r\n    emitGA(selectedTheme)\r\n    setTheme(selectedTheme)\r\n    saveThemePreference(selectedTheme)\r\n  }\r\n\r\n  const saveThemePreference = theme => {\r\n    localStorage.setItem('theme', JSON.stringify(theme))\r\n  }\r\n\r\n  const daynightChecker = () => {\r\n    const hour = moment().format('H')\r\n    if (hour >= 6 && hour < 18) {\r\n      setTheme('light')\r\n      saveThemePreference('light')\r\n    } else {\r\n      setTheme('dark')\r\n      saveThemePreference('dark')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // set theme based on the time on initial application load and\r\n    // when there is no theme preference in the localStorage\r\n    if (!localStorage.getItem('theme')) {\r\n      daynightChecker()\r\n    } else {\r\n      setTheme(JSON.parse(localStorage.getItem('theme')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{theme, colorTheme, toggleTheme}}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport {ThemeContext, ThemeContextProvider}\r\n","import ReactGA from 'react-ga'\r\n\r\nexport const Event = ({category, action, label}) => {\r\n  ReactGA.event({\r\n    category,\r\n    action,\r\n    label\r\n  })\r\n}\r\n\r\nexport const pageView = ({path}) => {\r\n  ReactGA.pageView(path)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport './LoaderStyle.scss'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst LoaderComponent = ({loaderText}) => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='flex flex-col w-full justify-center items-center'>\r\n      <div className='spinner'>\r\n        <div className='double-bounce1'></div>\r\n        <div className='double-bounce2'></div>\r\n      </div>\r\n      {loaderText && (\r\n        <div\r\n          className={`mx-auto text-center text-sm font-light text-${\r\n            theme === 'light' ? 'dark' : 'light'\r\n          }`}>\r\n          {loaderText}\r\n          <span className='text-2xl text-fade'>...</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoaderComponent\r\n\r\nLoaderComponent.propTypes = {\r\n  loaderText: PropTypes.string\r\n}\r\n","// this URL points to the root directory of the app\r\nconst publicUrl = process.env.PUBLIC_URL ?? '/'\r\nexport default publicUrl === '/' ? './' : './weather-react'\r\n"],"sourceRoot":""}